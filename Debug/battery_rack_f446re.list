
battery_rack_f446re.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  080081a4  080081a4  000181a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085c0  080085c0  000200f8  2**0
                  CONTENTS
  4 .ARM          00000008  080085c0  080085c0  000185c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085c8  080085c8  000200f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085c8  080085c8  000185c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085cc  080085cc  000185cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f8  20000000  080085d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  200000f8  080086c8  000200f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000448  080086c8  00020448  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017449  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d2d  00000000  00000000  00037571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001320  00000000  00000000  0003b2a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001118  00000000  00000000  0003c5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a82  00000000  00000000  0003d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c202  00000000  00000000  0006415a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d824a  00000000  00000000  0008035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001585a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055dc  00000000  00000000  001585f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000f8 	.word	0x200000f8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800818c 	.word	0x0800818c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000fc 	.word	0x200000fc
 800020c:	0800818c 	.word	0x0800818c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2uiz>:
 8000a4c:	004a      	lsls	r2, r1, #1
 8000a4e:	d211      	bcs.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d211      	bcs.n	8000a7a <__aeabi_d2uiz+0x2e>
 8000a56:	d50d      	bpl.n	8000a74 <__aeabi_d2uiz+0x28>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d40e      	bmi.n	8000a80 <__aeabi_d2uiz+0x34>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a72:	4770      	bx	lr
 8000a74:	f04f 0000 	mov.w	r0, #0
 8000a78:	4770      	bx	lr
 8000a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a7e:	d102      	bne.n	8000a86 <__aeabi_d2uiz+0x3a>
 8000a80:	f04f 30ff 	mov.w	r0, #4294967295
 8000a84:	4770      	bx	lr
 8000a86:	f04f 0000 	mov.w	r0, #0
 8000a8a:	4770      	bx	lr

08000a8c <__aeabi_uldivmod>:
 8000a8c:	b953      	cbnz	r3, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a8e:	b94a      	cbnz	r2, 8000aa4 <__aeabi_uldivmod+0x18>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bf08      	it	eq
 8000a94:	2800      	cmpeq	r0, #0
 8000a96:	bf1c      	itt	ne
 8000a98:	f04f 31ff 	movne.w	r1, #4294967295
 8000a9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa0:	f000 b974 	b.w	8000d8c <__aeabi_idiv0>
 8000aa4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000aa8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aac:	f000 f806 	bl	8000abc <__udivmoddi4>
 8000ab0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ab4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ab8:	b004      	add	sp, #16
 8000aba:	4770      	bx	lr

08000abc <__udivmoddi4>:
 8000abc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac0:	9d08      	ldr	r5, [sp, #32]
 8000ac2:	4604      	mov	r4, r0
 8000ac4:	468e      	mov	lr, r1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d14d      	bne.n	8000b66 <__udivmoddi4+0xaa>
 8000aca:	428a      	cmp	r2, r1
 8000acc:	4694      	mov	ip, r2
 8000ace:	d969      	bls.n	8000ba4 <__udivmoddi4+0xe8>
 8000ad0:	fab2 f282 	clz	r2, r2
 8000ad4:	b152      	cbz	r2, 8000aec <__udivmoddi4+0x30>
 8000ad6:	fa01 f302 	lsl.w	r3, r1, r2
 8000ada:	f1c2 0120 	rsb	r1, r2, #32
 8000ade:	fa20 f101 	lsr.w	r1, r0, r1
 8000ae2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ae6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aea:	4094      	lsls	r4, r2
 8000aec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af0:	0c21      	lsrs	r1, r4, #16
 8000af2:	fbbe f6f8 	udiv	r6, lr, r8
 8000af6:	fa1f f78c 	uxth.w	r7, ip
 8000afa:	fb08 e316 	mls	r3, r8, r6, lr
 8000afe:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b02:	fb06 f107 	mul.w	r1, r6, r7
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d90a      	bls.n	8000b20 <__udivmoddi4+0x64>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b12:	f080 811f 	bcs.w	8000d54 <__udivmoddi4+0x298>
 8000b16:	4299      	cmp	r1, r3
 8000b18:	f240 811c 	bls.w	8000d54 <__udivmoddi4+0x298>
 8000b1c:	3e02      	subs	r6, #2
 8000b1e:	4463      	add	r3, ip
 8000b20:	1a5b      	subs	r3, r3, r1
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b28:	fb08 3310 	mls	r3, r8, r0, r3
 8000b2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b30:	fb00 f707 	mul.w	r7, r0, r7
 8000b34:	42a7      	cmp	r7, r4
 8000b36:	d90a      	bls.n	8000b4e <__udivmoddi4+0x92>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b40:	f080 810a 	bcs.w	8000d58 <__udivmoddi4+0x29c>
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	f240 8107 	bls.w	8000d58 <__udivmoddi4+0x29c>
 8000b4a:	4464      	add	r4, ip
 8000b4c:	3802      	subs	r0, #2
 8000b4e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b52:	1be4      	subs	r4, r4, r7
 8000b54:	2600      	movs	r6, #0
 8000b56:	b11d      	cbz	r5, 8000b60 <__udivmoddi4+0xa4>
 8000b58:	40d4      	lsrs	r4, r2
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b60:	4631      	mov	r1, r6
 8000b62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d909      	bls.n	8000b7e <__udivmoddi4+0xc2>
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	f000 80ef 	beq.w	8000d4e <__udivmoddi4+0x292>
 8000b70:	2600      	movs	r6, #0
 8000b72:	e9c5 0100 	strd	r0, r1, [r5]
 8000b76:	4630      	mov	r0, r6
 8000b78:	4631      	mov	r1, r6
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	fab3 f683 	clz	r6, r3
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	d14a      	bne.n	8000c1c <__udivmoddi4+0x160>
 8000b86:	428b      	cmp	r3, r1
 8000b88:	d302      	bcc.n	8000b90 <__udivmoddi4+0xd4>
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	f200 80f9 	bhi.w	8000d82 <__udivmoddi4+0x2c6>
 8000b90:	1a84      	subs	r4, r0, r2
 8000b92:	eb61 0303 	sbc.w	r3, r1, r3
 8000b96:	2001      	movs	r0, #1
 8000b98:	469e      	mov	lr, r3
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	d0e0      	beq.n	8000b60 <__udivmoddi4+0xa4>
 8000b9e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ba2:	e7dd      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000ba4:	b902      	cbnz	r2, 8000ba8 <__udivmoddi4+0xec>
 8000ba6:	deff      	udf	#255	; 0xff
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	2a00      	cmp	r2, #0
 8000bae:	f040 8092 	bne.w	8000cd6 <__udivmoddi4+0x21a>
 8000bb2:	eba1 010c 	sub.w	r1, r1, ip
 8000bb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bba:	fa1f fe8c 	uxth.w	lr, ip
 8000bbe:	2601      	movs	r6, #1
 8000bc0:	0c20      	lsrs	r0, r4, #16
 8000bc2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bc6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bce:	fb0e f003 	mul.w	r0, lr, r3
 8000bd2:	4288      	cmp	r0, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0x12c>
 8000bd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bda:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x12a>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f200 80cb 	bhi.w	8000d7c <__udivmoddi4+0x2c0>
 8000be6:	4643      	mov	r3, r8
 8000be8:	1a09      	subs	r1, r1, r0
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bf4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bf8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bfc:	45a6      	cmp	lr, r4
 8000bfe:	d908      	bls.n	8000c12 <__udivmoddi4+0x156>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c08:	d202      	bcs.n	8000c10 <__udivmoddi4+0x154>
 8000c0a:	45a6      	cmp	lr, r4
 8000c0c:	f200 80bb 	bhi.w	8000d86 <__udivmoddi4+0x2ca>
 8000c10:	4608      	mov	r0, r1
 8000c12:	eba4 040e 	sub.w	r4, r4, lr
 8000c16:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c1a:	e79c      	b.n	8000b56 <__udivmoddi4+0x9a>
 8000c1c:	f1c6 0720 	rsb	r7, r6, #32
 8000c20:	40b3      	lsls	r3, r6
 8000c22:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c26:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c2a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c2e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c32:	431c      	orrs	r4, r3
 8000c34:	40f9      	lsrs	r1, r7
 8000c36:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c3a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c3e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c42:	0c20      	lsrs	r0, r4, #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fb09 1118 	mls	r1, r9, r8, r1
 8000c4c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c50:	fb08 f00e 	mul.w	r0, r8, lr
 8000c54:	4288      	cmp	r0, r1
 8000c56:	fa02 f206 	lsl.w	r2, r2, r6
 8000c5a:	d90b      	bls.n	8000c74 <__udivmoddi4+0x1b8>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c64:	f080 8088 	bcs.w	8000d78 <__udivmoddi4+0x2bc>
 8000c68:	4288      	cmp	r0, r1
 8000c6a:	f240 8085 	bls.w	8000d78 <__udivmoddi4+0x2bc>
 8000c6e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c72:	4461      	add	r1, ip
 8000c74:	1a09      	subs	r1, r1, r0
 8000c76:	b2a4      	uxth	r4, r4
 8000c78:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c7c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c80:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c84:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c88:	458e      	cmp	lr, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x1e2>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c94:	d26c      	bcs.n	8000d70 <__udivmoddi4+0x2b4>
 8000c96:	458e      	cmp	lr, r1
 8000c98:	d96a      	bls.n	8000d70 <__udivmoddi4+0x2b4>
 8000c9a:	3802      	subs	r0, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ca2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ca6:	eba1 010e 	sub.w	r1, r1, lr
 8000caa:	42a1      	cmp	r1, r4
 8000cac:	46c8      	mov	r8, r9
 8000cae:	46a6      	mov	lr, r4
 8000cb0:	d356      	bcc.n	8000d60 <__udivmoddi4+0x2a4>
 8000cb2:	d053      	beq.n	8000d5c <__udivmoddi4+0x2a0>
 8000cb4:	b15d      	cbz	r5, 8000cce <__udivmoddi4+0x212>
 8000cb6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cba:	eb61 010e 	sbc.w	r1, r1, lr
 8000cbe:	fa01 f707 	lsl.w	r7, r1, r7
 8000cc2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cc6:	40f1      	lsrs	r1, r6
 8000cc8:	431f      	orrs	r7, r3
 8000cca:	e9c5 7100 	strd	r7, r1, [r5]
 8000cce:	2600      	movs	r6, #0
 8000cd0:	4631      	mov	r1, r6
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	f1c2 0320 	rsb	r3, r2, #32
 8000cda:	40d8      	lsrs	r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ce4:	4091      	lsls	r1, r2
 8000ce6:	4301      	orrs	r1, r0
 8000ce8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cec:	fa1f fe8c 	uxth.w	lr, ip
 8000cf0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cf4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cf8:	0c0b      	lsrs	r3, r1, #16
 8000cfa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cfe:	fb00 f60e 	mul.w	r6, r0, lr
 8000d02:	429e      	cmp	r6, r3
 8000d04:	fa04 f402 	lsl.w	r4, r4, r2
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x260>
 8000d0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d12:	d22f      	bcs.n	8000d74 <__udivmoddi4+0x2b8>
 8000d14:	429e      	cmp	r6, r3
 8000d16:	d92d      	bls.n	8000d74 <__udivmoddi4+0x2b8>
 8000d18:	3802      	subs	r0, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	b289      	uxth	r1, r1
 8000d20:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d24:	fb07 3316 	mls	r3, r7, r6, r3
 8000d28:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d2c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x28a>
 8000d34:	eb1c 0101 	adds.w	r1, ip, r1
 8000d38:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d3c:	d216      	bcs.n	8000d6c <__udivmoddi4+0x2b0>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d914      	bls.n	8000d6c <__udivmoddi4+0x2b0>
 8000d42:	3e02      	subs	r6, #2
 8000d44:	4461      	add	r1, ip
 8000d46:	1ac9      	subs	r1, r1, r3
 8000d48:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d4c:	e738      	b.n	8000bc0 <__udivmoddi4+0x104>
 8000d4e:	462e      	mov	r6, r5
 8000d50:	4628      	mov	r0, r5
 8000d52:	e705      	b.n	8000b60 <__udivmoddi4+0xa4>
 8000d54:	4606      	mov	r6, r0
 8000d56:	e6e3      	b.n	8000b20 <__udivmoddi4+0x64>
 8000d58:	4618      	mov	r0, r3
 8000d5a:	e6f8      	b.n	8000b4e <__udivmoddi4+0x92>
 8000d5c:	454b      	cmp	r3, r9
 8000d5e:	d2a9      	bcs.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d60:	ebb9 0802 	subs.w	r8, r9, r2
 8000d64:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d68:	3801      	subs	r0, #1
 8000d6a:	e7a3      	b.n	8000cb4 <__udivmoddi4+0x1f8>
 8000d6c:	4646      	mov	r6, r8
 8000d6e:	e7ea      	b.n	8000d46 <__udivmoddi4+0x28a>
 8000d70:	4620      	mov	r0, r4
 8000d72:	e794      	b.n	8000c9e <__udivmoddi4+0x1e2>
 8000d74:	4640      	mov	r0, r8
 8000d76:	e7d1      	b.n	8000d1c <__udivmoddi4+0x260>
 8000d78:	46d0      	mov	r8, sl
 8000d7a:	e77b      	b.n	8000c74 <__udivmoddi4+0x1b8>
 8000d7c:	3b02      	subs	r3, #2
 8000d7e:	4461      	add	r1, ip
 8000d80:	e732      	b.n	8000be8 <__udivmoddi4+0x12c>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e709      	b.n	8000b9a <__udivmoddi4+0xde>
 8000d86:	4464      	add	r4, ip
 8000d88:	3802      	subs	r0, #2
 8000d8a:	e742      	b.n	8000c12 <__udivmoddi4+0x156>

08000d8c <__aeabi_idiv0>:
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop

08000d90 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08a      	sub	sp, #40	; 0x28
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d96:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000d98:	4a2f      	ldr	r2, [pc, #188]	; (8000e58 <MX_CAN1_Init+0xc8>)
 8000d9a:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000d9c:	4b2d      	ldr	r3, [pc, #180]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000d9e:	2212      	movs	r2, #18
 8000da0:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000da2:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000da8:	4b2a      	ldr	r3, [pc, #168]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000dae:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000db0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000db4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000db6:	4b27      	ldr	r3, [pc, #156]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000db8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dbc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dbe:	4b25      	ldr	r3, [pc, #148]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dc4:	4b23      	ldr	r3, [pc, #140]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dca:	4b22      	ldr	r3, [pc, #136]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd0:	4b20      	ldr	r3, [pc, #128]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000dd6:	4b1f      	ldr	r3, [pc, #124]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ddc:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000de2:	481c      	ldr	r0, [pc, #112]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000de4:	f001 fb40 	bl	8002468 <HAL_CAN_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8000dee:	f000 ff7b 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  CAN_FilterTypeDef can1_filter_init;

    can1_filter_init.FilterActivation = ENABLE;
 8000df2:	2301      	movs	r3, #1
 8000df4:	623b      	str	r3, [r7, #32]
    can1_filter_init.FilterBank  = 0;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
    can1_filter_init.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
    can1_filter_init.FilterIdHigh = 0x0000;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	603b      	str	r3, [r7, #0]
    can1_filter_init.FilterIdLow = 0x0000;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
    can1_filter_init.FilterMaskIdHigh = 0x0000;
 8000e06:	2300      	movs	r3, #0
 8000e08:	60bb      	str	r3, [r7, #8]
    can1_filter_init.FilterMaskIdLow = 0x0000;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	60fb      	str	r3, [r7, #12]
    can1_filter_init.FilterMode = CAN_FILTERMODE_IDMASK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61bb      	str	r3, [r7, #24]
    can1_filter_init.FilterScale = CAN_FILTERSCALE_32BIT;
 8000e12:	2301      	movs	r3, #1
 8000e14:	61fb      	str	r3, [r7, #28]

    if (HAL_CAN_ConfigFilter(&hcan1,&can1_filter_init) != HAL_OK) {
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	480e      	ldr	r0, [pc, #56]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000e1c:	f001 fc20 	bl	8002660 <HAL_CAN_ConfigFilter>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_CAN1_Init+0x9a>
      Error_Handler();
 8000e26:	f000 ff5f 	bl	8001ce8 <Error_Handler>
    }

    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000e2a:	480a      	ldr	r0, [pc, #40]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000e2c:	f001 fcf8 	bl	8002820 <HAL_CAN_Start>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_CAN1_Init+0xaa>
      Error_Handler();
 8000e36:	f000 ff57 	bl	8001ce8 <Error_Handler>
    }

    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8000e3a:	2102      	movs	r1, #2
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_CAN1_Init+0xc4>)
 8000e3e:	f001 ff69 	bl	8002d14 <HAL_CAN_ActivateNotification>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_CAN1_Init+0xbc>
      Error_Handler();
 8000e48:	f000 ff4e 	bl	8001ce8 <Error_Handler>
    }

  /* USER CODE END CAN1_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	3728      	adds	r7, #40	; 0x28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	20000114 	.word	0x20000114
 8000e58:	40006400 	.word	0x40006400

08000e5c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08a      	sub	sp, #40	; 0x28
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]
 8000e72:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a1d      	ldr	r2, [pc, #116]	; (8000ef0 <HAL_CAN_MspInit+0x94>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d134      	bne.n	8000ee8 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	613b      	str	r3, [r7, #16]
 8000e82:	4b1c      	ldr	r3, [pc, #112]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a1b      	ldr	r2, [pc, #108]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000e88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e96:	613b      	str	r3, [r7, #16]
 8000e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b15      	ldr	r3, [pc, #84]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea2:	4a14      	ldr	r2, [pc, #80]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <HAL_CAN_MspInit+0x98>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000eb6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ec8:	2309      	movs	r3, #9
 8000eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4809      	ldr	r0, [pc, #36]	; (8000ef8 <HAL_CAN_MspInit+0x9c>)
 8000ed4:	f002 fc22 	bl	800371c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2100      	movs	r1, #0
 8000edc:	2014      	movs	r0, #20
 8000ede:	f002 fa6c 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000ee2:	2014      	movs	r0, #20
 8000ee4:	f002 fa85 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40006400 	.word	0x40006400
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020000 	.word	0x40020000

08000efc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f0a:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <MX_DAC_Init+0x4c>)
 8000f0c:	4a0f      	ldr	r2, [pc, #60]	; (8000f4c <MX_DAC_Init+0x50>)
 8000f0e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f10:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_DAC_Init+0x4c>)
 8000f12:	f002 fa88 	bl	8003426 <HAL_DAC_Init>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f1c:	f000 fee4 	bl	8001ce8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4806      	ldr	r0, [pc, #24]	; (8000f48 <MX_DAC_Init+0x4c>)
 8000f30:	f002 fb12 	bl	8003558 <HAL_DAC_ConfigChannel>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f3a:	f000 fed5 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000013c 	.word	0x2000013c
 8000f4c:	40007400 	.word	0x40007400

08000f50 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <HAL_DAC_MspInit+0x7c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d127      	bne.n	8000fc2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b16      	ldr	r3, [pc, #88]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a15      	ldr	r2, [pc, #84]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000f7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	4a0e      	ldr	r2, [pc, #56]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f9e:	4b0c      	ldr	r3, [pc, #48]	; (8000fd0 <HAL_DAC_MspInit+0x80>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000faa:	2310      	movs	r3, #16
 8000fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_DAC_MspInit+0x84>)
 8000fbe:	f002 fbad 	bl	800371c <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40007400 	.word	0x40007400
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	; 0x28
 8000fdc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	613b      	str	r3, [r7, #16]
 8000ff2:	4b4a      	ldr	r3, [pc, #296]	; (800111c <MX_GPIO_Init+0x144>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a49      	ldr	r2, [pc, #292]	; (800111c <MX_GPIO_Init+0x144>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b47      	ldr	r3, [pc, #284]	; (800111c <MX_GPIO_Init+0x144>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	4b43      	ldr	r3, [pc, #268]	; (800111c <MX_GPIO_Init+0x144>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a42      	ldr	r2, [pc, #264]	; (800111c <MX_GPIO_Init+0x144>)
 8001014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b40      	ldr	r3, [pc, #256]	; (800111c <MX_GPIO_Init+0x144>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	4b3c      	ldr	r3, [pc, #240]	; (800111c <MX_GPIO_Init+0x144>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	4a3b      	ldr	r2, [pc, #236]	; (800111c <MX_GPIO_Init+0x144>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	; 0x30
 8001036:	4b39      	ldr	r3, [pc, #228]	; (800111c <MX_GPIO_Init+0x144>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	4b35      	ldr	r3, [pc, #212]	; (800111c <MX_GPIO_Init+0x144>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	4a34      	ldr	r2, [pc, #208]	; (800111c <MX_GPIO_Init+0x144>)
 800104c:	f043 0302 	orr.w	r3, r3, #2
 8001050:	6313      	str	r3, [r2, #48]	; 0x30
 8001052:	4b32      	ldr	r3, [pc, #200]	; (800111c <MX_GPIO_Init+0x144>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	607b      	str	r3, [r7, #4]
 800105c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|DOOR_LOCK_Pin|EN_CHARGE_Pin, GPIO_PIN_RESET);
 800105e:	2200      	movs	r2, #0
 8001060:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 8001064:	482e      	ldr	r0, [pc, #184]	; (8001120 <MX_GPIO_Init+0x148>)
 8001066:	f002 fd05 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_CHARGE_Pin|LED_FULL_Pin, GPIO_PIN_RESET);
 800106a:	2200      	movs	r2, #0
 800106c:	2130      	movs	r1, #48	; 0x30
 800106e:	482d      	ldr	r0, [pc, #180]	; (8001124 <MX_GPIO_Init+0x14c>)
 8001070:	f002 fd00 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800107a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800107e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4827      	ldr	r0, [pc, #156]	; (8001128 <MX_GPIO_Init+0x150>)
 800108c:	f002 fb46 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|EN_CHARGE_Pin;
 8001090:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001096:	2301      	movs	r3, #1
 8001098:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	481d      	ldr	r0, [pc, #116]	; (8001120 <MX_GPIO_Init+0x148>)
 80010aa:	f002 fb37 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_SENS_Pin;
 80010ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b4:	2300      	movs	r3, #0
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DOOR_SENS_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4818      	ldr	r0, [pc, #96]	; (8001124 <MX_GPIO_Init+0x14c>)
 80010c4:	f002 fb2a 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DOOR_LOCK_Pin;
 80010c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DOOR_LOCK_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480f      	ldr	r0, [pc, #60]	; (8001120 <MX_GPIO_Init+0x148>)
 80010e2:	f002 fb1b 	bl	800371c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_CHARGE_Pin|LED_FULL_Pin;
 80010e6:	2330      	movs	r3, #48	; 0x30
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <MX_GPIO_Init+0x14c>)
 80010fe:	f002 fb0d 	bl	800371c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001102:	2200      	movs	r2, #0
 8001104:	2100      	movs	r1, #0
 8001106:	2028      	movs	r0, #40	; 0x28
 8001108:	f002 f957 	bl	80033ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f002 f970 	bl	80033f2 <HAL_NVIC_EnableIRQ>

}
 8001112:	bf00      	nop
 8001114:	3728      	adds	r7, #40	; 0x28
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000
 8001124:	40020400 	.word	0x40020400
 8001128:	40020800 	.word	0x40020800

0800112c <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, HAL_MAX_DELAY);
 8001134:	1d39      	adds	r1, r7, #4
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2201      	movs	r2, #1
 800113c:	4803      	ldr	r0, [pc, #12]	; (800114c <__io_putchar+0x20>)
 800113e:	f003 fec4 	bl	8004eca <HAL_UART_Transmit>
    return ch;
 8001142:	687b      	ldr	r3, [r7, #4]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000248 	.word	0x20000248

08001150 <enableBattery>:

bool can_tx_error_flag = false;
bool acquired = false;

void enableBattery()
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	; 0x28
 8001154:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;

    TxHeader.DLC = 8;
 8001156:	2308      	movs	r3, #8
 8001158:	623b      	str	r3, [r7, #32]
    TxHeader.IDE = CAN_ID_STD;
 800115a:	2300      	movs	r3, #0
 800115c:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
    TxHeader.TransmitGlobalTime = DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    TxHeader.StdId = 0x456;
 8001168:	f240 4356 	movw	r3, #1110	; 0x456
 800116c:	613b      	str	r3, [r7, #16]
    uint8_t TxData[] = {0xAA, 0x01, 0x4E, 0x69, 0x44, 0x61, 0x59, 0x65};
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <enableBattery+0x68>)
 8001170:	1d3b      	adds	r3, r7, #4
 8001172:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001176:	e883 0003 	stmia.w	r3, {r0, r1}

    if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	1d3a      	adds	r2, r7, #4
 8001180:	f107 0110 	add.w	r1, r7, #16
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <enableBattery+0x6c>)
 8001186:	f001 fbd8 	bl	800293a <HAL_CAN_AddTxMessage>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d00b      	beq.n	80011a8 <enableBattery+0x58>
    {
        can_tx_error_flag = true;
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <enableBattery+0x70>)
 8001192:	2201      	movs	r2, #1
 8001194:	701a      	strb	r2, [r3, #0]
        HAL_CAN_Stop(&hcan1);
 8001196:	4809      	ldr	r0, [pc, #36]	; (80011bc <enableBattery+0x6c>)
 8001198:	f001 fb86 	bl	80028a8 <HAL_CAN_Stop>
        HAL_CAN_ResetError(&hcan1);
 800119c:	4807      	ldr	r0, [pc, #28]	; (80011bc <enableBattery+0x6c>)
 800119e:	f002 f80e 	bl	80031be <HAL_CAN_ResetError>
       	// HAL_CAN_MspDeInit(&hcan1);
       	// HAL_CAN_DeInit(&hcan1);
       	// HAL_CAN_MspInit(&hcan1);
        MX_CAN1_Init();
 80011a2:	f7ff fdf5 	bl	8000d90 <MX_CAN1_Init>
    }
    else can_tx_error_flag = false;
}
 80011a6:	e002      	b.n	80011ae <enableBattery+0x5e>
    else can_tx_error_flag = false;
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <enableBattery+0x70>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	701a      	strb	r2, [r3, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3728      	adds	r7, #40	; 0x28
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	080081a4 	.word	0x080081a4
 80011bc:	20000114 	.word	0x20000114
 80011c0:	200001b3 	.word	0x200001b3

080011c4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13) {
 80011ce:	88fb      	ldrh	r3, [r7, #6]
 80011d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011d4:	d11e      	bne.n	8001214 <HAL_GPIO_EXTI_Callback+0x50>
        battery_id1 = 0;
 80011d6:	4b11      	ldr	r3, [pc, #68]	; (800121c <HAL_GPIO_EXTI_Callback+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
        battery_id2 = 0;
 80011dc:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_GPIO_EXTI_Callback+0x5c>)
 80011de:	2200      	movs	r2, #0
 80011e0:	601a      	str	r2, [r3, #0]
        battery_current = 0;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_GPIO_EXTI_Callback+0x60>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
        battery_voltage = 0;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <HAL_GPIO_EXTI_Callback+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
        battery_capacity = 0;
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_GPIO_EXTI_Callback+0x68>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
        charge_status = 0;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
        battery_temperature = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <HAL_GPIO_EXTI_Callback+0x70>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
        charging_flag = false;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_GPIO_EXTI_Callback+0x74>)
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
        memset(battcells, 0, sizeof(battcells));
 8001206:	2218      	movs	r2, #24
 8001208:	2100      	movs	r1, #0
 800120a:	480c      	ldr	r0, [pc, #48]	; (800123c <HAL_GPIO_EXTI_Callback+0x78>)
 800120c:	f005 fff4 	bl	80071f8 <memset>
        enableBattery();
 8001210:	f7ff ff9e 	bl	8001150 <enableBattery>
    }
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000184 	.word	0x20000184
 8001220:	20000188 	.word	0x20000188
 8001224:	20000174 	.word	0x20000174
 8001228:	20000178 	.word	0x20000178
 800122c:	20000180 	.word	0x20000180
 8001230:	200001b0 	.word	0x200001b0
 8001234:	2000017c 	.word	0x2000017c
 8001238:	200001b1 	.word	0x200001b1
 800123c:	20000198 	.word	0x20000198

08001240 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001248:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800124a:	4a0c      	ldr	r2, [pc, #48]	; (800127c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800124c:	2100      	movs	r1, #0
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f001 fc4e 	bl	8002af0 <HAL_CAN_GetRxMessage>

   	// printf("id: %ld | ", RxHeader.StdId);
   	// printf("data: %X %X %X %X %X %X %X %X\n", RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7]);

    if (RxHeader.StdId >= 0x200 && RxHeader.StdId <= 0x210)
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800125c:	d307      	bcc.n	800126e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
 800125e:	4b07      	ldr	r3, [pc, #28]	; (800127c <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8001266:	d802      	bhi.n	800126e <HAL_CAN_RxFifo0MsgPendingCallback+0x2e>
    	acquired = true;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	2000016c 	.word	0x2000016c
 800127c:	20000150 	.word	0x20000150
 8001280:	200001b4 	.word	0x200001b4

08001284 <millis>:
#define REG_HOLDING_NREGS HREG_FINAL_ENTRY
static USHORT usRegHoldingStart = REG_HOLDING_START;
static USHORT usRegHoldingBuf[REG_HOLDING_NREGS];

uint32_t millis()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 8001288:	f001 f8be 	bl	8002408 <HAL_GetTick>
 800128c:	4603      	mov	r3, r0
}
 800128e:	4618      	mov	r0, r3
 8001290:	bd80      	pop	{r7, pc}

08001292 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
    if (x < in_min) return out_min;
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	da01      	bge.n	80012ac <map+0x1a>
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	e016      	b.n	80012da <map+0x48>
    if (x > in_max) return out_max;
 80012ac:	68fa      	ldr	r2, [r7, #12]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dd01      	ble.n	80012b8 <map+0x26>
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	e010      	b.n	80012da <map+0x48>
    return (x - in_min) * (out_max - out_min + 1) / (in_max - in_min + 1) + out_min;
 80012b8:	68fa      	ldr	r2, [r7, #12]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	69b9      	ldr	r1, [r7, #24]
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	1a8a      	subs	r2, r1, r2
 80012c4:	3201      	adds	r2, #1
 80012c6:	fb03 f202 	mul.w	r2, r3, r2
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1acb      	subs	r3, r1, r3
 80012d0:	3301      	adds	r3, #1
 80012d2:	fb92 f2f3 	sdiv	r2, r2, r3
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	4413      	add	r3, r2
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <parsing_can_data>:

uint8_t UART3_rxBuffer[12] = {0};

void parsing_can_data()
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
    if (RxHeader.StdId == 0x200)
 80012ec:	4b36      	ldr	r3, [pc, #216]	; (80013c8 <parsing_can_data+0xe0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f4:	d108      	bne.n	8001308 <parsing_can_data+0x20>
    {
        battery_capacity = (RxData[0] << 8) | (RxData[1]);
 80012f6:	4b35      	ldr	r3, [pc, #212]	; (80013cc <parsing_can_data+0xe4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	021b      	lsls	r3, r3, #8
 80012fc:	4a33      	ldr	r2, [pc, #204]	; (80013cc <parsing_can_data+0xe4>)
 80012fe:	7852      	ldrb	r2, [r2, #1]
 8001300:	4313      	orrs	r3, r2
 8001302:	4a33      	ldr	r2, [pc, #204]	; (80013d0 <parsing_can_data+0xe8>)
 8001304:	6013      	str	r3, [r2, #0]
       	// enableBattery();
    	// battery_id = ((RxData[0] << 24) | (RxData[1] << 16) | (RxData[2] << 8) | (RxData[3]));
        battery_id1 = ((RxData[0] << 8) | (RxData[1]));
    	battery_id2 = ((RxData[2] << 8) | (RxData[3]));
    }
}
 8001306:	e059      	b.n	80013bc <parsing_can_data+0xd4>
    else if (RxHeader.StdId == 0x201)
 8001308:	4b2f      	ldr	r3, [pc, #188]	; (80013c8 <parsing_can_data+0xe0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f240 2201 	movw	r2, #513	; 0x201
 8001310:	4293      	cmp	r3, r2
 8001312:	d110      	bne.n	8001336 <parsing_can_data+0x4e>
        battery_current = (RxData[0] << 8) | (RxData[1]);
 8001314:	4b2d      	ldr	r3, [pc, #180]	; (80013cc <parsing_can_data+0xe4>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	4a2c      	ldr	r2, [pc, #176]	; (80013cc <parsing_can_data+0xe4>)
 800131c:	7852      	ldrb	r2, [r2, #1]
 800131e:	4313      	orrs	r3, r2
 8001320:	4a2c      	ldr	r2, [pc, #176]	; (80013d4 <parsing_can_data+0xec>)
 8001322:	6013      	str	r3, [r2, #0]
        battery_voltage = ((RxData[4] << 8) | (RxData[5]));
 8001324:	4b29      	ldr	r3, [pc, #164]	; (80013cc <parsing_can_data+0xe4>)
 8001326:	791b      	ldrb	r3, [r3, #4]
 8001328:	021b      	lsls	r3, r3, #8
 800132a:	4a28      	ldr	r2, [pc, #160]	; (80013cc <parsing_can_data+0xe4>)
 800132c:	7952      	ldrb	r2, [r2, #5]
 800132e:	4313      	orrs	r3, r2
 8001330:	4a29      	ldr	r2, [pc, #164]	; (80013d8 <parsing_can_data+0xf0>)
 8001332:	6013      	str	r3, [r2, #0]
}
 8001334:	e042      	b.n	80013bc <parsing_can_data+0xd4>
    else if (RxHeader.StdId == 0x202)
 8001336:	4b24      	ldr	r3, [pc, #144]	; (80013c8 <parsing_can_data+0xe0>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f240 2202 	movw	r2, #514	; 0x202
 800133e:	4293      	cmp	r3, r2
 8001340:	d118      	bne.n	8001374 <parsing_can_data+0x8c>
        cell_number = RxData[0];
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <parsing_can_data+0xe4>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	461a      	mov	r2, r3
 8001348:	4b24      	ldr	r3, [pc, #144]	; (80013dc <parsing_can_data+0xf4>)
 800134a:	601a      	str	r2, [r3, #0]
        charge_status = RxData[5];
 800134c:	4b1f      	ldr	r3, [pc, #124]	; (80013cc <parsing_can_data+0xe4>)
 800134e:	795a      	ldrb	r2, [r3, #5]
 8001350:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <parsing_can_data+0xf8>)
 8001352:	701a      	strb	r2, [r3, #0]
        battcells[cell_number] = ((RxData[1] << 8) | (RxData[2]));
 8001354:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <parsing_can_data+0xe4>)
 8001356:	785b      	ldrb	r3, [r3, #1]
 8001358:	021b      	lsls	r3, r3, #8
 800135a:	b21a      	sxth	r2, r3
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <parsing_can_data+0xe4>)
 800135e:	789b      	ldrb	r3, [r3, #2]
 8001360:	b21b      	sxth	r3, r3
 8001362:	4313      	orrs	r3, r2
 8001364:	b21a      	sxth	r2, r3
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <parsing_can_data+0xf4>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b291      	uxth	r1, r2
 800136c:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <parsing_can_data+0xfc>)
 800136e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001372:	e023      	b.n	80013bc <parsing_can_data+0xd4>
    else if (RxHeader.StdId == 0x209)
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <parsing_can_data+0xe0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f240 2209 	movw	r2, #521	; 0x209
 800137c:	4293      	cmp	r3, r2
 800137e:	d108      	bne.n	8001392 <parsing_can_data+0xaa>
        battery_temperature = ((RxData[1] << 8) | (RxData[2]));
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <parsing_can_data+0xe4>)
 8001382:	785b      	ldrb	r3, [r3, #1]
 8001384:	021b      	lsls	r3, r3, #8
 8001386:	4a11      	ldr	r2, [pc, #68]	; (80013cc <parsing_can_data+0xe4>)
 8001388:	7892      	ldrb	r2, [r2, #2]
 800138a:	4313      	orrs	r3, r2
 800138c:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <parsing_can_data+0x100>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	e014      	b.n	80013bc <parsing_can_data+0xd4>
    else if (RxHeader.StdId == 0x210)
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <parsing_can_data+0xe0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 800139a:	d10f      	bne.n	80013bc <parsing_can_data+0xd4>
        battery_id1 = ((RxData[0] << 8) | (RxData[1]));
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <parsing_can_data+0xe4>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <parsing_can_data+0xe4>)
 80013a4:	7852      	ldrb	r2, [r2, #1]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	4a10      	ldr	r2, [pc, #64]	; (80013ec <parsing_can_data+0x104>)
 80013aa:	6013      	str	r3, [r2, #0]
    	battery_id2 = ((RxData[2] << 8) | (RxData[3]));
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <parsing_can_data+0xe4>)
 80013ae:	789b      	ldrb	r3, [r3, #2]
 80013b0:	021b      	lsls	r3, r3, #8
 80013b2:	4a06      	ldr	r2, [pc, #24]	; (80013cc <parsing_can_data+0xe4>)
 80013b4:	78d2      	ldrb	r2, [r2, #3]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	4a0d      	ldr	r2, [pc, #52]	; (80013f0 <parsing_can_data+0x108>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	20000150 	.word	0x20000150
 80013cc:	2000016c 	.word	0x2000016c
 80013d0:	20000180 	.word	0x20000180
 80013d4:	20000174 	.word	0x20000174
 80013d8:	20000178 	.word	0x20000178
 80013dc:	2000018c 	.word	0x2000018c
 80013e0:	200001b0 	.word	0x200001b0
 80013e4:	20000198 	.word	0x20000198
 80013e8:	2000017c 	.word	0x2000017c
 80013ec:	20000184 	.word	0x20000184
 80013f0:	20000188 	.word	0x20000188
 80013f4:	00000000 	.word	0x00000000

080013f8 <dac_compare>:

int update_dac_ticks;
int update_dac = 0;

void dac_compare() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    if(millis() - update_dac_ticks >= 100) {
 80013fc:	f7ff ff42 	bl	8001284 <millis>
 8001400:	4603      	mov	r3, r0
 8001402:	4a49      	ldr	r2, [pc, #292]	; (8001528 <dac_compare+0x130>)
 8001404:	6812      	ldr	r2, [r2, #0]
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	2b63      	cmp	r3, #99	; 0x63
 800140a:	f240 8082 	bls.w	8001512 <dac_compare+0x11a>
        update_dac_ticks = millis();
 800140e:	f7ff ff39 	bl	8001284 <millis>
 8001412:	4603      	mov	r3, r0
 8001414:	461a      	mov	r2, r3
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <dac_compare+0x130>)
 8001418:	601a      	str	r2, [r3, #0]
        if(update_dac < dac_charge_value) {
 800141a:	4b44      	ldr	r3, [pc, #272]	; (800152c <dac_compare+0x134>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	ee07 3a90 	vmov	s15, r3
 8001422:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001426:	4b42      	ldr	r3, [pc, #264]	; (8001530 <dac_compare+0x138>)
 8001428:	edd3 7a00 	vldr	s15, [r3]
 800142c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001434:	d52d      	bpl.n	8001492 <dac_compare+0x9a>
            update_dac += 1;
 8001436:	4b3d      	ldr	r3, [pc, #244]	; (800152c <dac_compare+0x134>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3301      	adds	r3, #1
 800143c:	4a3b      	ldr	r2, [pc, #236]	; (800152c <dac_compare+0x134>)
 800143e:	6013      	str	r3, [r2, #0]
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ((update_dac * 0.01) * 4096.0) / 3.3);
 8001440:	4b3a      	ldr	r3, [pc, #232]	; (800152c <dac_compare+0x134>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f885 	bl	8000554 <__aeabi_i2d>
 800144a:	a333      	add	r3, pc, #204	; (adr r3, 8001518 <dac_compare+0x120>)
 800144c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001450:	f7ff f8ea 	bl	8000628 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <dac_compare+0x13c>)
 8001462:	f7ff f8e1 	bl	8000628 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4610      	mov	r0, r2
 800146c:	4619      	mov	r1, r3
 800146e:	a32c      	add	r3, pc, #176	; (adr r3, 8001520 <dac_compare+0x128>)
 8001470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001474:	f7ff fa02 	bl	800087c <__aeabi_ddiv>
 8001478:	4602      	mov	r2, r0
 800147a:	460b      	mov	r3, r1
 800147c:	4610      	mov	r0, r2
 800147e:	4619      	mov	r1, r3
 8001480:	f7ff fae4 	bl	8000a4c <__aeabi_d2uiz>
 8001484:	4603      	mov	r3, r0
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	482b      	ldr	r0, [pc, #172]	; (8001538 <dac_compare+0x140>)
 800148c:	f002 f83f 	bl	800350e <HAL_DAC_SetValue>
        } else if (update_dac >= dac_charge_value) {
            update_dac = dac_charge_value;
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ((dac_charge_value * 0.01) * 4096.0) / 3.3);
        }
    }
}
 8001490:	e03f      	b.n	8001512 <dac_compare+0x11a>
        } else if (update_dac >= dac_charge_value) {
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <dac_compare+0x134>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	ee07 3a90 	vmov	s15, r3
 800149a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149e:	4b24      	ldr	r3, [pc, #144]	; (8001530 <dac_compare+0x138>)
 80014a0:	edd3 7a00 	vldr	s15, [r3]
 80014a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	da00      	bge.n	80014b0 <dac_compare+0xb8>
}
 80014ae:	e030      	b.n	8001512 <dac_compare+0x11a>
            update_dac = dac_charge_value;
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <dac_compare+0x138>)
 80014b2:	edd3 7a00 	vldr	s15, [r3]
 80014b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ba:	ee17 2a90 	vmov	r2, s15
 80014be:	4b1b      	ldr	r3, [pc, #108]	; (800152c <dac_compare+0x134>)
 80014c0:	601a      	str	r2, [r3, #0]
            HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, ((dac_charge_value * 0.01) * 4096.0) / 3.3);
 80014c2:	4b1b      	ldr	r3, [pc, #108]	; (8001530 <dac_compare+0x138>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff f856 	bl	8000578 <__aeabi_f2d>
 80014cc:	a312      	add	r3, pc, #72	; (adr r3, 8001518 <dac_compare+0x120>)
 80014ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d2:	f7ff f8a9 	bl	8000628 <__aeabi_dmul>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4610      	mov	r0, r2
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b14      	ldr	r3, [pc, #80]	; (8001534 <dac_compare+0x13c>)
 80014e4:	f7ff f8a0 	bl	8000628 <__aeabi_dmul>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4610      	mov	r0, r2
 80014ee:	4619      	mov	r1, r3
 80014f0:	a30b      	add	r3, pc, #44	; (adr r3, 8001520 <dac_compare+0x128>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f9c1 	bl	800087c <__aeabi_ddiv>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff faa3 	bl	8000a4c <__aeabi_d2uiz>
 8001506:	4603      	mov	r3, r0
 8001508:	2200      	movs	r2, #0
 800150a:	2100      	movs	r1, #0
 800150c:	480a      	ldr	r0, [pc, #40]	; (8001538 <dac_compare+0x140>)
 800150e:	f001 fffe 	bl	800350e <HAL_DAC_SetValue>
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f847ae1 	.word	0x3f847ae1
 8001520:	66666666 	.word	0x66666666
 8001524:	400a6666 	.word	0x400a6666
 8001528:	200001f4 	.word	0x200001f4
 800152c:	200001f8 	.word	0x200001f8
 8001530:	20000000 	.word	0x20000000
 8001534:	40b00000 	.word	0x40b00000
 8001538:	2000013c 	.word	0x2000013c

0800153c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001542:	f000 fefb 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001546:	f000 f975 	bl	8001834 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154a:	f7ff fd45 	bl	8000fd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800154e:	f000 fde9 	bl	8002124 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001552:	f7ff fc1d 	bl	8000d90 <MX_CAN1_Init>
  MX_DAC_Init();
 8001556:	f7ff fcd1 	bl	8000efc <MX_DAC_Init>
  MX_TIM7_Init();
 800155a:	f000 fd87 	bl	800206c <MX_TIM7_Init>
  MX_USART3_UART_Init();
 800155e:	f000 fe0b 	bl	8002178 <MX_USART3_UART_Init>

   	// // init
   	// printf("%s\n", "can start");

   	// close door
    HAL_GPIO_WritePin(DOOR_LOCK_GPIO_Port, DOOR_LOCK_Pin, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001568:	489d      	ldr	r0, [pc, #628]	; (80017e0 <main+0x2a4>)
 800156a:	f002 fa83 	bl	8003a74 <HAL_GPIO_WritePin>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800156e:	2100      	movs	r1, #0
 8001570:	489c      	ldr	r0, [pc, #624]	; (80017e4 <main+0x2a8>)
 8001572:	f001 ff7a 	bl	800346a <HAL_DAC_Start>

    HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800157c:	4898      	ldr	r0, [pc, #608]	; (80017e0 <main+0x2a4>)
 800157e:	f002 fa79 	bl	8003a74 <HAL_GPIO_WritePin>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 8001582:	2300      	movs	r3, #0
 8001584:	2200      	movs	r2, #0
 8001586:	2100      	movs	r1, #0
 8001588:	4896      	ldr	r0, [pc, #600]	; (80017e4 <main+0x2a8>)
 800158a:	f001 ffc0 	bl	800350e <HAL_DAC_SetValue>

    HAL_UART_Receive (&huart3, UART3_rxBuffer, 12, 5000);
 800158e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001592:	220c      	movs	r2, #12
 8001594:	4994      	ldr	r1, [pc, #592]	; (80017e8 <main+0x2ac>)
 8001596:	4895      	ldr	r0, [pc, #596]	; (80017ec <main+0x2b0>)
 8001598:	f003 fd29 	bl	8004fee <HAL_UART_Receive>
    HAL_UART_Transmit(&huart3, UART3_rxBuffer, 12, 100);
 800159c:	2364      	movs	r3, #100	; 0x64
 800159e:	220c      	movs	r2, #12
 80015a0:	4991      	ldr	r1, [pc, #580]	; (80017e8 <main+0x2ac>)
 80015a2:	4892      	ldr	r0, [pc, #584]	; (80017ec <main+0x2b0>)
 80015a4:	f003 fc91 	bl	8004eca <HAL_UART_Transmit>

    eMBInit(MB_RTU, 11, 3, huart2.Init.BaudRate, MB_PAR_NONE);
 80015a8:	4b91      	ldr	r3, [pc, #580]	; (80017f0 <main+0x2b4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	9200      	str	r2, [sp, #0]
 80015b0:	2203      	movs	r2, #3
 80015b2:	210b      	movs	r1, #11
 80015b4:	2000      	movs	r0, #0
 80015b6:	f004 fcf1 	bl	8005f9c <eMBInit>
    eMBEnable();
 80015ba:	f004 fd6b 	bl	8006094 <eMBEnable>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {

        if (millis() - ticks2 >= 50) {
 80015be:	f7ff fe61 	bl	8001284 <millis>
 80015c2:	4602      	mov	r2, r0
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b31      	cmp	r3, #49	; 0x31
 80015ca:	d97d      	bls.n	80016c8 <main+0x18c>
            ticks2 = millis();
 80015cc:	f7ff fe5a 	bl	8001284 <millis>
 80015d0:	6038      	str	r0, [r7, #0]
           	// printf("%d %d %d %d %d %d\n", battery_id, battery_current,  battery_voltage, battery_capacity, charge_status, cell_voltage);

            if (HAL_GPIO_ReadPin(DOOR_SENS_GPIO_Port, DOOR_SENS_Pin) == 1 && battery_percent < 100) {
 80015d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015d6:	4887      	ldr	r0, [pc, #540]	; (80017f4 <main+0x2b8>)
 80015d8:	f002 fa34 	bl	8003a44 <HAL_GPIO_ReadPin>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d110      	bne.n	8001604 <main+0xc8>
 80015e2:	4b85      	ldr	r3, [pc, #532]	; (80017f8 <main+0x2bc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b63      	cmp	r3, #99	; 0x63
 80015e8:	dc0c      	bgt.n	8001604 <main+0xc8>
            	HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, 1);
 80015ea:	2201      	movs	r2, #1
 80015ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015f0:	487b      	ldr	r0, [pc, #492]	; (80017e0 <main+0x2a4>)
 80015f2:	f002 fa3f 	bl	8003a74 <HAL_GPIO_WritePin>
                if (charging_flag) dac_compare();
 80015f6:	4b81      	ldr	r3, [pc, #516]	; (80017fc <main+0x2c0>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d018      	beq.n	8001630 <main+0xf4>
 80015fe:	f7ff fefb 	bl	80013f8 <dac_compare>
 8001602:	e015      	b.n	8001630 <main+0xf4>
            } else {
            	HAL_GPIO_WritePin(EN_CHARGE_GPIO_Port, EN_CHARGE_Pin, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800160a:	4875      	ldr	r0, [pc, #468]	; (80017e0 <main+0x2a4>)
 800160c:	f002 fa32 	bl	8003a74 <HAL_GPIO_WritePin>
            	if (!charging_flag) {
 8001610:	4b7a      	ldr	r3, [pc, #488]	; (80017fc <main+0x2c0>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	f083 0301 	eor.w	r3, r3, #1
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d008      	beq.n	8001630 <main+0xf4>
                    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
 800161e:	2300      	movs	r3, #0
 8001620:	2200      	movs	r2, #0
 8001622:	2100      	movs	r1, #0
 8001624:	486f      	ldr	r0, [pc, #444]	; (80017e4 <main+0x2a8>)
 8001626:	f001 ff72 	bl	800350e <HAL_DAC_SetValue>
                    update_dac = 0;
 800162a:	4b75      	ldr	r3, [pc, #468]	; (8001800 <main+0x2c4>)
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
                }
            }

            if (battery_percent >= 100 && battery_timeout < 10) {
 8001630:	4b71      	ldr	r3, [pc, #452]	; (80017f8 <main+0x2bc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b63      	cmp	r3, #99	; 0x63
 8001636:	dd11      	ble.n	800165c <main+0x120>
 8001638:	4b72      	ldr	r3, [pc, #456]	; (8001804 <main+0x2c8>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b09      	cmp	r3, #9
 800163e:	d80d      	bhi.n	800165c <main+0x120>
                charging_flag = false;
 8001640:	4b6e      	ldr	r3, [pc, #440]	; (80017fc <main+0x2c0>)
 8001642:	2200      	movs	r2, #0
 8001644:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2110      	movs	r1, #16
 800164a:	486a      	ldr	r0, [pc, #424]	; (80017f4 <main+0x2b8>)
 800164c:	f002 fa12 	bl	8003a74 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_FULL_GPIO_Port, LED_FULL_Pin, 1);
 8001650:	2201      	movs	r2, #1
 8001652:	2120      	movs	r1, #32
 8001654:	4867      	ldr	r0, [pc, #412]	; (80017f4 <main+0x2b8>)
 8001656:	f002 fa0d 	bl	8003a74 <HAL_GPIO_WritePin>
 800165a:	e035      	b.n	80016c8 <main+0x18c>
            } else if (battery_percent > 98 && battery_timeout < 10) {
 800165c:	4b66      	ldr	r3, [pc, #408]	; (80017f8 <main+0x2bc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b62      	cmp	r3, #98	; 0x62
 8001662:	dd0e      	ble.n	8001682 <main+0x146>
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <main+0x2c8>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b09      	cmp	r3, #9
 800166a:	d80a      	bhi.n	8001682 <main+0x146>
            	HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2110      	movs	r1, #16
 8001670:	4860      	ldr	r0, [pc, #384]	; (80017f4 <main+0x2b8>)
 8001672:	f002 f9ff 	bl	8003a74 <HAL_GPIO_WritePin>
            	HAL_GPIO_WritePin(LED_FULL_GPIO_Port, LED_FULL_Pin, 1);
 8001676:	2201      	movs	r2, #1
 8001678:	2120      	movs	r1, #32
 800167a:	485e      	ldr	r0, [pc, #376]	; (80017f4 <main+0x2b8>)
 800167c:	f002 f9fa 	bl	8003a74 <HAL_GPIO_WritePin>
 8001680:	e022      	b.n	80016c8 <main+0x18c>
            } else if (battery_percent <= 98 && battery_timeout < 10) {
 8001682:	4b5d      	ldr	r3, [pc, #372]	; (80017f8 <main+0x2bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2b62      	cmp	r3, #98	; 0x62
 8001688:	dc11      	bgt.n	80016ae <main+0x172>
 800168a:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <main+0x2c8>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b09      	cmp	r3, #9
 8001690:	d80d      	bhi.n	80016ae <main+0x172>
                charging_flag = true;
 8001692:	4b5a      	ldr	r3, [pc, #360]	; (80017fc <main+0x2c0>)
 8001694:	2201      	movs	r2, #1
 8001696:	701a      	strb	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, 1);
 8001698:	2201      	movs	r2, #1
 800169a:	2110      	movs	r1, #16
 800169c:	4855      	ldr	r0, [pc, #340]	; (80017f4 <main+0x2b8>)
 800169e:	f002 f9e9 	bl	8003a74 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_FULL_GPIO_Port, LED_FULL_Pin, 0);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2120      	movs	r1, #32
 80016a6:	4853      	ldr	r0, [pc, #332]	; (80017f4 <main+0x2b8>)
 80016a8:	f002 f9e4 	bl	8003a74 <HAL_GPIO_WritePin>
 80016ac:	e00c      	b.n	80016c8 <main+0x18c>
            } else {
            	update_dac = 0;
 80016ae:	4b54      	ldr	r3, [pc, #336]	; (8001800 <main+0x2c4>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
                HAL_GPIO_WritePin(LED_CHARGE_GPIO_Port, LED_CHARGE_Pin, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2110      	movs	r1, #16
 80016b8:	484e      	ldr	r0, [pc, #312]	; (80017f4 <main+0x2b8>)
 80016ba:	f002 f9db 	bl	8003a74 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LED_FULL_GPIO_Port, LED_FULL_Pin, 0);
 80016be:	2200      	movs	r2, #0
 80016c0:	2120      	movs	r1, #32
 80016c2:	484c      	ldr	r0, [pc, #304]	; (80017f4 <main+0x2b8>)
 80016c4:	f002 f9d6 	bl	8003a74 <HAL_GPIO_WritePin>
            }

        }

        if (acquired) {
 80016c8:	4b4f      	ldr	r3, [pc, #316]	; (8001808 <main+0x2cc>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d03f      	beq.n	8001750 <main+0x214>
            acquired = false;
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <main+0x2cc>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
            battery_timeout = 0;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <main+0x2c8>)
 80016d8:	2200      	movs	r2, #0
 80016da:	701a      	strb	r2, [r3, #0]
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80016dc:	2120      	movs	r1, #32
 80016de:	4840      	ldr	r0, [pc, #256]	; (80017e0 <main+0x2a4>)
 80016e0:	f002 f9e1 	bl	8003aa6 <HAL_GPIO_TogglePin>
            parsing_can_data();
 80016e4:	f7ff fe00 	bl	80012e8 <parsing_can_data>
            battery_voltage_cells_total = (battcells[0] + battcells[1] + battcells[2] + battcells[3] + battcells[4] + battcells[5] + battcells[6] + battcells[7] + battcells[8] + battcells[9] + battcells[10] + battcells[11]);
 80016e8:	4b48      	ldr	r3, [pc, #288]	; (800180c <main+0x2d0>)
 80016ea:	881b      	ldrh	r3, [r3, #0]
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <main+0x2d0>)
 80016f0:	885b      	ldrh	r3, [r3, #2]
 80016f2:	4413      	add	r3, r2
 80016f4:	4a45      	ldr	r2, [pc, #276]	; (800180c <main+0x2d0>)
 80016f6:	8892      	ldrh	r2, [r2, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a44      	ldr	r2, [pc, #272]	; (800180c <main+0x2d0>)
 80016fc:	88d2      	ldrh	r2, [r2, #6]
 80016fe:	4413      	add	r3, r2
 8001700:	4a42      	ldr	r2, [pc, #264]	; (800180c <main+0x2d0>)
 8001702:	8912      	ldrh	r2, [r2, #8]
 8001704:	4413      	add	r3, r2
 8001706:	4a41      	ldr	r2, [pc, #260]	; (800180c <main+0x2d0>)
 8001708:	8952      	ldrh	r2, [r2, #10]
 800170a:	4413      	add	r3, r2
 800170c:	4a3f      	ldr	r2, [pc, #252]	; (800180c <main+0x2d0>)
 800170e:	8992      	ldrh	r2, [r2, #12]
 8001710:	4413      	add	r3, r2
 8001712:	4a3e      	ldr	r2, [pc, #248]	; (800180c <main+0x2d0>)
 8001714:	89d2      	ldrh	r2, [r2, #14]
 8001716:	4413      	add	r3, r2
 8001718:	4a3c      	ldr	r2, [pc, #240]	; (800180c <main+0x2d0>)
 800171a:	8a12      	ldrh	r2, [r2, #16]
 800171c:	4413      	add	r3, r2
 800171e:	4a3b      	ldr	r2, [pc, #236]	; (800180c <main+0x2d0>)
 8001720:	8a52      	ldrh	r2, [r2, #18]
 8001722:	4413      	add	r3, r2
 8001724:	4a39      	ldr	r2, [pc, #228]	; (800180c <main+0x2d0>)
 8001726:	8a92      	ldrh	r2, [r2, #20]
 8001728:	4413      	add	r3, r2
 800172a:	4a38      	ldr	r2, [pc, #224]	; (800180c <main+0x2d0>)
 800172c:	8ad2      	ldrh	r2, [r2, #22]
 800172e:	4413      	add	r3, r2
 8001730:	4a37      	ldr	r2, [pc, #220]	; (8001810 <main+0x2d4>)
 8001732:	6013      	str	r3, [r2, #0]
            battery_percent = map(battery_voltage_cells_total, 35600, 49600, 0, 100);
 8001734:	4b36      	ldr	r3, [pc, #216]	; (8001810 <main+0x2d4>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	2364      	movs	r3, #100	; 0x64
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	2300      	movs	r3, #0
 800173e:	f24c 12c0 	movw	r2, #49600	; 0xc1c0
 8001742:	f648 3110 	movw	r1, #35600	; 0x8b10
 8001746:	f7ff fda4 	bl	8001292 <map>
 800174a:	4603      	mov	r3, r0
 800174c:	4a2a      	ldr	r2, [pc, #168]	; (80017f8 <main+0x2bc>)
 800174e:	6013      	str	r3, [r2, #0]
        }

        if (millis() - ticks >= (can_tx_error_flag ? 100 : 500)) {
 8001750:	f7ff fd98 	bl	8001284 <millis>
 8001754:	4602      	mov	r2, r0
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	4a2e      	ldr	r2, [pc, #184]	; (8001814 <main+0x2d8>)
 800175c:	7812      	ldrb	r2, [r2, #0]
 800175e:	2a00      	cmp	r2, #0
 8001760:	d001      	beq.n	8001766 <main+0x22a>
 8001762:	2264      	movs	r2, #100	; 0x64
 8001764:	e001      	b.n	800176a <main+0x22e>
 8001766:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800176a:	429a      	cmp	r2, r3
 800176c:	d834      	bhi.n	80017d8 <main+0x29c>
            ticks = millis();
 800176e:	f7ff fd89 	bl	8001284 <millis>
 8001772:	6078      	str	r0, [r7, #4]
            enableBattery();
 8001774:	f7ff fcec 	bl	8001150 <enableBattery>
            battery_timeout++;
 8001778:	4b22      	ldr	r3, [pc, #136]	; (8001804 <main+0x2c8>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <main+0x2c8>)
 8001782:	701a      	strb	r2, [r3, #0]
            if (battery_timeout >= 10) {
 8001784:	4b1f      	ldr	r3, [pc, #124]	; (8001804 <main+0x2c8>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b09      	cmp	r3, #9
 800178a:	d925      	bls.n	80017d8 <main+0x29c>
                battery_timeout = 10;
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <main+0x2c8>)
 800178e:	220a      	movs	r2, #10
 8001790:	701a      	strb	r2, [r3, #0]
                battery_id1 = 0;
 8001792:	4b21      	ldr	r3, [pc, #132]	; (8001818 <main+0x2dc>)
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
                battery_id2 = 0;
 8001798:	4b20      	ldr	r3, [pc, #128]	; (800181c <main+0x2e0>)
 800179a:	2200      	movs	r2, #0
 800179c:	601a      	str	r2, [r3, #0]
                battery_current = 0;
 800179e:	4b20      	ldr	r3, [pc, #128]	; (8001820 <main+0x2e4>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
                battery_voltage = 0;
 80017a4:	4b1f      	ldr	r3, [pc, #124]	; (8001824 <main+0x2e8>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]
                battery_capacity = 0;
 80017aa:	4b1f      	ldr	r3, [pc, #124]	; (8001828 <main+0x2ec>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
                charge_status = 0;
 80017b0:	4b1e      	ldr	r3, [pc, #120]	; (800182c <main+0x2f0>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
                battery_temperature = 0;
 80017b6:	4b1e      	ldr	r3, [pc, #120]	; (8001830 <main+0x2f4>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
                battery_voltage_cells_total = 0;
 80017bc:	4b14      	ldr	r3, [pc, #80]	; (8001810 <main+0x2d4>)
 80017be:	2200      	movs	r2, #0
 80017c0:	601a      	str	r2, [r3, #0]
                battery_percent = 0;
 80017c2:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <main+0x2bc>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
                charging_flag = false;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <main+0x2c0>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
                memset(battcells, 0, sizeof(battcells));
 80017ce:	2218      	movs	r2, #24
 80017d0:	2100      	movs	r1, #0
 80017d2:	480e      	ldr	r0, [pc, #56]	; (800180c <main+0x2d0>)
 80017d4:	f005 fd10 	bl	80071f8 <memset>
            }
        }

        eMBPoll();
 80017d8:	f004 fc78 	bl	80060cc <eMBPoll>
        if (millis() - ticks2 >= 50) {
 80017dc:	e6ef      	b.n	80015be <main+0x82>
 80017de:	bf00      	nop
 80017e0:	40020000 	.word	0x40020000
 80017e4:	2000013c 	.word	0x2000013c
 80017e8:	200001e8 	.word	0x200001e8
 80017ec:	2000028c 	.word	0x2000028c
 80017f0:	20000248 	.word	0x20000248
 80017f4:	40020400 	.word	0x40020400
 80017f8:	20000190 	.word	0x20000190
 80017fc:	200001b1 	.word	0x200001b1
 8001800:	200001f8 	.word	0x200001f8
 8001804:	200001b2 	.word	0x200001b2
 8001808:	200001b4 	.word	0x200001b4
 800180c:	20000198 	.word	0x20000198
 8001810:	20000194 	.word	0x20000194
 8001814:	200001b3 	.word	0x200001b3
 8001818:	20000184 	.word	0x20000184
 800181c:	20000188 	.word	0x20000188
 8001820:	20000174 	.word	0x20000174
 8001824:	20000178 	.word	0x20000178
 8001828:	20000180 	.word	0x20000180
 800182c:	200001b0 	.word	0x200001b0
 8001830:	2000017c 	.word	0x2000017c

08001834 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b094      	sub	sp, #80	; 0x50
 8001838:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800183a:	f107 031c 	add.w	r3, r7, #28
 800183e:	2234      	movs	r2, #52	; 0x34
 8001840:	2100      	movs	r1, #0
 8001842:	4618      	mov	r0, r3
 8001844:	f005 fcd8 	bl	80071f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001848:	f107 0308 	add.w	r3, r7, #8
 800184c:	2200      	movs	r2, #0
 800184e:	601a      	str	r2, [r3, #0]
 8001850:	605a      	str	r2, [r3, #4]
 8001852:	609a      	str	r2, [r3, #8]
 8001854:	60da      	str	r2, [r3, #12]
 8001856:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	4b2c      	ldr	r3, [pc, #176]	; (8001910 <SystemClock_Config+0xdc>)
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	4a2b      	ldr	r2, [pc, #172]	; (8001910 <SystemClock_Config+0xdc>)
 8001862:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001866:	6413      	str	r3, [r2, #64]	; 0x40
 8001868:	4b29      	ldr	r3, [pc, #164]	; (8001910 <SystemClock_Config+0xdc>)
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	607b      	str	r3, [r7, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001874:	2300      	movs	r3, #0
 8001876:	603b      	str	r3, [r7, #0]
 8001878:	4b26      	ldr	r3, [pc, #152]	; (8001914 <SystemClock_Config+0xe0>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a25      	ldr	r2, [pc, #148]	; (8001914 <SystemClock_Config+0xe0>)
 800187e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <SystemClock_Config+0xe0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	603b      	str	r3, [r7, #0]
 800188e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001890:	2302      	movs	r3, #2
 8001892:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001894:	2301      	movs	r3, #1
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001898:	2310      	movs	r3, #16
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189c:	2302      	movs	r3, #2
 800189e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018a0:	2300      	movs	r3, #0
 80018a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018a4:	2308      	movs	r3, #8
 80018a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80018a8:	23b4      	movs	r3, #180	; 0xb4
 80018aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80018b0:	2302      	movs	r3, #2
 80018b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b8:	f107 031c 	add.w	r3, r7, #28
 80018bc:	4618      	mov	r0, r3
 80018be:	f002 fcbf 	bl	8004240 <HAL_RCC_OscConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018c8:	f000 fa0e 	bl	8001ce8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018cc:	f002 f91e 	bl	8003b0c <HAL_PWREx_EnableOverDrive>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80018d6:	f000 fa07 	bl	8001ce8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018da:	230f      	movs	r3, #15
 80018dc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018de:	2302      	movs	r3, #2
 80018e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018e2:	2300      	movs	r3, #0
 80018e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80018e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80018ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f0:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2105      	movs	r1, #5
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 f957 	bl	8003bac <HAL_RCC_ClockConfig>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001904:	f000 f9f0 	bl	8001ce8 <Error_Handler>
  }
}
 8001908:	bf00      	nop
 800190a:	3750      	adds	r7, #80	; 0x50
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40023800 	.word	0x40023800
 8001914:	40007000 	.word	0x40007000

08001918 <fetchHoldingRegsData>:
 *
 *@param iRegIndex
 *@return uint8_t
 */
uint8_t fetchHoldingRegsData(int iRegIndex)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    uint8_t numUs = 1;
 8001920:	2301      	movs	r3, #1
 8001922:	73fb      	strb	r3, [r7, #15]
    switch (iRegIndex)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b16      	cmp	r3, #22
 8001928:	f200 80b8 	bhi.w	8001a9c <fetchHoldingRegsData+0x184>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <fetchHoldingRegsData+0x1c>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001991 	.word	0x08001991
 8001938:	0800199d 	.word	0x0800199d
 800193c:	080019a9 	.word	0x080019a9
 8001940:	080019b5 	.word	0x080019b5
 8001944:	080019c1 	.word	0x080019c1
 8001948:	080019cd 	.word	0x080019cd
 800194c:	080019d9 	.word	0x080019d9
 8001950:	080019e5 	.word	0x080019e5
 8001954:	080019f1 	.word	0x080019f1
 8001958:	080019fb 	.word	0x080019fb
 800195c:	08001a05 	.word	0x08001a05
 8001960:	08001a0f 	.word	0x08001a0f
 8001964:	08001a19 	.word	0x08001a19
 8001968:	08001a23 	.word	0x08001a23
 800196c:	08001a2d 	.word	0x08001a2d
 8001970:	08001a37 	.word	0x08001a37
 8001974:	08001a41 	.word	0x08001a41
 8001978:	08001a4b 	.word	0x08001a4b
 800197c:	08001a55 	.word	0x08001a55
 8001980:	08001a5f 	.word	0x08001a5f
 8001984:	08001a69 	.word	0x08001a69
 8001988:	08001aa3 	.word	0x08001aa3
 800198c:	08001a87 	.word	0x08001a87
    {
        case HREG_BATTERY_ID1:
            usRegHoldingBuf[HREG_BATTERY_ID1] = battery_id1;
 8001990:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <fetchHoldingRegsData+0x198>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29a      	uxth	r2, r3
 8001996:	4b47      	ldr	r3, [pc, #284]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001998:	801a      	strh	r2, [r3, #0]
            break;
 800199a:	e083      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_ID2:
            usRegHoldingBuf[HREG_BATTERY_ID2] = battery_id2;
 800199c:	4b46      	ldr	r3, [pc, #280]	; (8001ab8 <fetchHoldingRegsData+0x1a0>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	b29a      	uxth	r2, r3
 80019a2:	4b44      	ldr	r3, [pc, #272]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019a4:	805a      	strh	r2, [r3, #2]
            break;
 80019a6:	e07d      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_CURRENT:
            usRegHoldingBuf[HREG_BATTERY_CURRENT] = battery_current;
 80019a8:	4b44      	ldr	r3, [pc, #272]	; (8001abc <fetchHoldingRegsData+0x1a4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b41      	ldr	r3, [pc, #260]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019b0:	809a      	strh	r2, [r3, #4]
            break;
 80019b2:	e077      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_VOLTAGE:
            usRegHoldingBuf[HREG_BATTERY_VOLTAGE] = battery_voltage_cells_total;
 80019b4:	4b42      	ldr	r3, [pc, #264]	; (8001ac0 <fetchHoldingRegsData+0x1a8>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	4b3e      	ldr	r3, [pc, #248]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019bc:	80da      	strh	r2, [r3, #6]
            break;
 80019be:	e071      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_CAPACITY:
            usRegHoldingBuf[HREG_BATTERY_CAPACITY] = battery_capacity;
 80019c0:	4b40      	ldr	r3, [pc, #256]	; (8001ac4 <fetchHoldingRegsData+0x1ac>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29a      	uxth	r2, r3
 80019c6:	4b3b      	ldr	r3, [pc, #236]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019c8:	811a      	strh	r2, [r3, #8]
            break;
 80019ca:	e06b      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_PERCENT:
             usRegHoldingBuf[HREG_BATTERY_PERCENT] = battery_percent;
 80019cc:	4b3e      	ldr	r3, [pc, #248]	; (8001ac8 <fetchHoldingRegsData+0x1b0>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b38      	ldr	r3, [pc, #224]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019d4:	815a      	strh	r2, [r3, #10]
             break;
 80019d6:	e065      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CHARGE_STATUS:
            usRegHoldingBuf[HREG_CHARGE_STATUS] = charge_status;
 80019d8:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <fetchHoldingRegsData+0x1b4>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b35      	ldr	r3, [pc, #212]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019e0:	819a      	strh	r2, [r3, #12]
            break;
 80019e2:	e05f      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_BATTERY_TEMPERATURE:
        	usRegHoldingBuf[HREG_BATTERY_TEMPERATURE] = battery_temperature;
 80019e4:	4b3a      	ldr	r3, [pc, #232]	; (8001ad0 <fetchHoldingRegsData+0x1b8>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b32      	ldr	r3, [pc, #200]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019ec:	81da      	strh	r2, [r3, #14]
        	break;
 80019ee:	e059      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_1:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_1] = battcells[0];
 80019f0:	4b38      	ldr	r3, [pc, #224]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 80019f2:	881a      	ldrh	r2, [r3, #0]
 80019f4:	4b2f      	ldr	r3, [pc, #188]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 80019f6:	821a      	strh	r2, [r3, #16]
            break;
 80019f8:	e054      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_2:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_2] = battcells[1];
 80019fa:	4b36      	ldr	r3, [pc, #216]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 80019fc:	885a      	ldrh	r2, [r3, #2]
 80019fe:	4b2d      	ldr	r3, [pc, #180]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a00:	825a      	strh	r2, [r3, #18]
            break;
 8001a02:	e04f      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_3:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_3] = battcells[2];
 8001a04:	4b33      	ldr	r3, [pc, #204]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a06:	889a      	ldrh	r2, [r3, #4]
 8001a08:	4b2a      	ldr	r3, [pc, #168]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a0a:	829a      	strh	r2, [r3, #20]
            break;
 8001a0c:	e04a      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_4:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_4] = battcells[3];
 8001a0e:	4b31      	ldr	r3, [pc, #196]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a10:	88da      	ldrh	r2, [r3, #6]
 8001a12:	4b28      	ldr	r3, [pc, #160]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a14:	82da      	strh	r2, [r3, #22]
            break;
 8001a16:	e045      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_5:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_5] = battcells[4];
 8001a18:	4b2e      	ldr	r3, [pc, #184]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a1a:	891a      	ldrh	r2, [r3, #8]
 8001a1c:	4b25      	ldr	r3, [pc, #148]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a1e:	831a      	strh	r2, [r3, #24]
            break;
 8001a20:	e040      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_6:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_6] = battcells[5];
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a24:	895a      	ldrh	r2, [r3, #10]
 8001a26:	4b23      	ldr	r3, [pc, #140]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a28:	835a      	strh	r2, [r3, #26]
            break;
 8001a2a:	e03b      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_7:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_7] = battcells[6];
 8001a2c:	4b29      	ldr	r3, [pc, #164]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a2e:	899a      	ldrh	r2, [r3, #12]
 8001a30:	4b20      	ldr	r3, [pc, #128]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a32:	839a      	strh	r2, [r3, #28]
            break;
 8001a34:	e036      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_8:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_8] = battcells[7];
 8001a36:	4b27      	ldr	r3, [pc, #156]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a38:	89da      	ldrh	r2, [r3, #14]
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a3c:	83da      	strh	r2, [r3, #30]
            break;
 8001a3e:	e031      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_9:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_9] = battcells[8];
 8001a40:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a42:	8a1a      	ldrh	r2, [r3, #16]
 8001a44:	4b1b      	ldr	r3, [pc, #108]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a46:	841a      	strh	r2, [r3, #32]
            break;
 8001a48:	e02c      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_10:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_10] = battcells[9];
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a4c:	8a5a      	ldrh	r2, [r3, #18]
 8001a4e:	4b19      	ldr	r3, [pc, #100]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a50:	845a      	strh	r2, [r3, #34]	; 0x22
            break;
 8001a52:	e027      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_11:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_11] = battcells[10];
 8001a54:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a56:	8a9a      	ldrh	r2, [r3, #20]
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a5a:	849a      	strh	r2, [r3, #36]	; 0x24
            break;
 8001a5c:	e022      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_CELL_VOLTAGE_12:
            usRegHoldingBuf[HREG_CELL_VOLTAGE_12] = battcells[11];
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <fetchHoldingRegsData+0x1bc>)
 8001a60:	8ada      	ldrh	r2, [r3, #22]
 8001a62:	4b14      	ldr	r3, [pc, #80]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a64:	84da      	strh	r2, [r3, #38]	; 0x26
            break;
 8001a66:	e01d      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        case HREG_DOOR_STATUS:
            usRegHoldingBuf[HREG_DOOR_STATUS] = !HAL_GPIO_ReadPin(DOOR_SENS_GPIO_Port, DOOR_SENS_Pin);
 8001a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a6c:	481a      	ldr	r0, [pc, #104]	; (8001ad8 <fetchHoldingRegsData+0x1c0>)
 8001a6e:	f001 ffe9 	bl	8003a44 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	bf0c      	ite	eq
 8001a78:	2301      	moveq	r3, #1
 8001a7a:	2300      	movne	r3, #0
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	b29a      	uxth	r2, r3
 8001a80:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a82:	851a      	strh	r2, [r3, #40]	; 0x28
            break;
 8001a84:	e00e      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>
//        	if(HAL_GPIO_ReadPin(DOOR_SENS_GPIO_Port, DOOR_SENS_Pin) == 1)
//        		usRegHoldingBuf[HREG_DOOR_OPEN] = 0;
            break;

        case HREG_DAC_VALUE:
        	usRegHoldingBuf[HREG_DAC_VALUE] = dac_charge_value;
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <fetchHoldingRegsData+0x1c4>)
 8001a88:	edd3 7a00 	vldr	s15, [r3]
 8001a8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a90:	ee17 3a90 	vmov	r3, s15
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b07      	ldr	r3, [pc, #28]	; (8001ab4 <fetchHoldingRegsData+0x19c>)
 8001a98:	859a      	strh	r2, [r3, #44]	; 0x2c
        	break;
 8001a9a:	e003      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>

        default:
            numUs = 0;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	73fb      	strb	r3, [r7, #15]
            break;
 8001aa0:	e000      	b.n	8001aa4 <fetchHoldingRegsData+0x18c>
            break;
 8001aa2:	bf00      	nop
    }

    return numUs;
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000184 	.word	0x20000184
 8001ab4:	200001b8 	.word	0x200001b8
 8001ab8:	20000188 	.word	0x20000188
 8001abc:	20000174 	.word	0x20000174
 8001ac0:	20000194 	.word	0x20000194
 8001ac4:	20000180 	.word	0x20000180
 8001ac8:	20000190 	.word	0x20000190
 8001acc:	200001b0 	.word	0x200001b0
 8001ad0:	2000017c 	.word	0x2000017c
 8001ad4:	20000198 	.word	0x20000198
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	20000000 	.word	0x20000000

08001ae0 <writeHoldingRegs>:
 *
 *@param iRegIndex
 *@param tempReg
 */
void writeHoldingRegs(int iRegIndex, uint16_t tempReg)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	807b      	strh	r3, [r7, #2]
    switch (iRegIndex)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b15      	cmp	r3, #21
 8001af0:	d003      	beq.n	8001afa <writeHoldingRegs+0x1a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b16      	cmp	r3, #22
 8001af6:	d019      	beq.n	8001b2c <writeHoldingRegs+0x4c>
        	dac_charge_value = tempReg;
            break;

        default:
           	// usRegHoldingBuf[iRegIndex] = tempReg;
            break;
 8001af8:	e027      	b.n	8001b4a <writeHoldingRegs+0x6a>
            if (tempReg > 1) break;
 8001afa:	887b      	ldrh	r3, [r7, #2]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d821      	bhi.n	8001b44 <writeHoldingRegs+0x64>
            if (tempReg == 1)
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d120      	bne.n	8001b48 <writeHoldingRegs+0x68>
                usRegHoldingBuf[HREG_DOOR_OPEN] = 1;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <writeHoldingRegs+0x74>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
                HAL_GPIO_WritePin(DOOR_LOCK_GPIO_Port, DOOR_LOCK_Pin, 1);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b12:	4811      	ldr	r0, [pc, #68]	; (8001b58 <writeHoldingRegs+0x78>)
 8001b14:	f001 ffae 	bl	8003a74 <HAL_GPIO_WritePin>
                HAL_Delay(10);
 8001b18:	200a      	movs	r0, #10
 8001b1a:	f000 fc81 	bl	8002420 <HAL_Delay>
                HAL_GPIO_WritePin(DOOR_LOCK_GPIO_Port, DOOR_LOCK_Pin, 0);
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b24:	480c      	ldr	r0, [pc, #48]	; (8001b58 <writeHoldingRegs+0x78>)
 8001b26:	f001 ffa5 	bl	8003a74 <HAL_GPIO_WritePin>
            break;
 8001b2a:	e00d      	b.n	8001b48 <writeHoldingRegs+0x68>
        	usRegHoldingBuf[HREG_DAC_VALUE] = tempReg;
 8001b2c:	4a09      	ldr	r2, [pc, #36]	; (8001b54 <writeHoldingRegs+0x74>)
 8001b2e:	887b      	ldrh	r3, [r7, #2]
 8001b30:	8593      	strh	r3, [r2, #44]	; 0x2c
        	dac_charge_value = tempReg;
 8001b32:	887b      	ldrh	r3, [r7, #2]
 8001b34:	ee07 3a90 	vmov	s15, r3
 8001b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <writeHoldingRegs+0x7c>)
 8001b3e:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001b42:	e002      	b.n	8001b4a <writeHoldingRegs+0x6a>
            if (tempReg > 1) break;
 8001b44:	bf00      	nop
 8001b46:	e000      	b.n	8001b4a <writeHoldingRegs+0x6a>
            break;
 8001b48:	bf00      	nop
    }
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200001b8 	.word	0x200001b8
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	20000000 	.word	0x20000000

08001b60 <eMBRegHoldingCB>:

eMBErrorCode eMBRegHoldingCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs, eMBRegisterMode eMode)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	4608      	mov	r0, r1
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4603      	mov	r3, r0
 8001b70:	817b      	strh	r3, [r7, #10]
 8001b72:	460b      	mov	r3, r1
 8001b74:	813b      	strh	r3, [r7, #8]
 8001b76:	4613      	mov	r3, r2
 8001b78:	71fb      	strb	r3, [r7, #7]
    eMBErrorCode eStatus = MB_ENOERR;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	77fb      	strb	r3, [r7, #31]
    int iRegIndex;

    if (eMode == MB_REG_READ)
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d147      	bne.n	8001c14 <eMBRegHoldingCB+0xb4>
    {
        if ((usAddress >= REG_HOLDING_START) &&
 8001b84:	897b      	ldrh	r3, [r7, #10]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d042      	beq.n	8001c10 <eMBRegHoldingCB+0xb0>
            (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8001b8a:	897a      	ldrh	r2, [r7, #10]
 8001b8c:	893b      	ldrh	r3, [r7, #8]
 8001b8e:	4413      	add	r3, r2
        if ((usAddress >= REG_HOLDING_START) &&
 8001b90:	2b18      	cmp	r3, #24
 8001b92:	dc3d      	bgt.n	8001c10 <eMBRegHoldingCB+0xb0>
        {
            iRegIndex = (int)(usAddress - usRegHoldingStart);
 8001b94:	897b      	ldrh	r3, [r7, #10]
 8001b96:	4a39      	ldr	r2, [pc, #228]	; (8001c7c <eMBRegHoldingCB+0x11c>)
 8001b98:	8812      	ldrh	r2, [r2, #0]
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
            while (usNRegs > 0)
 8001b9e:	e033      	b.n	8001c08 <eMBRegHoldingCB+0xa8>
            {
                uint8_t numUs = fetchHoldingRegsData(iRegIndex);
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f7ff feb9 	bl	8001918 <fetchHoldingRegsData>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	74fb      	strb	r3, [r7, #19]
                if (numUs < 1)
 8001baa:	7cfb      	ldrb	r3, [r7, #19]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <eMBRegHoldingCB+0x54>
                {
                    return MB_ENORES;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	e05f      	b.n	8001c74 <eMBRegHoldingCB+0x114>
                }

                for (size_t i = 0; i < numUs; ++i)
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]
 8001bb8:	e022      	b.n	8001c00 <eMBRegHoldingCB+0xa0>
                {
                    if (usNRegs > 0)
 8001bba:	893b      	ldrh	r3, [r7, #8]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d01a      	beq.n	8001bf6 <eMBRegHoldingCB+0x96>
                    {
                        *pucRegBuffer++ = (unsigned char)(usRegHoldingBuf[iRegIndex] >> 8);
 8001bc0:	4a2f      	ldr	r2, [pc, #188]	; (8001c80 <eMBRegHoldingCB+0x120>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001bc8:	0a1b      	lsrs	r3, r3, #8
 8001bca:	b299      	uxth	r1, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1c5a      	adds	r2, r3, #1
 8001bd0:	60fa      	str	r2, [r7, #12]
 8001bd2:	b2ca      	uxtb	r2, r1
 8001bd4:	701a      	strb	r2, [r3, #0]
                        *pucRegBuffer++ = (unsigned char)(usRegHoldingBuf[iRegIndex] &0xFF);
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <eMBRegHoldingCB+0x120>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	60fa      	str	r2, [r7, #12]
 8001be4:	b2ca      	uxtb	r2, r1
 8001be6:	701a      	strb	r2, [r3, #0]
                        iRegIndex++;
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	3301      	adds	r3, #1
 8001bec:	61bb      	str	r3, [r7, #24]
                        usNRegs--;
 8001bee:	893b      	ldrh	r3, [r7, #8]
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	813b      	strh	r3, [r7, #8]
 8001bf4:	e001      	b.n	8001bfa <eMBRegHoldingCB+0x9a>
                    }
                    else
                    {
                        return MB_ENORES;
 8001bf6:	2304      	movs	r3, #4
 8001bf8:	e03c      	b.n	8001c74 <eMBRegHoldingCB+0x114>
                for (size_t i = 0; i < numUs; ++i)
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	617b      	str	r3, [r7, #20]
 8001c00:	7cfb      	ldrb	r3, [r7, #19]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d3d8      	bcc.n	8001bba <eMBRegHoldingCB+0x5a>
            while (usNRegs > 0)
 8001c08:	893b      	ldrh	r3, [r7, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1c8      	bne.n	8001ba0 <eMBRegHoldingCB+0x40>
        if ((usAddress >= REG_HOLDING_START) &&
 8001c0e:	e001      	b.n	8001c14 <eMBRegHoldingCB+0xb4>
                }
            }
        }
        else
        {
            eStatus = MB_ENOREG;
 8001c10:	2301      	movs	r3, #1
 8001c12:	77fb      	strb	r3, [r7, #31]
        }
    }

    if (eMode == MB_REG_WRITE)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d12b      	bne.n	8001c72 <eMBRegHoldingCB+0x112>
    {
        if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8001c1a:	897b      	ldrh	r3, [r7, #10]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d026      	beq.n	8001c6e <eMBRegHoldingCB+0x10e>
 8001c20:	897a      	ldrh	r2, [r7, #10]
 8001c22:	893b      	ldrh	r3, [r7, #8]
 8001c24:	4413      	add	r3, r2
 8001c26:	2b18      	cmp	r3, #24
 8001c28:	dc21      	bgt.n	8001c6e <eMBRegHoldingCB+0x10e>
        {
            iRegIndex = (int)(usAddress - usRegHoldingStart);
 8001c2a:	897b      	ldrh	r3, [r7, #10]
 8001c2c:	4a13      	ldr	r2, [pc, #76]	; (8001c7c <eMBRegHoldingCB+0x11c>)
 8001c2e:	8812      	ldrh	r2, [r2, #0]
 8001c30:	1a9b      	subs	r3, r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]

            while (usNRegs > 0)
 8001c34:	e017      	b.n	8001c66 <eMBRegHoldingCB+0x106>
            {
                writeHoldingRegs(iRegIndex, (USHORT)(((unsigned int) *pucRegBuffer << 8) | ((unsigned int) *(pucRegBuffer + 1))));
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	021b      	lsls	r3, r3, #8
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	3301      	adds	r3, #1
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	b29b      	uxth	r3, r3
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	69b8      	ldr	r0, [r7, #24]
 8001c50:	f7ff ff46 	bl	8001ae0 <writeHoldingRegs>
                pucRegBuffer += 2;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	3302      	adds	r3, #2
 8001c58:	60fb      	str	r3, [r7, #12]
                usNRegs--;
 8001c5a:	893b      	ldrh	r3, [r7, #8]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	813b      	strh	r3, [r7, #8]
                iRegIndex++;
 8001c60:	69bb      	ldr	r3, [r7, #24]
 8001c62:	3301      	adds	r3, #1
 8001c64:	61bb      	str	r3, [r7, #24]
            while (usNRegs > 0)
 8001c66:	893b      	ldrh	r3, [r7, #8]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d1e4      	bne.n	8001c36 <eMBRegHoldingCB+0xd6>
        if ((usAddress >= REG_HOLDING_START) && (usAddress + usNRegs <= REG_HOLDING_START + REG_HOLDING_NREGS))
 8001c6c:	e001      	b.n	8001c72 <eMBRegHoldingCB+0x112>
            }
        }
        else eStatus = MB_ENOREG;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	77fb      	strb	r3, [r7, #31]
    }

    return eStatus;
 8001c72:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3720      	adds	r7, #32
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	20000004 	.word	0x20000004
 8001c80:	200001b8 	.word	0x200001b8

08001c84 <eMBRegInputCB>:

eMBErrorCode eMBRegInputCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNRegs)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	807b      	strh	r3, [r7, #2]
 8001c90:	4613      	mov	r3, r2
 8001c92:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 8001c94:	2301      	movs	r3, #1
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <eMBRegCoilsCB>:

eMBErrorCode eMBRegCoilsCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNCoils, eMBRegisterMode eMode)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b085      	sub	sp, #20
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	4608      	mov	r0, r1
 8001cac:	4611      	mov	r1, r2
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	817b      	strh	r3, [r7, #10]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	813b      	strh	r3, [r7, #8]
 8001cb8:	4613      	mov	r3, r2
 8001cba:	71fb      	strb	r3, [r7, #7]
    return MB_ENOREG;
 8001cbc:	2301      	movs	r3, #1
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <eMBRegDiscreteCB>:

eMBErrorCode eMBRegDiscreteCB(UCHAR *pucRegBuffer, USHORT usAddress, USHORT usNDiscrete)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	b083      	sub	sp, #12
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	807b      	strh	r3, [r7, #2]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	803b      	strh	r3, [r7, #0]
    return MB_ENOREG;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cec:	b672      	cpsid	i
}
 8001cee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /*User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1) {}
 8001cf0:	e7fe      	b.n	8001cf0 <Error_Handler+0x8>
	...

08001cf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	4a0f      	ldr	r2, [pc, #60]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d08:	6453      	str	r3, [r2, #68]	; 0x44
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	603b      	str	r3, [r7, #0]
 8001d1a:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a08      	ldr	r2, [pc, #32]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_MspInit+0x4c>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d32:	2007      	movs	r0, #7
 8001d34:	f001 fb36 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	3708      	adds	r7, #8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40023800 	.word	0x40023800

08001d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d48:	e7fe      	b.n	8001d48 <NMI_Handler+0x4>

08001d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d4a:	b480      	push	{r7}
 8001d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d4e:	e7fe      	b.n	8001d4e <HardFault_Handler+0x4>

08001d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d54:	e7fe      	b.n	8001d54 <MemManage_Handler+0x4>

08001d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d56:	b480      	push	{r7}
 8001d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d5a:	e7fe      	b.n	8001d5a <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	e7fe      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d62:	b480      	push	{r7}
 8001d64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d90:	f000 fb26 	bl	80023e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <CAN1_RX0_IRQHandler+0x10>)
 8001d9e:	f000 ffdf 	bl	8002d60 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000114 	.word	0x20000114

08001dac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  uint32_t tmp_flag = __HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE);
 8001db2:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0320 	and.w	r3, r3, #32
 8001dbc:	2b20      	cmp	r3, #32
 8001dbe:	bf0c      	ite	eq
 8001dc0:	2301      	moveq	r3, #1
 8001dc2:	2300      	movne	r3, #0
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_it_source = __HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_RXNE);
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	f003 0320 	and.w	r3, r3, #32
 8001dd2:	60bb      	str	r3, [r7, #8]

  if((tmp_flag != RESET) && (tmp_it_source != RESET)) {
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d011      	beq.n	8001dfe <USART2_IRQHandler+0x52>
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d00e      	beq.n	8001dfe <USART2_IRQHandler+0x52>
    pxMBFrameCBByteReceived();
 8001de0:	4b14      	ldr	r3, [pc, #80]	; (8001e34 <USART2_IRQHandler+0x88>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4798      	blx	r3
    __HAL_UART_CLEAR_PEFLAG(&huart2);
 8001de6:	2300      	movs	r3, #0
 8001de8:	607b      	str	r3, [r7, #4]
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	607b      	str	r3, [r7, #4]
 8001df2:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	607b      	str	r3, [r7, #4]
 8001dfa:	687b      	ldr	r3, [r7, #4]
    return;
 8001dfc:	e014      	b.n	8001e28 <USART2_IRQHandler+0x7c>
  }

  if((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) != RESET) &&(__HAL_UART_GET_IT_SOURCE(&huart2, UART_IT_TXE) != RESET)) {
 8001dfe:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e08:	2b80      	cmp	r3, #128	; 0x80
 8001e0a:	d10a      	bne.n	8001e22 <USART2_IRQHandler+0x76>
 8001e0c:	4b08      	ldr	r3, [pc, #32]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <USART2_IRQHandler+0x76>
    pxMBFrameCBTransmitterEmpty();
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <USART2_IRQHandler+0x8c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4798      	blx	r3
    return ;
 8001e20:	e002      	b.n	8001e28 <USART2_IRQHandler+0x7c>
  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <USART2_IRQHandler+0x84>)
 8001e24:	f003 f986 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000248 	.word	0x20000248
 8001e34:	200002ec 	.word	0x200002ec
 8001e38:	200002f0 	.word	0x200002f0

08001e3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
//    pxMBFrameCBTransmitterEmpty();
//    return ;
//  }

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <USART3_IRQHandler+0x10>)
 8001e42:	f003 f977 	bl	8005134 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	2000028c 	.word	0x2000028c

08001e50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001e54:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e58:	f001 fe40 	bl	8003adc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e5c:	bf00      	nop
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */
	if(__HAL_TIM_GET_FLAG(&htim7, TIM_FLAG_UPDATE) != RESET && __HAL_TIM_GET_IT_SOURCE(&htim7, TIM_IT_UPDATE) !=RESET) {
 8001e64:	4b12      	ldr	r3, [pc, #72]	; (8001eb0 <TIM7_IRQHandler+0x50>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d118      	bne.n	8001ea4 <TIM7_IRQHandler+0x44>
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <TIM7_IRQHandler+0x50>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d111      	bne.n	8001ea4 <TIM7_IRQHandler+0x44>
    __HAL_TIM_CLEAR_IT(&htim7, TIM_IT_UPDATE);
 8001e80:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <TIM7_IRQHandler+0x50>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0201 	mvn.w	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
    if (!--downcounter)
 8001e8a:	4b0a      	ldr	r3, [pc, #40]	; (8001eb4 <TIM7_IRQHandler+0x54>)
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <TIM7_IRQHandler+0x54>)
 8001e94:	801a      	strh	r2, [r3, #0]
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <TIM7_IRQHandler+0x54>)
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <TIM7_IRQHandler+0x44>
      pxMBPortCBTimerExpired();
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <TIM7_IRQHandler+0x58>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4798      	blx	r3
  }

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <TIM7_IRQHandler+0x50>)
 8001ea6:	f002 fd58 	bl	800495a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000200 	.word	0x20000200
 8001eb4:	20000434 	.word	0x20000434
 8001eb8:	200002f4 	.word	0x200002f4

08001ebc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
	return 1;
 8001ec0:	2301      	movs	r3, #1
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <_kill>:

int _kill(int pid, int sig)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ed6:	f005 f945 	bl	8007164 <__errno>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2216      	movs	r2, #22
 8001ede:	601a      	str	r2, [r3, #0]
	return -1;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <_exit>:

void _exit (int status)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b082      	sub	sp, #8
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f7ff ffe7 	bl	8001ecc <_kill>
	while (1) {}		/* Make sure we hang here */
 8001efe:	e7fe      	b.n	8001efe <_exit+0x12>

08001f00 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]
 8001f10:	e00a      	b.n	8001f28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f12:	f3af 8000 	nop.w
 8001f16:	4601      	mov	r1, r0
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	1c5a      	adds	r2, r3, #1
 8001f1c:	60ba      	str	r2, [r7, #8]
 8001f1e:	b2ca      	uxtb	r2, r1
 8001f20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	3301      	adds	r3, #1
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	697a      	ldr	r2, [r7, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	dbf0      	blt.n	8001f12 <_read+0x12>
	}

return len;
 8001f30:	687b      	ldr	r3, [r7, #4]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b086      	sub	sp, #24
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	60b9      	str	r1, [r7, #8]
 8001f44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	617b      	str	r3, [r7, #20]
 8001f4a:	e009      	b.n	8001f60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f8e9 	bl	800112c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	dbf1      	blt.n	8001f4c <_write+0x12>
	}
	return len;
 8001f68:	687b      	ldr	r3, [r7, #4]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <_close>:

int _close(int file)
{
 8001f72:	b480      	push	{r7}
 8001f74:	b083      	sub	sp, #12
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	6078      	str	r0, [r7, #4]
	return -1;
 8001f7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f9a:	605a      	str	r2, [r3, #4]
	return 0;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <_isatty>:

int _isatty(int file)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
	return 1;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
	return 0;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
	...

08001fdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <_sbrk+0x5c>)
 8001fe6:	4b15      	ldr	r3, [pc, #84]	; (800203c <_sbrk+0x60>)
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ff0:	4b13      	ldr	r3, [pc, #76]	; (8002040 <_sbrk+0x64>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d102      	bne.n	8001ffe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff8:	4b11      	ldr	r3, [pc, #68]	; (8002040 <_sbrk+0x64>)
 8001ffa:	4a12      	ldr	r2, [pc, #72]	; (8002044 <_sbrk+0x68>)
 8001ffc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <_sbrk+0x64>)
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d207      	bcs.n	800201c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800200c:	f005 f8aa 	bl	8007164 <__errno>
 8002010:	4603      	mov	r3, r0
 8002012:	220c      	movs	r2, #12
 8002014:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002016:	f04f 33ff 	mov.w	r3, #4294967295
 800201a:	e009      	b.n	8002030 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800201c:	4b08      	ldr	r3, [pc, #32]	; (8002040 <_sbrk+0x64>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002022:	4b07      	ldr	r3, [pc, #28]	; (8002040 <_sbrk+0x64>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4413      	add	r3, r2
 800202a:	4a05      	ldr	r2, [pc, #20]	; (8002040 <_sbrk+0x64>)
 800202c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3718      	adds	r7, #24
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20020000 	.word	0x20020000
 800203c:	00000400 	.word	0x00000400
 8002040:	200001fc 	.word	0x200001fc
 8002044:	20000448 	.word	0x20000448

08002048 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <SystemInit+0x20>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <SystemInit+0x20>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002072:	463b      	mov	r3, r7
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800207a:	4b14      	ldr	r3, [pc, #80]	; (80020cc <MX_TIM7_Init+0x60>)
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <MX_TIM7_Init+0x64>)
 800207e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 64-1;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <MX_TIM7_Init+0x60>)
 8002082:	223f      	movs	r2, #63	; 0x3f
 8002084:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002086:	4b11      	ldr	r3, [pc, #68]	; (80020cc <MX_TIM7_Init+0x60>)
 8002088:	2200      	movs	r2, #0
 800208a:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50-1;
 800208c:	4b0f      	ldr	r3, [pc, #60]	; (80020cc <MX_TIM7_Init+0x60>)
 800208e:	2231      	movs	r2, #49	; 0x31
 8002090:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002092:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <MX_TIM7_Init+0x60>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <MX_TIM7_Init+0x60>)
 800209a:	f002 fb6f 	bl	800477c <HAL_TIM_Base_Init>
 800209e:	4603      	mov	r3, r0
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d001      	beq.n	80020a8 <MX_TIM7_Init+0x3c>
  {
    Error_Handler();
 80020a4:	f7ff fe20 	bl	8001ce8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a8:	2300      	movs	r3, #0
 80020aa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ac:	2300      	movs	r3, #0
 80020ae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80020b0:	463b      	mov	r3, r7
 80020b2:	4619      	mov	r1, r3
 80020b4:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_TIM7_Init+0x60>)
 80020b6:	f002 fe2b 	bl	8004d10 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM7_Init+0x58>
  {
    Error_Handler();
 80020c0:	f7ff fe12 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000200 	.word	0x20000200
 80020d0:	40001400 	.word	0x40001400

080020d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a0e      	ldr	r2, [pc, #56]	; (800211c <HAL_TIM_Base_MspInit+0x48>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d115      	bne.n	8002112 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	4b0d      	ldr	r3, [pc, #52]	; (8002120 <HAL_TIM_Base_MspInit+0x4c>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a0c      	ldr	r2, [pc, #48]	; (8002120 <HAL_TIM_Base_MspInit+0x4c>)
 80020f0:	f043 0320 	orr.w	r3, r3, #32
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_TIM_Base_MspInit+0x4c>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2037      	movs	r0, #55	; 0x37
 8002108:	f001 f957 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800210c:	2037      	movs	r0, #55	; 0x37
 800210e:	f001 f970 	bl	80033f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	40001400 	.word	0x40001400
 8002120:	40023800 	.word	0x40023800

08002124 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002128:	4b11      	ldr	r3, [pc, #68]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 800212a:	4a12      	ldr	r2, [pc, #72]	; (8002174 <MX_USART2_UART_Init+0x50>)
 800212c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 8002130:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002134:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002136:	4b0e      	ldr	r3, [pc, #56]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 8002138:	2200      	movs	r2, #0
 800213a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 800213e:	2200      	movs	r2, #0
 8002140:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 800214a:	220c      	movs	r2, #12
 800214c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 8002156:	2200      	movs	r2, #0
 8002158:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215a:	4805      	ldr	r0, [pc, #20]	; (8002170 <MX_USART2_UART_Init+0x4c>)
 800215c:	f002 fe68 	bl	8004e30 <HAL_UART_Init>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002166:	f7ff fdbf 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	20000248 	.word	0x20000248
 8002174:	40004400 	.word	0x40004400

08002178 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 800217e:	4a12      	ldr	r2, [pc, #72]	; (80021c8 <MX_USART3_UART_Init+0x50>)
 8002180:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002182:	4b10      	ldr	r3, [pc, #64]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 8002184:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002188:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 800218c:	2200      	movs	r2, #0
 800218e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002190:	4b0c      	ldr	r3, [pc, #48]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 8002192:	2200      	movs	r2, #0
 8002194:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 8002198:	2200      	movs	r2, #0
 800219a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800219c:	4b09      	ldr	r3, [pc, #36]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 800219e:	220c      	movs	r2, #12
 80021a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <MX_USART3_UART_Init+0x4c>)
 80021b0:	f002 fe3e 	bl	8004e30 <HAL_UART_Init>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80021ba:	f7ff fd95 	bl	8001ce8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80021be:	bf00      	nop
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	2000028c 	.word	0x2000028c
 80021c8:	40004800 	.word	0x40004800

080021cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b08c      	sub	sp, #48	; 0x30
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d4:	f107 031c 	add.w	r3, r7, #28
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
 80021dc:	605a      	str	r2, [r3, #4]
 80021de:	609a      	str	r2, [r3, #8]
 80021e0:	60da      	str	r2, [r3, #12]
 80021e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_UART_MspInit+0x108>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d134      	bne.n	8002258 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b36      	ldr	r3, [pc, #216]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002206:	61bb      	str	r3, [r7, #24]
 8002208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b32      	ldr	r3, [pc, #200]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002212:	4a31      	ldr	r2, [pc, #196]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	6313      	str	r3, [r2, #48]	; 0x30
 800221a:	4b2f      	ldr	r3, [pc, #188]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 800221c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002226:	230c      	movs	r3, #12
 8002228:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800222a:	2302      	movs	r3, #2
 800222c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002232:	2303      	movs	r3, #3
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002236:	2307      	movs	r3, #7
 8002238:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	4619      	mov	r1, r3
 8002240:	4826      	ldr	r0, [pc, #152]	; (80022dc <HAL_UART_MspInit+0x110>)
 8002242:	f001 fa6b 	bl	800371c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2026      	movs	r0, #38	; 0x26
 800224c:	f001 f8b5 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002250:	2026      	movs	r0, #38	; 0x26
 8002252:	f001 f8ce 	bl	80033f2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002256:	e039      	b.n	80022cc <HAL_UART_MspInit+0x100>
  else if(uartHandle->Instance==USART3)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a20      	ldr	r2, [pc, #128]	; (80022e0 <HAL_UART_MspInit+0x114>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d134      	bne.n	80022cc <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b1c      	ldr	r3, [pc, #112]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a1b      	ldr	r2, [pc, #108]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002288:	f043 0304 	orr.w	r3, r3, #4
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_UART_MspInit+0x10c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800229a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800229e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a0:	2302      	movs	r3, #2
 80022a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a8:	2303      	movs	r3, #3
 80022aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80022ac:	2307      	movs	r3, #7
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	4619      	mov	r1, r3
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <HAL_UART_MspInit+0x118>)
 80022b8:	f001 fa30 	bl	800371c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80022bc:	2200      	movs	r2, #0
 80022be:	2100      	movs	r1, #0
 80022c0:	2027      	movs	r0, #39	; 0x27
 80022c2:	f001 f87a 	bl	80033ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80022c6:	2027      	movs	r0, #39	; 0x27
 80022c8:	f001 f893 	bl	80033f2 <HAL_NVIC_EnableIRQ>
}
 80022cc:	bf00      	nop
 80022ce:	3730      	adds	r7, #48	; 0x30
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40004400 	.word	0x40004400
 80022d8:	40023800 	.word	0x40023800
 80022dc:	40020000 	.word	0x40020000
 80022e0:	40004800 	.word	0x40004800
 80022e4:	40020800 	.word	0x40020800

080022e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80022e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002320 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022ec:	480d      	ldr	r0, [pc, #52]	; (8002324 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022ee:	490e      	ldr	r1, [pc, #56]	; (8002328 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022f0:	4a0e      	ldr	r2, [pc, #56]	; (800232c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022f4:	e002      	b.n	80022fc <LoopCopyDataInit>

080022f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022fa:	3304      	adds	r3, #4

080022fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002300:	d3f9      	bcc.n	80022f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002302:	4a0b      	ldr	r2, [pc, #44]	; (8002330 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002304:	4c0b      	ldr	r4, [pc, #44]	; (8002334 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002308:	e001      	b.n	800230e <LoopFillZerobss>

0800230a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800230a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800230c:	3204      	adds	r2, #4

0800230e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800230e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002310:	d3fb      	bcc.n	800230a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002312:	f7ff fe99 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002316:	f004 ff3d 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800231a:	f7ff f90f 	bl	800153c <main>
  bx  lr    
 800231e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002320:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002324:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002328:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 800232c:	080085d0 	.word	0x080085d0
  ldr r2, =_sbss
 8002330:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8002334:	20000448 	.word	0x20000448

08002338 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002338:	e7fe      	b.n	8002338 <ADC_IRQHandler>
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	; (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	; (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	; (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f001 f81d 	bl	80033a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	2000      	movs	r0, #0
 800236c:	f000 f808 	bl	8002380 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fcc0 	bl	8001cf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_InitTick+0x54>)
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x58>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	4619      	mov	r1, r3
 8002392:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002396:	fbb3 f3f1 	udiv	r3, r3, r1
 800239a:	fbb2 f3f3 	udiv	r3, r2, r3
 800239e:	4618      	mov	r0, r3
 80023a0:	f001 f835 	bl	800340e <HAL_SYSTICK_Config>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d001      	beq.n	80023ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e00e      	b.n	80023cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b0f      	cmp	r3, #15
 80023b2:	d80a      	bhi.n	80023ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b4:	2200      	movs	r2, #0
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	f04f 30ff 	mov.w	r0, #4294967295
 80023bc:	f000 fffd 	bl	80033ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c0:	4a06      	ldr	r2, [pc, #24]	; (80023dc <HAL_InitTick+0x5c>)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
 80023c8:	e000      	b.n	80023cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	3708      	adds	r7, #8
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bd80      	pop	{r7, pc}
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000010 	.word	0x20000010
 80023dc:	2000000c 	.word	0x2000000c

080023e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e0:	b480      	push	{r7}
 80023e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e4:	4b06      	ldr	r3, [pc, #24]	; (8002400 <HAL_IncTick+0x20>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	461a      	mov	r2, r3
 80023ea:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x24>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4413      	add	r3, r2
 80023f0:	4a04      	ldr	r2, [pc, #16]	; (8002404 <HAL_IncTick+0x24>)
 80023f2:	6013      	str	r3, [r2, #0]
}
 80023f4:	bf00      	nop
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	20000010 	.word	0x20000010
 8002404:	200002d0 	.word	0x200002d0

08002408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return uwTick;
 800240c:	4b03      	ldr	r3, [pc, #12]	; (800241c <HAL_GetTick+0x14>)
 800240e:	681b      	ldr	r3, [r3, #0]
}
 8002410:	4618      	mov	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	200002d0 	.word	0x200002d0

08002420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002428:	f7ff ffee 	bl	8002408 <HAL_GetTick>
 800242c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002438:	d005      	beq.n	8002446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_Delay+0x44>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	461a      	mov	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4413      	add	r3, r2
 8002444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002446:	bf00      	nop
 8002448:	f7ff ffde 	bl	8002408 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	429a      	cmp	r2, r3
 8002456:	d8f7      	bhi.n	8002448 <HAL_Delay+0x28>
  {
  }
}
 8002458:	bf00      	nop
 800245a:	bf00      	nop
 800245c:	3710      	adds	r7, #16
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000010 	.word	0x20000010

08002468 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e0ed      	b.n	8002656 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fce8 	bl	8000e5c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 0201 	orr.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800249c:	f7ff ffb4 	bl	8002408 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024a2:	e012      	b.n	80024ca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a4:	f7ff ffb0 	bl	8002408 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b0a      	cmp	r3, #10
 80024b0:	d90b      	bls.n	80024ca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0c5      	b.n	8002656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d0e5      	beq.n	80024a4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0202 	bic.w	r2, r2, #2
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024e8:	f7ff ff8e 	bl	8002408 <HAL_GetTick>
 80024ec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80024ee:	e012      	b.n	8002516 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024f0:	f7ff ff8a 	bl	8002408 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b0a      	cmp	r3, #10
 80024fc:	d90b      	bls.n	8002516 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002502:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2205      	movs	r2, #5
 800250e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e09f      	b.n	8002656 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0302 	and.w	r3, r3, #2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d1e5      	bne.n	80024f0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	7e1b      	ldrb	r3, [r3, #24]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d108      	bne.n	800253e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e007      	b.n	800254e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800254c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	7e5b      	ldrb	r3, [r3, #25]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d108      	bne.n	8002568 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002576:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	7e9b      	ldrb	r3, [r3, #26]
 800257c:	2b01      	cmp	r3, #1
 800257e:	d108      	bne.n	8002592 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 0220 	orr.w	r2, r2, #32
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	e007      	b.n	80025a2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0220 	bic.w	r2, r2, #32
 80025a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	7edb      	ldrb	r3, [r3, #27]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d108      	bne.n	80025bc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f022 0210 	bic.w	r2, r2, #16
 80025b8:	601a      	str	r2, [r3, #0]
 80025ba:	e007      	b.n	80025cc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0210 	orr.w	r2, r2, #16
 80025ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7f1b      	ldrb	r3, [r3, #28]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0208 	orr.w	r2, r2, #8
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0208 	bic.w	r2, r2, #8
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7f5b      	ldrb	r3, [r3, #29]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0204 	orr.w	r2, r2, #4
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e007      	b.n	8002620 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0204 	bic.w	r2, r2, #4
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689a      	ldr	r2, [r3, #8]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	691b      	ldr	r3, [r3, #16]
 800262e:	431a      	orrs	r2, r3
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	ea42 0103 	orr.w	r1, r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	1e5a      	subs	r2, r3, #1
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2200      	movs	r2, #0
 800264a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
	...

08002660 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002660:	b480      	push	{r7}
 8002662:	b087      	sub	sp, #28
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002676:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002678:	7cfb      	ldrb	r3, [r7, #19]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d003      	beq.n	8002686 <HAL_CAN_ConfigFilter+0x26>
 800267e:	7cfb      	ldrb	r3, [r7, #19]
 8002680:	2b02      	cmp	r3, #2
 8002682:	f040 80be 	bne.w	8002802 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002686:	4b65      	ldr	r3, [pc, #404]	; (800281c <HAL_CAN_ConfigFilter+0x1bc>)
 8002688:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002690:	f043 0201 	orr.w	r2, r3, #1
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026a0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	431a      	orrs	r2, r3
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	695b      	ldr	r3, [r3, #20]
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	2201      	movs	r2, #1
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	43db      	mvns	r3, r3
 80026d8:	401a      	ands	r2, r3
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d123      	bne.n	8002730 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	43db      	mvns	r3, r3
 80026f2:	401a      	ands	r2, r3
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800270a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	3248      	adds	r2, #72	; 0x48
 8002710:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002724:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002726:	6979      	ldr	r1, [r7, #20]
 8002728:	3348      	adds	r3, #72	; 0x48
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	440b      	add	r3, r1
 800272e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d122      	bne.n	800277e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	431a      	orrs	r2, r3
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002758:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3248      	adds	r2, #72	; 0x48
 800275e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002772:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002774:	6979      	ldr	r1, [r7, #20]
 8002776:	3348      	adds	r3, #72	; 0x48
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	440b      	add	r3, r1
 800277c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	43db      	mvns	r3, r3
 8002790:	401a      	ands	r2, r3
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002798:	e007      	b.n	80027aa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	691b      	ldr	r3, [r3, #16]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	401a      	ands	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027c4:	e007      	b.n	80027d6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	431a      	orrs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	6a1b      	ldr	r3, [r3, #32]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	431a      	orrs	r2, r3
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027f4:	f023 0201 	bic.w	r2, r3, #1
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80027fe:	2300      	movs	r3, #0
 8002800:	e006      	b.n	8002810 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
  }
}
 8002810:	4618      	mov	r0, r3
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40006400 	.word	0x40006400

08002820 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b01      	cmp	r3, #1
 8002832:	d12e      	bne.n	8002892 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2202      	movs	r2, #2
 8002838:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681a      	ldr	r2, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0201 	bic.w	r2, r2, #1
 800284a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800284c:	f7ff fddc 	bl	8002408 <HAL_GetTick>
 8002850:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002852:	e012      	b.n	800287a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002854:	f7ff fdd8 	bl	8002408 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b0a      	cmp	r3, #10
 8002860:	d90b      	bls.n	800287a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2205      	movs	r2, #5
 8002872:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e012      	b.n	80028a0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e5      	bne.n	8002854 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800288e:	2300      	movs	r3, #0
 8002890:	e006      	b.n	80028a0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
  }
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d133      	bne.n	8002924 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	681a      	ldr	r2, [r3, #0]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f042 0201 	orr.w	r2, r2, #1
 80028ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028cc:	f7ff fd9c 	bl	8002408 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028d2:	e012      	b.n	80028fa <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028d4:	f7ff fd98 	bl	8002408 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b0a      	cmp	r3, #10
 80028e0:	d90b      	bls.n	80028fa <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2205      	movs	r2, #5
 80028f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e01b      	b.n	8002932 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0e5      	beq.n	80028d4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0202 	bic.w	r2, r2, #2
 8002916:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 8002920:	2300      	movs	r3, #0
 8002922:	e006      	b.n	8002932 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002928:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
  }
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800293a:	b480      	push	{r7}
 800293c:	b089      	sub	sp, #36	; 0x24
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
 8002946:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800294e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002958:	7ffb      	ldrb	r3, [r7, #31]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d003      	beq.n	8002966 <HAL_CAN_AddTxMessage+0x2c>
 800295e:	7ffb      	ldrb	r3, [r7, #31]
 8002960:	2b02      	cmp	r3, #2
 8002962:	f040 80b8 	bne.w	8002ad6 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10a      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002970:	69bb      	ldr	r3, [r7, #24]
 8002972:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d105      	bne.n	8002986 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80a0 	beq.w	8002ac6 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	0e1b      	lsrs	r3, r3, #24
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d907      	bls.n	80029a6 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e09e      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80029a6:	2201      	movs	r2, #1
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	409a      	lsls	r2, r3
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10d      	bne.n	80029d4 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80029c2:	68f9      	ldr	r1, [r7, #12]
 80029c4:	6809      	ldr	r1, [r1, #0]
 80029c6:	431a      	orrs	r2, r3
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	3318      	adds	r3, #24
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	440b      	add	r3, r1
 80029d0:	601a      	str	r2, [r3, #0]
 80029d2:	e00f      	b.n	80029f4 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029de:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029e4:	68f9      	ldr	r1, [r7, #12]
 80029e6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80029e8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3318      	adds	r3, #24
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6819      	ldr	r1, [r3, #0]
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	691a      	ldr	r2, [r3, #16]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3318      	adds	r3, #24
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	440b      	add	r3, r1
 8002a04:	3304      	adds	r3, #4
 8002a06:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	7d1b      	ldrb	r3, [r3, #20]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d111      	bne.n	8002a34 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	3318      	adds	r3, #24
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6811      	ldr	r1, [r2, #0]
 8002a24:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	3318      	adds	r3, #24
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	440b      	add	r3, r1
 8002a30:	3304      	adds	r3, #4
 8002a32:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3307      	adds	r3, #7
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	061a      	lsls	r2, r3, #24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3306      	adds	r3, #6
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3305      	adds	r3, #5
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	021b      	lsls	r3, r3, #8
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	3204      	adds	r2, #4
 8002a54:	7812      	ldrb	r2, [r2, #0]
 8002a56:	4610      	mov	r0, r2
 8002a58:	68fa      	ldr	r2, [r7, #12]
 8002a5a:	6811      	ldr	r1, [r2, #0]
 8002a5c:	ea43 0200 	orr.w	r2, r3, r0
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	440b      	add	r3, r1
 8002a66:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002a6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3303      	adds	r3, #3
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	061a      	lsls	r2, r3, #24
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	3302      	adds	r3, #2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	041b      	lsls	r3, r3, #16
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3301      	adds	r3, #1
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	021b      	lsls	r3, r3, #8
 8002a86:	4313      	orrs	r3, r2
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	7812      	ldrb	r2, [r2, #0]
 8002a8c:	4610      	mov	r0, r2
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	6811      	ldr	r1, [r2, #0]
 8002a92:	ea43 0200 	orr.w	r2, r3, r0
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002aa0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	3318      	adds	r3, #24
 8002aaa:	011b      	lsls	r3, r3, #4
 8002aac:	4413      	add	r3, r2
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	6811      	ldr	r1, [r2, #0]
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	3318      	adds	r3, #24
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	440b      	add	r3, r1
 8002ac0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	e00e      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e006      	b.n	8002ae4 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
  }
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3724      	adds	r7, #36	; 0x24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002af0:	b480      	push	{r7}
 8002af2:	b087      	sub	sp, #28
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b04:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b06:	7dfb      	ldrb	r3, [r7, #23]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d003      	beq.n	8002b14 <HAL_CAN_GetRxMessage+0x24>
 8002b0c:	7dfb      	ldrb	r3, [r7, #23]
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	f040 80f3 	bne.w	8002cfa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d10e      	bne.n	8002b38 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0303 	and.w	r3, r3, #3
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d116      	bne.n	8002b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0e7      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0303 	and.w	r3, r3, #3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e0d8      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	331b      	adds	r3, #27
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	4413      	add	r3, r2
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0204 	and.w	r2, r3, #4
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d10c      	bne.n	8002b8e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	331b      	adds	r3, #27
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	4413      	add	r3, r2
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	0d5b      	lsrs	r3, r3, #21
 8002b84:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	601a      	str	r2, [r3, #0]
 8002b8c:	e00b      	b.n	8002ba6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	331b      	adds	r3, #27
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	08db      	lsrs	r3, r3, #3
 8002b9e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	331b      	adds	r3, #27
 8002bae:	011b      	lsls	r3, r3, #4
 8002bb0:	4413      	add	r3, r2
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0202 	and.w	r2, r3, #2
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	331b      	adds	r3, #27
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 020f 	and.w	r2, r3, #15
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	331b      	adds	r3, #27
 8002bdc:	011b      	lsls	r3, r3, #4
 8002bde:	4413      	add	r3, r2
 8002be0:	3304      	adds	r3, #4
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	0a1b      	lsrs	r3, r3, #8
 8002be6:	b2da      	uxtb	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	331b      	adds	r3, #27
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b29a      	uxth	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681a      	ldr	r2, [r3, #0]
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	4413      	add	r3, r2
 8002c24:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	0a1a      	lsrs	r2, r3, #8
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	4413      	add	r3, r2
 8002c3e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	0c1a      	lsrs	r2, r3, #16
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	3302      	adds	r3, #2
 8002c4a:	b2d2      	uxtb	r2, r2
 8002c4c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e1a      	lsrs	r2, r3, #24
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	3303      	adds	r3, #3
 8002c64:	b2d2      	uxtb	r2, r2
 8002c66:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	3304      	adds	r3, #4
 8002c7c:	b2d2      	uxtb	r2, r2
 8002c7e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	4413      	add	r3, r2
 8002c8a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0a1a      	lsrs	r2, r3, #8
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	3305      	adds	r3, #5
 8002c96:	b2d2      	uxtb	r2, r2
 8002c98:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	011b      	lsls	r3, r3, #4
 8002ca2:	4413      	add	r3, r2
 8002ca4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	0c1a      	lsrs	r2, r3, #16
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	3306      	adds	r3, #6
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681a      	ldr	r2, [r3, #0]
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	4413      	add	r3, r2
 8002cbe:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	0e1a      	lsrs	r2, r3, #24
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	3307      	adds	r3, #7
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d108      	bne.n	8002ce6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0220 	orr.w	r2, r2, #32
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e007      	b.n	8002cf6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	691a      	ldr	r2, [r3, #16]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0220 	orr.w	r2, r2, #32
 8002cf4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	e006      	b.n	8002d08 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
  }
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr

08002d14 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d24:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d26:	7bfb      	ldrb	r3, [r7, #15]
 8002d28:	2b01      	cmp	r3, #1
 8002d2a:	d002      	beq.n	8002d32 <HAL_CAN_ActivateNotification+0x1e>
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b02      	cmp	r3, #2
 8002d30:	d109      	bne.n	8002d46 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6959      	ldr	r1, [r3, #20]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	683a      	ldr	r2, [r7, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e006      	b.n	8002d54 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
  }
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	3714      	adds	r7, #20
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	; 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d9c:	6a3b      	ldr	r3, [r7, #32]
 8002d9e:	f003 0301 	and.w	r3, r3, #1
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07c      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d023      	beq.n	8002df8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2201      	movs	r2, #1
 8002db6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	f003 0302 	and.w	r3, r3, #2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f983 	bl	80030ce <HAL_CAN_TxMailbox0CompleteCallback>
 8002dc8:	e016      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
 8002ddc:	e00c      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0308 	and.w	r3, r3, #8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dee:	627b      	str	r3, [r7, #36]	; 0x24
 8002df0:	e002      	b.n	8002df8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f989 	bl	800310a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d024      	beq.n	8002e4c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	f000 f963 	bl	80030e2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002e1c:	e016      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d004      	beq.n	8002e32 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e30:	e00c      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d004      	beq.n	8002e46 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e42:	627b      	str	r3, [r7, #36]	; 0x24
 8002e44:	e002      	b.n	8002e4c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 f969 	bl	800311e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d024      	beq.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 f943 	bl	80030f6 <HAL_CAN_TxMailbox2CompleteCallback>
 8002e70:	e016      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d004      	beq.n	8002e86 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	e00c      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d004      	beq.n	8002e9a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e96:	627b      	str	r3, [r7, #36]	; 0x24
 8002e98:	e002      	b.n	8002ea0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f949 	bl	8003132 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ea0:	6a3b      	ldr	r3, [r7, #32]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00c      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 0310 	and.w	r3, r3, #16
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2210      	movs	r2, #16
 8002ec2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002ec4:	6a3b      	ldr	r3, [r7, #32]
 8002ec6:	f003 0304 	and.w	r3, r3, #4
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00b      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2208      	movs	r2, #8
 8002ede:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f930 	bl	8003146 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d009      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0303 	and.w	r3, r3, #3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f7fe f99e 	bl	8001240 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00c      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	f003 0310 	and.w	r3, r3, #16
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f1e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2210      	movs	r2, #16
 8002f26:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002f28:	6a3b      	ldr	r3, [r7, #32]
 8002f2a:	f003 0320 	and.w	r3, r3, #32
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2208      	movs	r2, #8
 8002f42:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f912 	bl	800316e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d009      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d002      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f8f9 	bl	800315a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00b      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2210      	movs	r2, #16
 8002f82:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f8fc 	bl	8003182 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00b      	beq.n	8002fac <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d006      	beq.n	8002fac <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2208      	movs	r2, #8
 8002fa4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f8f5 	bl	8003196 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d07b      	beq.n	80030ae <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d072      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d008      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd6:	f043 0301 	orr.w	r3, r3, #1
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fdc:	6a3b      	ldr	r3, [r7, #32]
 8002fde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff2:	f043 0302 	orr.w	r3, r3, #2
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ff8:	6a3b      	ldr	r3, [r7, #32]
 8002ffa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d008      	beq.n	8003014 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	f043 0304 	orr.w	r3, r3, #4
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800301a:	2b00      	cmp	r3, #0
 800301c:	d043      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003024:	2b00      	cmp	r3, #0
 8003026:	d03e      	beq.n	80030a6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800302e:	2b60      	cmp	r3, #96	; 0x60
 8003030:	d02b      	beq.n	800308a <HAL_CAN_IRQHandler+0x32a>
 8003032:	2b60      	cmp	r3, #96	; 0x60
 8003034:	d82e      	bhi.n	8003094 <HAL_CAN_IRQHandler+0x334>
 8003036:	2b50      	cmp	r3, #80	; 0x50
 8003038:	d022      	beq.n	8003080 <HAL_CAN_IRQHandler+0x320>
 800303a:	2b50      	cmp	r3, #80	; 0x50
 800303c:	d82a      	bhi.n	8003094 <HAL_CAN_IRQHandler+0x334>
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d019      	beq.n	8003076 <HAL_CAN_IRQHandler+0x316>
 8003042:	2b40      	cmp	r3, #64	; 0x40
 8003044:	d826      	bhi.n	8003094 <HAL_CAN_IRQHandler+0x334>
 8003046:	2b30      	cmp	r3, #48	; 0x30
 8003048:	d010      	beq.n	800306c <HAL_CAN_IRQHandler+0x30c>
 800304a:	2b30      	cmp	r3, #48	; 0x30
 800304c:	d822      	bhi.n	8003094 <HAL_CAN_IRQHandler+0x334>
 800304e:	2b10      	cmp	r3, #16
 8003050:	d002      	beq.n	8003058 <HAL_CAN_IRQHandler+0x2f8>
 8003052:	2b20      	cmp	r3, #32
 8003054:	d005      	beq.n	8003062 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003056:	e01d      	b.n	8003094 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305a:	f043 0308 	orr.w	r3, r3, #8
 800305e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003060:	e019      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	f043 0310 	orr.w	r3, r3, #16
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800306a:	e014      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	f043 0320 	orr.w	r3, r3, #32
 8003072:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003074:	e00f      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003078:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800307e:	e00a      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003086:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003088:	e005      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003092:	e000      	b.n	8003096 <HAL_CAN_IRQHandler+0x336>
            break;
 8003094:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80030a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2204      	movs	r2, #4
 80030ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80030ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d008      	beq.n	80030c6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 f872 	bl	80031aa <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80030c6:	bf00      	nop
 80030c8:	3728      	adds	r7, #40	; 0x28
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b083      	sub	sp, #12
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80030d6:	bf00      	nop
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80030ea:	bf00      	nop
 80030ec:	370c      	adds	r7, #12
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b083      	sub	sp, #12
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr

0800311e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800311e:	b480      	push	{r7}
 8003120:	b083      	sub	sp, #12
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003132:	b480      	push	{r7}
 8003134:	b083      	sub	sp, #12
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003162:	bf00      	nop
 8003164:	370c      	adds	r7, #12
 8003166:	46bd      	mov	sp, r7
 8003168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316c:	4770      	bx	lr

0800316e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a8:	4770      	bx	lr

080031aa <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80031be:	b480      	push	{r7}
 80031c0:	b085      	sub	sp, #20
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031d0:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 80031d2:	7bbb      	ldrb	r3, [r7, #14]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d002      	beq.n	80031de <HAL_CAN_ResetError+0x20>
 80031d8:	7bbb      	ldrb	r3, [r7, #14]
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d103      	bne.n	80031e6 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	625a      	str	r2, [r3, #36]	; 0x24
 80031e4:	e007      	b.n	80031f6 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3714      	adds	r7, #20
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003214:	4b0c      	ldr	r3, [pc, #48]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003220:	4013      	ands	r3, r2
 8003222:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800322c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003236:	4a04      	ldr	r2, [pc, #16]	; (8003248 <__NVIC_SetPriorityGrouping+0x44>)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	60d3      	str	r3, [r2, #12]
}
 800323c:	bf00      	nop
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	e000ed00 	.word	0xe000ed00

0800324c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003250:	4b04      	ldr	r3, [pc, #16]	; (8003264 <__NVIC_GetPriorityGrouping+0x18>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	0a1b      	lsrs	r3, r3, #8
 8003256:	f003 0307 	and.w	r3, r3, #7
}
 800325a:	4618      	mov	r0, r3
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr
 8003264:	e000ed00 	.word	0xe000ed00

08003268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	2b00      	cmp	r3, #0
 8003278:	db0b      	blt.n	8003292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327a:	79fb      	ldrb	r3, [r7, #7]
 800327c:	f003 021f 	and.w	r2, r3, #31
 8003280:	4907      	ldr	r1, [pc, #28]	; (80032a0 <__NVIC_EnableIRQ+0x38>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	095b      	lsrs	r3, r3, #5
 8003288:	2001      	movs	r0, #1
 800328a:	fa00 f202 	lsl.w	r2, r0, r2
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	e000e100 	.word	0xe000e100

080032a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	4603      	mov	r3, r0
 80032ac:	6039      	str	r1, [r7, #0]
 80032ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	db0a      	blt.n	80032ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	490c      	ldr	r1, [pc, #48]	; (80032f0 <__NVIC_SetPriority+0x4c>)
 80032be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c2:	0112      	lsls	r2, r2, #4
 80032c4:	b2d2      	uxtb	r2, r2
 80032c6:	440b      	add	r3, r1
 80032c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032cc:	e00a      	b.n	80032e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	4908      	ldr	r1, [pc, #32]	; (80032f4 <__NVIC_SetPriority+0x50>)
 80032d4:	79fb      	ldrb	r3, [r7, #7]
 80032d6:	f003 030f 	and.w	r3, r3, #15
 80032da:	3b04      	subs	r3, #4
 80032dc:	0112      	lsls	r2, r2, #4
 80032de:	b2d2      	uxtb	r2, r2
 80032e0:	440b      	add	r3, r1
 80032e2:	761a      	strb	r2, [r3, #24]
}
 80032e4:	bf00      	nop
 80032e6:	370c      	adds	r7, #12
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr
 80032f0:	e000e100 	.word	0xe000e100
 80032f4:	e000ed00 	.word	0xe000ed00

080032f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f1c3 0307 	rsb	r3, r3, #7
 8003312:	2b04      	cmp	r3, #4
 8003314:	bf28      	it	cs
 8003316:	2304      	movcs	r3, #4
 8003318:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3304      	adds	r3, #4
 800331e:	2b06      	cmp	r3, #6
 8003320:	d902      	bls.n	8003328 <NVIC_EncodePriority+0x30>
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	3b03      	subs	r3, #3
 8003326:	e000      	b.n	800332a <NVIC_EncodePriority+0x32>
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	f04f 32ff 	mov.w	r2, #4294967295
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	401a      	ands	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003340:	f04f 31ff 	mov.w	r1, #4294967295
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	fa01 f303 	lsl.w	r3, r1, r3
 800334a:	43d9      	mvns	r1, r3
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003350:	4313      	orrs	r3, r2
         );
}
 8003352:	4618      	mov	r0, r3
 8003354:	3724      	adds	r7, #36	; 0x24
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
	...

08003360 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	3b01      	subs	r3, #1
 800336c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003370:	d301      	bcc.n	8003376 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003372:	2301      	movs	r3, #1
 8003374:	e00f      	b.n	8003396 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <SysTick_Config+0x40>)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	3b01      	subs	r3, #1
 800337c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800337e:	210f      	movs	r1, #15
 8003380:	f04f 30ff 	mov.w	r0, #4294967295
 8003384:	f7ff ff8e 	bl	80032a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003388:	4b05      	ldr	r3, [pc, #20]	; (80033a0 <SysTick_Config+0x40>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800338e:	4b04      	ldr	r3, [pc, #16]	; (80033a0 <SysTick_Config+0x40>)
 8003390:	2207      	movs	r2, #7
 8003392:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	e000e010 	.word	0xe000e010

080033a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f7ff ff29 	bl	8003204 <__NVIC_SetPriorityGrouping>
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}

080033ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b086      	sub	sp, #24
 80033be:	af00      	add	r7, sp, #0
 80033c0:	4603      	mov	r3, r0
 80033c2:	60b9      	str	r1, [r7, #8]
 80033c4:	607a      	str	r2, [r7, #4]
 80033c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033cc:	f7ff ff3e 	bl	800324c <__NVIC_GetPriorityGrouping>
 80033d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	68b9      	ldr	r1, [r7, #8]
 80033d6:	6978      	ldr	r0, [r7, #20]
 80033d8:	f7ff ff8e 	bl	80032f8 <NVIC_EncodePriority>
 80033dc:	4602      	mov	r2, r0
 80033de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff ff5d 	bl	80032a4 <__NVIC_SetPriority>
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b082      	sub	sp, #8
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	4603      	mov	r3, r0
 80033fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff ff31 	bl	8003268 <__NVIC_EnableIRQ>
}
 8003406:	bf00      	nop
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f7ff ffa2 	bl	8003360 <SysTick_Config>
 800341c:	4603      	mov	r3, r0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e014      	b.n	8003462 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	791b      	ldrb	r3, [r3, #4]
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d105      	bne.n	800344e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7fd fd81 	bl	8000f50 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2202      	movs	r2, #2
 8003452:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2201      	movs	r2, #1
 800345e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800346a:	b480      	push	{r7}
 800346c:	b083      	sub	sp, #12
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
 8003472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	795b      	ldrb	r3, [r3, #5]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d101      	bne.n	8003480 <HAL_DAC_Start+0x16>
 800347c:	2302      	movs	r3, #2
 800347e:	e040      	b.n	8003502 <HAL_DAC_Start+0x98>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2202      	movs	r2, #2
 800348a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6819      	ldr	r1, [r3, #0]
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2201      	movs	r2, #1
 800349a:	409a      	lsls	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10f      	bne.n	80034ca <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80034b4:	2b3c      	cmp	r3, #60	; 0x3c
 80034b6:	d11d      	bne.n	80034f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	605a      	str	r2, [r3, #4]
 80034c8:	e014      	b.n	80034f4 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	f003 0310 	and.w	r3, r3, #16
 80034da:	213c      	movs	r1, #60	; 0x3c
 80034dc:	fa01 f303 	lsl.w	r3, r1, r3
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d107      	bne.n	80034f4 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0202 	orr.w	r2, r2, #2
 80034f2:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr

0800350e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800350e:	b480      	push	{r7}
 8003510:	b087      	sub	sp, #28
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d105      	bne.n	8003538 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3308      	adds	r3, #8
 8003534:	617b      	str	r3, [r7, #20]
 8003536:	e004      	b.n	8003542 <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4413      	add	r3, r2
 800353e:	3314      	adds	r3, #20
 8003540:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	461a      	mov	r2, r3
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	371c      	adds	r7, #28
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003558:	b480      	push	{r7}
 800355a:	b087      	sub	sp, #28
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	795b      	ldrb	r3, [r3, #5]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_DAC_ConfigChannel+0x18>
 800356c:	2302      	movs	r3, #2
 800356e:	e03c      	b.n	80035ea <HAL_DAC_ConfigChannel+0x92>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2202      	movs	r2, #2
 800357a:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f003 0310 	and.w	r3, r3, #16
 800358a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43db      	mvns	r3, r3
 8003594:	697a      	ldr	r2, [r7, #20]
 8003596:	4013      	ands	r3, r2
 8003598:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	693a      	ldr	r2, [r7, #16]
 80035ae:	fa02 f303 	lsl.w	r3, r2, r3
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	697a      	ldr	r2, [r7, #20]
 80035be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6819      	ldr	r1, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f003 0310 	and.w	r3, r3, #16
 80035cc:	22c0      	movs	r2, #192	; 0xc0
 80035ce:	fa02 f303 	lsl.w	r3, r2, r3
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	400a      	ands	r2, r1
 80035da:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2201      	movs	r2, #1
 80035e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80035e8:	2300      	movs	r3, #0
}
 80035ea:	4618      	mov	r0, r3
 80035ec:	371c      	adds	r7, #28
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b084      	sub	sp, #16
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003602:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7fe ff00 	bl	8002408 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b02      	cmp	r3, #2
 8003614:	d008      	beq.n	8003628 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2280      	movs	r2, #128	; 0x80
 800361a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e052      	b.n	80036ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0216 	bic.w	r2, r2, #22
 8003636:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695a      	ldr	r2, [r3, #20]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003646:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364c:	2b00      	cmp	r3, #0
 800364e:	d103      	bne.n	8003658 <HAL_DMA_Abort+0x62>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003654:	2b00      	cmp	r3, #0
 8003656:	d007      	beq.n	8003668 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0208 	bic.w	r2, r2, #8
 8003666:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003678:	e013      	b.n	80036a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367a:	f7fe fec5 	bl	8002408 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b05      	cmp	r3, #5
 8003686:	d90c      	bls.n	80036a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e015      	b.n	80036ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d1e4      	bne.n	800367a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b4:	223f      	movs	r2, #63	; 0x3f
 80036b6:	409a      	lsls	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b083      	sub	sp, #12
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d004      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e00c      	b.n	800370e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2205      	movs	r2, #5
 80036f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0201 	bic.w	r2, r2, #1
 800370a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800371c:	b480      	push	{r7}
 800371e:	b089      	sub	sp, #36	; 0x24
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800372a:	2300      	movs	r3, #0
 800372c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	e165      	b.n	8003a04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003738:	2201      	movs	r2, #1
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	697a      	ldr	r2, [r7, #20]
 8003748:	4013      	ands	r3, r2
 800374a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800374c:	693a      	ldr	r2, [r7, #16]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	429a      	cmp	r2, r3
 8003752:	f040 8154 	bne.w	80039fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b01      	cmp	r3, #1
 8003760:	d005      	beq.n	800376e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800376a:	2b02      	cmp	r3, #2
 800376c:	d130      	bne.n	80037d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	005b      	lsls	r3, r3, #1
 8003778:	2203      	movs	r2, #3
 800377a:	fa02 f303 	lsl.w	r3, r2, r3
 800377e:	43db      	mvns	r3, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4013      	ands	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	68da      	ldr	r2, [r3, #12]
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fa02 f303 	lsl.w	r3, r2, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a4:	2201      	movs	r2, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	43db      	mvns	r3, r3
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	4013      	ands	r3, r2
 80037b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	091b      	lsrs	r3, r3, #4
 80037ba:	f003 0201 	and.w	r2, r3, #1
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	f003 0303 	and.w	r3, r3, #3
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d017      	beq.n	800380c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	2203      	movs	r2, #3
 80037e8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ec:	43db      	mvns	r3, r3
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	4013      	ands	r3, r2
 80037f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	689a      	ldr	r2, [r3, #8]
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	005b      	lsls	r3, r3, #1
 80037fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	4313      	orrs	r3, r2
 8003804:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f003 0303 	and.w	r3, r3, #3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d123      	bne.n	8003860 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	08da      	lsrs	r2, r3, #3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	3208      	adds	r2, #8
 8003820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003824:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003826:	69fb      	ldr	r3, [r7, #28]
 8003828:	f003 0307 	and.w	r3, r3, #7
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	220f      	movs	r2, #15
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	43db      	mvns	r3, r3
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	4013      	ands	r3, r2
 800383a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	691a      	ldr	r2, [r3, #16]
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	f003 0307 	and.w	r3, r3, #7
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4313      	orrs	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	08da      	lsrs	r2, r3, #3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	3208      	adds	r2, #8
 800385a:	69b9      	ldr	r1, [r7, #24]
 800385c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	2203      	movs	r2, #3
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43db      	mvns	r3, r3
 8003872:	69ba      	ldr	r2, [r7, #24]
 8003874:	4013      	ands	r3, r2
 8003876:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f003 0203 	and.w	r2, r3, #3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fa02 f303 	lsl.w	r3, r2, r3
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800389c:	2b00      	cmp	r3, #0
 800389e:	f000 80ae 	beq.w	80039fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a2:	2300      	movs	r3, #0
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	4b5d      	ldr	r3, [pc, #372]	; (8003a1c <HAL_GPIO_Init+0x300>)
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	4a5c      	ldr	r2, [pc, #368]	; (8003a1c <HAL_GPIO_Init+0x300>)
 80038ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b0:	6453      	str	r3, [r2, #68]	; 0x44
 80038b2:	4b5a      	ldr	r3, [pc, #360]	; (8003a1c <HAL_GPIO_Init+0x300>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038be:	4a58      	ldr	r2, [pc, #352]	; (8003a20 <HAL_GPIO_Init+0x304>)
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	089b      	lsrs	r3, r3, #2
 80038c4:	3302      	adds	r3, #2
 80038c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	f003 0303 	and.w	r3, r3, #3
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	220f      	movs	r2, #15
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	43db      	mvns	r3, r3
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	4013      	ands	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_GPIO_Init+0x308>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d025      	beq.n	8003936 <HAL_GPIO_Init+0x21a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <HAL_GPIO_Init+0x30c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d01f      	beq.n	8003932 <HAL_GPIO_Init+0x216>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <HAL_GPIO_Init+0x310>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d019      	beq.n	800392e <HAL_GPIO_Init+0x212>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <HAL_GPIO_Init+0x314>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d013      	beq.n	800392a <HAL_GPIO_Init+0x20e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <HAL_GPIO_Init+0x318>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d00d      	beq.n	8003926 <HAL_GPIO_Init+0x20a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4a      	ldr	r2, [pc, #296]	; (8003a38 <HAL_GPIO_Init+0x31c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d007      	beq.n	8003922 <HAL_GPIO_Init+0x206>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a49      	ldr	r2, [pc, #292]	; (8003a3c <HAL_GPIO_Init+0x320>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d101      	bne.n	800391e <HAL_GPIO_Init+0x202>
 800391a:	2306      	movs	r3, #6
 800391c:	e00c      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 800391e:	2307      	movs	r3, #7
 8003920:	e00a      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 8003922:	2305      	movs	r3, #5
 8003924:	e008      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 8003926:	2304      	movs	r3, #4
 8003928:	e006      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 800392a:	2303      	movs	r3, #3
 800392c:	e004      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 800392e:	2302      	movs	r3, #2
 8003930:	e002      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_GPIO_Init+0x21c>
 8003936:	2300      	movs	r3, #0
 8003938:	69fa      	ldr	r2, [r7, #28]
 800393a:	f002 0203 	and.w	r2, r2, #3
 800393e:	0092      	lsls	r2, r2, #2
 8003940:	4093      	lsls	r3, r2
 8003942:	69ba      	ldr	r2, [r7, #24]
 8003944:	4313      	orrs	r3, r2
 8003946:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003948:	4935      	ldr	r1, [pc, #212]	; (8003a20 <HAL_GPIO_Init+0x304>)
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_GPIO_Init+0x324>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	43db      	mvns	r3, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4013      	ands	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d003      	beq.n	800397a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	4313      	orrs	r3, r2
 8003978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800397a:	4a31      	ldr	r2, [pc, #196]	; (8003a40 <HAL_GPIO_Init+0x324>)
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003980:	4b2f      	ldr	r3, [pc, #188]	; (8003a40 <HAL_GPIO_Init+0x324>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d003      	beq.n	80039a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039a4:	4a26      	ldr	r2, [pc, #152]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039aa:	4b25      	ldr	r3, [pc, #148]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ce:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039f8:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_GPIO_Init+0x324>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	3301      	adds	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	2b0f      	cmp	r3, #15
 8003a08:	f67f ae96 	bls.w	8003738 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
 8003a10:	3724      	adds	r7, #36	; 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	40023800 	.word	0x40023800
 8003a20:	40013800 	.word	0x40013800
 8003a24:	40020000 	.word	0x40020000
 8003a28:	40020400 	.word	0x40020400
 8003a2c:	40020800 	.word	0x40020800
 8003a30:	40020c00 	.word	0x40020c00
 8003a34:	40021000 	.word	0x40021000
 8003a38:	40021400 	.word	0x40021400
 8003a3c:	40021800 	.word	0x40021800
 8003a40:	40013c00 	.word	0x40013c00

08003a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	887b      	ldrh	r3, [r7, #2]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d002      	beq.n	8003a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e001      	b.n	8003a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
 8003a80:	4613      	mov	r3, r2
 8003a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a90:	e003      	b.n	8003a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	041a      	lsls	r2, r3, #16
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	619a      	str	r2, [r3, #24]
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b085      	sub	sp, #20
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ab8:	887a      	ldrh	r2, [r7, #2]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	041a      	lsls	r2, r3, #16
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	43d9      	mvns	r1, r3
 8003ac4:	887b      	ldrh	r3, [r7, #2]
 8003ac6:	400b      	ands	r3, r1
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	619a      	str	r2, [r3, #24]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr
	...

08003adc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ae6:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	88fb      	ldrh	r3, [r7, #6]
 8003aec:	4013      	ands	r3, r2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d006      	beq.n	8003b00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003af4:	88fb      	ldrh	r3, [r7, #6]
 8003af6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003af8:	88fb      	ldrh	r3, [r7, #6]
 8003afa:	4618      	mov	r0, r3
 8003afc:	f7fd fb62 	bl	80011c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b16:	2300      	movs	r3, #0
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4b20      	ldr	r3, [pc, #128]	; (8003b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1e:	4a1f      	ldr	r2, [pc, #124]	; (8003b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b24:	6413      	str	r3, [r2, #64]	; 0x40
 8003b26:	4b1d      	ldr	r3, [pc, #116]	; (8003b9c <HAL_PWREx_EnableOverDrive+0x90>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b2e:	603b      	str	r3, [r7, #0]
 8003b30:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b34:	2201      	movs	r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b38:	f7fe fc66 	bl	8002408 <HAL_GetTick>
 8003b3c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b3e:	e009      	b.n	8003b54 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b40:	f7fe fc62 	bl	8002408 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b4e:	d901      	bls.n	8003b54 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e01f      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b54:	4b13      	ldr	r3, [pc, #76]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b60:	d1ee      	bne.n	8003b40 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b64:	2201      	movs	r2, #1
 8003b66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b68:	f7fe fc4e 	bl	8002408 <HAL_GetTick>
 8003b6c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b6e:	e009      	b.n	8003b84 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b70:	f7fe fc4a 	bl	8002408 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7e:	d901      	bls.n	8003b84 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e007      	b.n	8003b94 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b84:	4b07      	ldr	r3, [pc, #28]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b90:	d1ee      	bne.n	8003b70 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3708      	adds	r7, #8
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	420e0040 	.word	0x420e0040
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	420e0044 	.word	0x420e0044

08003bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0cc      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003bc0:	4b68      	ldr	r3, [pc, #416]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 030f 	and.w	r3, r3, #15
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d90c      	bls.n	8003be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bce:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd0:	683a      	ldr	r2, [r7, #0]
 8003bd2:	b2d2      	uxtb	r2, r2
 8003bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd6:	4b63      	ldr	r3, [pc, #396]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	683a      	ldr	r2, [r7, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d001      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0b8      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d020      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d005      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c00:	4b59      	ldr	r3, [pc, #356]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	4a58      	ldr	r2, [pc, #352]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c18:	4b53      	ldr	r3, [pc, #332]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a52      	ldr	r2, [pc, #328]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c24:	4b50      	ldr	r3, [pc, #320]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	494d      	ldr	r1, [pc, #308]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d044      	beq.n	8003ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d107      	bne.n	8003c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4a:	4b47      	ldr	r3, [pc, #284]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d119      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e07f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d003      	beq.n	8003c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003c66:	2b03      	cmp	r3, #3
 8003c68:	d107      	bne.n	8003c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c6a:	4b3f      	ldr	r3, [pc, #252]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d109      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c76:	2301      	movs	r3, #1
 8003c78:	e06f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c7a:	4b3b      	ldr	r3, [pc, #236]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 0302 	and.w	r3, r3, #2
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e067      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c8a:	4b37      	ldr	r3, [pc, #220]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	f023 0203 	bic.w	r2, r3, #3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	4934      	ldr	r1, [pc, #208]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c9c:	f7fe fbb4 	bl	8002408 <HAL_GetTick>
 8003ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ca2:	e00a      	b.n	8003cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ca4:	f7fe fbb0 	bl	8002408 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e04f      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cba:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 020c 	and.w	r2, r3, #12
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d1eb      	bne.n	8003ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d20c      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b20      	ldr	r3, [pc, #128]	; (8003d64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e032      	b.n	8003d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d00:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d02:	689b      	ldr	r3, [r3, #8]
 8003d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4916      	ldr	r1, [pc, #88]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0308 	and.w	r3, r3, #8
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d009      	beq.n	8003d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d1e:	4b12      	ldr	r3, [pc, #72]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d20:	689b      	ldr	r3, [r3, #8]
 8003d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	490e      	ldr	r1, [pc, #56]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d32:	f000 f855 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003d36:	4602      	mov	r2, r0
 8003d38:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	091b      	lsrs	r3, r3, #4
 8003d3e:	f003 030f 	and.w	r3, r3, #15
 8003d42:	490a      	ldr	r1, [pc, #40]	; (8003d6c <HAL_RCC_ClockConfig+0x1c0>)
 8003d44:	5ccb      	ldrb	r3, [r1, r3]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a09      	ldr	r2, [pc, #36]	; (8003d70 <HAL_RCC_ClockConfig+0x1c4>)
 8003d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_RCC_ClockConfig+0x1c8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe fb14 	bl	8002380 <HAL_InitTick>

  return HAL_OK;
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	40023c00 	.word	0x40023c00
 8003d68:	40023800 	.word	0x40023800
 8003d6c:	08008284 	.word	0x08008284
 8003d70:	20000008 	.word	0x20000008
 8003d74:	2000000c 	.word	0x2000000c

08003d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d7c:	4b03      	ldr	r3, [pc, #12]	; (8003d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
}
 8003d80:	4618      	mov	r0, r3
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	20000008 	.word	0x20000008

08003d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003d94:	f7ff fff0 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	4b05      	ldr	r3, [pc, #20]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	0a9b      	lsrs	r3, r3, #10
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	4903      	ldr	r1, [pc, #12]	; (8003db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003da6:	5ccb      	ldrb	r3, [r1, r3]
 8003da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40023800 	.word	0x40023800
 8003db4:	08008294 	.word	0x08008294

08003db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003dbc:	f7ff ffdc 	bl	8003d78 <HAL_RCC_GetHCLKFreq>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	4b05      	ldr	r3, [pc, #20]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	0b5b      	lsrs	r3, r3, #13
 8003dc8:	f003 0307 	and.w	r3, r3, #7
 8003dcc:	4903      	ldr	r1, [pc, #12]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dce:	5ccb      	ldrb	r3, [r1, r3]
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40023800 	.word	0x40023800
 8003ddc:	08008294 	.word	0x08008294

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003de4:	b0ae      	sub	sp, #184	; 0xb8
 8003de6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003df4:	2300      	movs	r3, #0
 8003df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e06:	4bcb      	ldr	r3, [pc, #812]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b0c      	cmp	r3, #12
 8003e10:	f200 8206 	bhi.w	8004220 <HAL_RCC_GetSysClockFreq+0x440>
 8003e14:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1a:	bf00      	nop
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08004221 	.word	0x08004221
 8003e24:	08004221 	.word	0x08004221
 8003e28:	08004221 	.word	0x08004221
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08004221 	.word	0x08004221
 8003e34:	08004221 	.word	0x08004221
 8003e38:	08004221 	.word	0x08004221
 8003e3c:	08003e61 	.word	0x08003e61
 8003e40:	08004221 	.word	0x08004221
 8003e44:	08004221 	.word	0x08004221
 8003e48:	08004221 	.word	0x08004221
 8003e4c:	08004051 	.word	0x08004051
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e50:	4bb9      	ldr	r3, [pc, #740]	; (8004138 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003e56:	e1e7      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e58:	4bb8      	ldr	r3, [pc, #736]	; (800413c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e5e:	e1e3      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e60:	4bb4      	ldr	r3, [pc, #720]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e6c:	4bb1      	ldr	r3, [pc, #708]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d071      	beq.n	8003f5c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e78:	4bae      	ldr	r3, [pc, #696]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003e88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e94:	2300      	movs	r3, #0
 8003e96:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003e9e:	4622      	mov	r2, r4
 8003ea0:	462b      	mov	r3, r5
 8003ea2:	f04f 0000 	mov.w	r0, #0
 8003ea6:	f04f 0100 	mov.w	r1, #0
 8003eaa:	0159      	lsls	r1, r3, #5
 8003eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eb0:	0150      	lsls	r0, r2, #5
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	460b      	mov	r3, r1
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	1a51      	subs	r1, r2, r1
 8003eba:	6439      	str	r1, [r7, #64]	; 0x40
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8003ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ec4:	f04f 0200 	mov.w	r2, #0
 8003ec8:	f04f 0300 	mov.w	r3, #0
 8003ecc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ed0:	4649      	mov	r1, r9
 8003ed2:	018b      	lsls	r3, r1, #6
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eda:	4641      	mov	r1, r8
 8003edc:	018a      	lsls	r2, r1, #6
 8003ede:	4641      	mov	r1, r8
 8003ee0:	1a51      	subs	r1, r2, r1
 8003ee2:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	eb63 0301 	sbc.w	r3, r3, r1
 8003eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003ef8:	4649      	mov	r1, r9
 8003efa:	00cb      	lsls	r3, r1, #3
 8003efc:	4641      	mov	r1, r8
 8003efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f02:	4641      	mov	r1, r8
 8003f04:	00ca      	lsls	r2, r1, #3
 8003f06:	4610      	mov	r0, r2
 8003f08:	4619      	mov	r1, r3
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	4622      	mov	r2, r4
 8003f0e:	189b      	adds	r3, r3, r2
 8003f10:	633b      	str	r3, [r7, #48]	; 0x30
 8003f12:	462b      	mov	r3, r5
 8003f14:	460a      	mov	r2, r1
 8003f16:	eb42 0303 	adc.w	r3, r2, r3
 8003f1a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f28:	4629      	mov	r1, r5
 8003f2a:	024b      	lsls	r3, r1, #9
 8003f2c:	4621      	mov	r1, r4
 8003f2e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f32:	4621      	mov	r1, r4
 8003f34:	024a      	lsls	r2, r1, #9
 8003f36:	4610      	mov	r0, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003f44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003f48:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003f4c:	f7fc fd9e 	bl	8000a8c <__aeabi_uldivmod>
 8003f50:	4602      	mov	r2, r0
 8003f52:	460b      	mov	r3, r1
 8003f54:	4613      	mov	r3, r2
 8003f56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f5a:	e067      	b.n	800402c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f5c:	4b75      	ldr	r3, [pc, #468]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	2200      	movs	r2, #0
 8003f64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f68:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003f6c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f74:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f76:	2300      	movs	r3, #0
 8003f78:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f7a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003f7e:	4622      	mov	r2, r4
 8003f80:	462b      	mov	r3, r5
 8003f82:	f04f 0000 	mov.w	r0, #0
 8003f86:	f04f 0100 	mov.w	r1, #0
 8003f8a:	0159      	lsls	r1, r3, #5
 8003f8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f90:	0150      	lsls	r0, r2, #5
 8003f92:	4602      	mov	r2, r0
 8003f94:	460b      	mov	r3, r1
 8003f96:	4621      	mov	r1, r4
 8003f98:	1a51      	subs	r1, r2, r1
 8003f9a:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f9c:	4629      	mov	r1, r5
 8003f9e:	eb63 0301 	sbc.w	r3, r3, r1
 8003fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fa4:	f04f 0200 	mov.w	r2, #0
 8003fa8:	f04f 0300 	mov.w	r3, #0
 8003fac:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003fb0:	4649      	mov	r1, r9
 8003fb2:	018b      	lsls	r3, r1, #6
 8003fb4:	4641      	mov	r1, r8
 8003fb6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fba:	4641      	mov	r1, r8
 8003fbc:	018a      	lsls	r2, r1, #6
 8003fbe:	4641      	mov	r1, r8
 8003fc0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fc4:	4649      	mov	r1, r9
 8003fc6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fca:	f04f 0200 	mov.w	r2, #0
 8003fce:	f04f 0300 	mov.w	r3, #0
 8003fd2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fd6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fda:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fde:	4692      	mov	sl, r2
 8003fe0:	469b      	mov	fp, r3
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	eb1a 0303 	adds.w	r3, sl, r3
 8003fe8:	623b      	str	r3, [r7, #32]
 8003fea:	462b      	mov	r3, r5
 8003fec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff2:	f04f 0200 	mov.w	r2, #0
 8003ff6:	f04f 0300 	mov.w	r3, #0
 8003ffa:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ffe:	4629      	mov	r1, r5
 8004000:	028b      	lsls	r3, r1, #10
 8004002:	4621      	mov	r1, r4
 8004004:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004008:	4621      	mov	r1, r4
 800400a:	028a      	lsls	r2, r1, #10
 800400c:	4610      	mov	r0, r2
 800400e:	4619      	mov	r1, r3
 8004010:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004014:	2200      	movs	r2, #0
 8004016:	673b      	str	r3, [r7, #112]	; 0x70
 8004018:	677a      	str	r2, [r7, #116]	; 0x74
 800401a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800401e:	f7fc fd35 	bl	8000a8c <__aeabi_uldivmod>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4613      	mov	r3, r2
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800402c:	4b41      	ldr	r3, [pc, #260]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	0c1b      	lsrs	r3, r3, #16
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	3301      	adds	r3, #1
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800403e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004042:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004046:	fbb2 f3f3 	udiv	r3, r2, r3
 800404a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800404e:	e0eb      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004050:	4b38      	ldr	r3, [pc, #224]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800405c:	4b35      	ldr	r3, [pc, #212]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d06b      	beq.n	8004140 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <HAL_RCC_GetSysClockFreq+0x354>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	099b      	lsrs	r3, r3, #6
 800406e:	2200      	movs	r2, #0
 8004070:	66bb      	str	r3, [r7, #104]	; 0x68
 8004072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004076:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407a:	663b      	str	r3, [r7, #96]	; 0x60
 800407c:	2300      	movs	r3, #0
 800407e:	667b      	str	r3, [r7, #100]	; 0x64
 8004080:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8004084:	4622      	mov	r2, r4
 8004086:	462b      	mov	r3, r5
 8004088:	f04f 0000 	mov.w	r0, #0
 800408c:	f04f 0100 	mov.w	r1, #0
 8004090:	0159      	lsls	r1, r3, #5
 8004092:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004096:	0150      	lsls	r0, r2, #5
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4621      	mov	r1, r4
 800409e:	1a51      	subs	r1, r2, r1
 80040a0:	61b9      	str	r1, [r7, #24]
 80040a2:	4629      	mov	r1, r5
 80040a4:	eb63 0301 	sbc.w	r3, r3, r1
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	f04f 0300 	mov.w	r3, #0
 80040b2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80040b6:	4659      	mov	r1, fp
 80040b8:	018b      	lsls	r3, r1, #6
 80040ba:	4651      	mov	r1, sl
 80040bc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c0:	4651      	mov	r1, sl
 80040c2:	018a      	lsls	r2, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ebb2 0801 	subs.w	r8, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0901 	sbc.w	r9, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040dc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e4:	4690      	mov	r8, r2
 80040e6:	4699      	mov	r9, r3
 80040e8:	4623      	mov	r3, r4
 80040ea:	eb18 0303 	adds.w	r3, r8, r3
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	462b      	mov	r3, r5
 80040f2:	eb49 0303 	adc.w	r3, r9, r3
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004104:	4629      	mov	r1, r5
 8004106:	024b      	lsls	r3, r1, #9
 8004108:	4621      	mov	r1, r4
 800410a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800410e:	4621      	mov	r1, r4
 8004110:	024a      	lsls	r2, r1, #9
 8004112:	4610      	mov	r0, r2
 8004114:	4619      	mov	r1, r3
 8004116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800411a:	2200      	movs	r2, #0
 800411c:	65bb      	str	r3, [r7, #88]	; 0x58
 800411e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004120:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004124:	f7fc fcb2 	bl	8000a8c <__aeabi_uldivmod>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4613      	mov	r3, r2
 800412e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004132:	e065      	b.n	8004200 <HAL_RCC_GetSysClockFreq+0x420>
 8004134:	40023800 	.word	0x40023800
 8004138:	00f42400 	.word	0x00f42400
 800413c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004140:	4b3d      	ldr	r3, [pc, #244]	; (8004238 <HAL_RCC_GetSysClockFreq+0x458>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	099b      	lsrs	r3, r3, #6
 8004146:	2200      	movs	r2, #0
 8004148:	4618      	mov	r0, r3
 800414a:	4611      	mov	r1, r2
 800414c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004150:	653b      	str	r3, [r7, #80]	; 0x50
 8004152:	2300      	movs	r3, #0
 8004154:	657b      	str	r3, [r7, #84]	; 0x54
 8004156:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800415a:	4642      	mov	r2, r8
 800415c:	464b      	mov	r3, r9
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4641      	mov	r1, r8
 8004174:	1a51      	subs	r1, r2, r1
 8004176:	60b9      	str	r1, [r7, #8]
 8004178:	4649      	mov	r1, r9
 800417a:	eb63 0301 	sbc.w	r3, r3, r1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800418c:	4659      	mov	r1, fp
 800418e:	018b      	lsls	r3, r1, #6
 8004190:	4651      	mov	r1, sl
 8004192:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004196:	4651      	mov	r1, sl
 8004198:	018a      	lsls	r2, r1, #6
 800419a:	4651      	mov	r1, sl
 800419c:	1a54      	subs	r4, r2, r1
 800419e:	4659      	mov	r1, fp
 80041a0:	eb63 0501 	sbc.w	r5, r3, r1
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	00eb      	lsls	r3, r5, #3
 80041ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041b2:	00e2      	lsls	r2, r4, #3
 80041b4:	4614      	mov	r4, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4643      	mov	r3, r8
 80041ba:	18e3      	adds	r3, r4, r3
 80041bc:	603b      	str	r3, [r7, #0]
 80041be:	464b      	mov	r3, r9
 80041c0:	eb45 0303 	adc.w	r3, r5, r3
 80041c4:	607b      	str	r3, [r7, #4]
 80041c6:	f04f 0200 	mov.w	r2, #0
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041d2:	4629      	mov	r1, r5
 80041d4:	028b      	lsls	r3, r1, #10
 80041d6:	4621      	mov	r1, r4
 80041d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041dc:	4621      	mov	r1, r4
 80041de:	028a      	lsls	r2, r1, #10
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80041e8:	2200      	movs	r2, #0
 80041ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80041ec:	64fa      	str	r2, [r7, #76]	; 0x4c
 80041ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041f2:	f7fc fc4b 	bl	8000a8c <__aeabi_uldivmod>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4613      	mov	r3, r2
 80041fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_RCC_GetSysClockFreq+0x458>)
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	0f1b      	lsrs	r3, r3, #28
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800420e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004216:	fbb2 f3f3 	udiv	r3, r2, r3
 800421a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800421e:	e003      	b.n	8004228 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004220:	4b06      	ldr	r3, [pc, #24]	; (800423c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004222:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004226:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004228:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800422c:	4618      	mov	r0, r3
 800422e:	37b8      	adds	r7, #184	; 0xb8
 8004230:	46bd      	mov	sp, r7
 8004232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004236:	bf00      	nop
 8004238:	40023800 	.word	0x40023800
 800423c:	00f42400 	.word	0x00f42400

08004240 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b086      	sub	sp, #24
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e28d      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0301 	and.w	r3, r3, #1
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8083 	beq.w	8004366 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004260:	4b94      	ldr	r3, [pc, #592]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 030c 	and.w	r3, r3, #12
 8004268:	2b04      	cmp	r3, #4
 800426a:	d019      	beq.n	80042a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800426c:	4b91      	ldr	r3, [pc, #580]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004274:	2b08      	cmp	r3, #8
 8004276:	d106      	bne.n	8004286 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004278:	4b8e      	ldr	r3, [pc, #568]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004280:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004284:	d00c      	beq.n	80042a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004286:	4b8b      	ldr	r3, [pc, #556]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800428e:	2b0c      	cmp	r3, #12
 8004290:	d112      	bne.n	80042b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004292:	4b88      	ldr	r3, [pc, #544]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800429e:	d10b      	bne.n	80042b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042a0:	4b84      	ldr	r3, [pc, #528]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d05b      	beq.n	8004364 <HAL_RCC_OscConfig+0x124>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d157      	bne.n	8004364 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e25a      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042c0:	d106      	bne.n	80042d0 <HAL_RCC_OscConfig+0x90>
 80042c2:	4b7c      	ldr	r3, [pc, #496]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a7b      	ldr	r2, [pc, #492]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042cc:	6013      	str	r3, [r2, #0]
 80042ce:	e01d      	b.n	800430c <HAL_RCC_OscConfig+0xcc>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042d8:	d10c      	bne.n	80042f4 <HAL_RCC_OscConfig+0xb4>
 80042da:	4b76      	ldr	r3, [pc, #472]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a75      	ldr	r2, [pc, #468]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	4b73      	ldr	r3, [pc, #460]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a72      	ldr	r2, [pc, #456]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f0:	6013      	str	r3, [r2, #0]
 80042f2:	e00b      	b.n	800430c <HAL_RCC_OscConfig+0xcc>
 80042f4:	4b6f      	ldr	r3, [pc, #444]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a6e      	ldr	r2, [pc, #440]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80042fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042fe:	6013      	str	r3, [r2, #0]
 8004300:	4b6c      	ldr	r3, [pc, #432]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a6b      	ldr	r2, [pc, #428]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d013      	beq.n	800433c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7fe f878 	bl	8002408 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800431c:	f7fe f874 	bl	8002408 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b64      	cmp	r3, #100	; 0x64
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e21f      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	4b61      	ldr	r3, [pc, #388]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d0f0      	beq.n	800431c <HAL_RCC_OscConfig+0xdc>
 800433a:	e014      	b.n	8004366 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7fe f864 	bl	8002408 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004344:	f7fe f860 	bl	8002408 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b64      	cmp	r3, #100	; 0x64
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e20b      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	4b57      	ldr	r3, [pc, #348]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x104>
 8004362:	e000      	b.n	8004366 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d06f      	beq.n	8004452 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004372:	4b50      	ldr	r3, [pc, #320]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	f003 030c 	and.w	r3, r3, #12
 800437a:	2b00      	cmp	r3, #0
 800437c:	d017      	beq.n	80043ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800437e:	4b4d      	ldr	r3, [pc, #308]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004386:	2b08      	cmp	r3, #8
 8004388:	d105      	bne.n	8004396 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800438a:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b47      	ldr	r3, [pc, #284]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800439e:	2b0c      	cmp	r3, #12
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x186>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1d3      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b3b      	ldr	r3, [pc, #236]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	4937      	ldr	r1, [pc, #220]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e03a      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d020      	beq.n	8004426 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCC_OscConfig+0x278>)
 80043e6:	2201      	movs	r2, #1
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ea:	f7fe f80d 	bl	8002408 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f2:	f7fe f809 	bl	8002408 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e1b4      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004404:	4b2b      	ldr	r3, [pc, #172]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004410:	4b28      	ldr	r3, [pc, #160]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	4925      	ldr	r1, [pc, #148]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004420:	4313      	orrs	r3, r2
 8004422:	600b      	str	r3, [r1, #0]
 8004424:	e015      	b.n	8004452 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x278>)
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800442c:	f7fd ffec 	bl	8002408 <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004432:	e008      	b.n	8004446 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004434:	f7fd ffe8 	bl	8002408 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	2b02      	cmp	r3, #2
 8004440:	d901      	bls.n	8004446 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004442:	2303      	movs	r3, #3
 8004444:	e193      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004446:	4b1b      	ldr	r3, [pc, #108]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d1f0      	bne.n	8004434 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0308 	and.w	r3, r3, #8
 800445a:	2b00      	cmp	r3, #0
 800445c:	d036      	beq.n	80044cc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004466:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_RCC_OscConfig+0x27c>)
 8004468:	2201      	movs	r2, #1
 800446a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800446c:	f7fd ffcc 	bl	8002408 <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004474:	f7fd ffc8 	bl	8002408 <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e173      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004486:	4b0b      	ldr	r3, [pc, #44]	; (80044b4 <HAL_RCC_OscConfig+0x274>)
 8004488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0f0      	beq.n	8004474 <HAL_RCC_OscConfig+0x234>
 8004492:	e01b      	b.n	80044cc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004494:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_OscConfig+0x27c>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800449a:	f7fd ffb5 	bl	8002408 <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a0:	e00e      	b.n	80044c0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044a2:	f7fd ffb1 	bl	8002408 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d907      	bls.n	80044c0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e15c      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
 80044b4:	40023800 	.word	0x40023800
 80044b8:	42470000 	.word	0x42470000
 80044bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c0:	4b8a      	ldr	r3, [pc, #552]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d1ea      	bne.n	80044a2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8097 	beq.w	8004608 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044de:	4b83      	ldr	r3, [pc, #524]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d10f      	bne.n	800450a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	4b7f      	ldr	r3, [pc, #508]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	4a7e      	ldr	r2, [pc, #504]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	6413      	str	r3, [r2, #64]	; 0x40
 80044fa:	4b7c      	ldr	r3, [pc, #496]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b79      	ldr	r3, [pc, #484]	; (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b76      	ldr	r3, [pc, #472]	; (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a75      	ldr	r2, [pc, #468]	; (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fd ff71 	bl	8002408 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fd ff6d 	bl	8002408 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b02      	cmp	r3, #2
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e118      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b6c      	ldr	r3, [pc, #432]	; (80046f0 <HAL_RCC_OscConfig+0x4b0>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x31e>
 8004550:	4b66      	ldr	r3, [pc, #408]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004554:	4a65      	ldr	r2, [pc, #404]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6713      	str	r3, [r2, #112]	; 0x70
 800455c:	e01c      	b.n	8004598 <HAL_RCC_OscConfig+0x358>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2b05      	cmp	r3, #5
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x340>
 8004566:	4b61      	ldr	r3, [pc, #388]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800456a:	4a60      	ldr	r2, [pc, #384]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 800456c:	f043 0304 	orr.w	r3, r3, #4
 8004570:	6713      	str	r3, [r2, #112]	; 0x70
 8004572:	4b5e      	ldr	r3, [pc, #376]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	4a5d      	ldr	r2, [pc, #372]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004578:	f043 0301 	orr.w	r3, r3, #1
 800457c:	6713      	str	r3, [r2, #112]	; 0x70
 800457e:	e00b      	b.n	8004598 <HAL_RCC_OscConfig+0x358>
 8004580:	4b5a      	ldr	r3, [pc, #360]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	4a59      	ldr	r2, [pc, #356]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004586:	f023 0301 	bic.w	r3, r3, #1
 800458a:	6713      	str	r3, [r2, #112]	; 0x70
 800458c:	4b57      	ldr	r3, [pc, #348]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 800458e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004590:	4a56      	ldr	r2, [pc, #344]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004592:	f023 0304 	bic.w	r3, r3, #4
 8004596:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd ff32 	bl	8002408 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a6:	e00a      	b.n	80045be <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a8:	f7fd ff2e 	bl	8002408 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e0d7      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045be:	4b4b      	ldr	r3, [pc, #300]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d0ee      	beq.n	80045a8 <HAL_RCC_OscConfig+0x368>
 80045ca:	e014      	b.n	80045f6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045cc:	f7fd ff1c 	bl	8002408 <HAL_GetTick>
 80045d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045d2:	e00a      	b.n	80045ea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045d4:	f7fd ff18 	bl	8002408 <HAL_GetTick>
 80045d8:	4602      	mov	r2, r0
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e0c1      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ea:	4b40      	ldr	r3, [pc, #256]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1ee      	bne.n	80045d4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045f6:	7dfb      	ldrb	r3, [r7, #23]
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d105      	bne.n	8004608 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045fc:	4b3b      	ldr	r3, [pc, #236]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	4a3a      	ldr	r2, [pc, #232]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004602:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004606:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80ad 	beq.w	800476c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004612:	4b36      	ldr	r3, [pc, #216]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
 800461a:	2b08      	cmp	r3, #8
 800461c:	d060      	beq.n	80046e0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d145      	bne.n	80046b2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004626:	4b33      	ldr	r3, [pc, #204]	; (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462c:	f7fd feec 	bl	8002408 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004634:	f7fd fee8 	bl	8002408 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b02      	cmp	r3, #2
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e093      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004646:	4b29      	ldr	r3, [pc, #164]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	69da      	ldr	r2, [r3, #28]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	431a      	orrs	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	019b      	lsls	r3, r3, #6
 8004662:	431a      	orrs	r2, r3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004668:	085b      	lsrs	r3, r3, #1
 800466a:	3b01      	subs	r3, #1
 800466c:	041b      	lsls	r3, r3, #16
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	061b      	lsls	r3, r3, #24
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467c:	071b      	lsls	r3, r3, #28
 800467e:	491b      	ldr	r1, [pc, #108]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 8004680:	4313      	orrs	r3, r2
 8004682:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004684:	4b1b      	ldr	r3, [pc, #108]	; (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 8004686:	2201      	movs	r2, #1
 8004688:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd febd 	bl	8002408 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd feb9 	bl	8002408 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e064      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046a4:	4b11      	ldr	r3, [pc, #68]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d0f0      	beq.n	8004692 <HAL_RCC_OscConfig+0x452>
 80046b0:	e05c      	b.n	800476c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046b2:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <HAL_RCC_OscConfig+0x4b4>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b8:	f7fd fea6 	bl	8002408 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046c0:	f7fd fea2 	bl	8002408 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e04d      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046d2:	4b06      	ldr	r3, [pc, #24]	; (80046ec <HAL_RCC_OscConfig+0x4ac>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x480>
 80046de:	e045      	b.n	800476c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80046e8:	2301      	movs	r3, #1
 80046ea:	e040      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
 80046ec:	40023800 	.word	0x40023800
 80046f0:	40007000 	.word	0x40007000
 80046f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046f8:	4b1f      	ldr	r3, [pc, #124]	; (8004778 <HAL_RCC_OscConfig+0x538>)
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d030      	beq.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004710:	429a      	cmp	r2, r3
 8004712:	d129      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800471e:	429a      	cmp	r2, r3
 8004720:	d122      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004722:	68fa      	ldr	r2, [r7, #12]
 8004724:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004728:	4013      	ands	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800472e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004730:	4293      	cmp	r3, r2
 8004732:	d119      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	3b01      	subs	r3, #1
 8004742:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004744:	429a      	cmp	r2, r3
 8004746:	d10f      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004752:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d107      	bne.n	8004768 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004762:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004764:	429a      	cmp	r2, r3
 8004766:	d001      	beq.n	800476c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e000      	b.n	800476e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	40023800 	.word	0x40023800

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e041      	b.n	8004812 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fd fc96 	bl	80020d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 fa08 	bl	8004bd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3708      	adds	r7, #8
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800482a:	b2db      	uxtb	r3, r3
 800482c:	2b01      	cmp	r3, #1
 800482e:	d001      	beq.n	8004834 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04e      	b.n	80048d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	68da      	ldr	r2, [r3, #12]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a23      	ldr	r2, [pc, #140]	; (80048e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d022      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800485e:	d01d      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a1f      	ldr	r2, [pc, #124]	; (80048e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a1e      	ldr	r2, [pc, #120]	; (80048e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a1c      	ldr	r2, [pc, #112]	; (80048ec <HAL_TIM_Base_Start_IT+0xd0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a1b      	ldr	r2, [pc, #108]	; (80048f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_Base_Start_IT+0x80>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a18      	ldr	r2, [pc, #96]	; (80048f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d111      	bne.n	80048c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 0307 	and.w	r3, r3, #7
 80048a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2b06      	cmp	r3, #6
 80048ac:	d010      	beq.n	80048d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f042 0201 	orr.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048be:	e007      	b.n	80048d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f042 0201 	orr.w	r2, r2, #1
 80048ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40001800 	.word	0x40001800

080048fc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0201 	bic.w	r2, r2, #1
 8004912:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6a1a      	ldr	r2, [r3, #32]
 800491a:	f241 1311 	movw	r3, #4369	; 0x1111
 800491e:	4013      	ands	r3, r2
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10f      	bne.n	8004944 <HAL_TIM_Base_Stop_IT+0x48>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	f240 4344 	movw	r3, #1092	; 0x444
 800492e:	4013      	ands	r3, r2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d107      	bne.n	8004944 <HAL_TIM_Base_Stop_IT+0x48>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f022 0201 	bic.w	r2, r2, #1
 8004942:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0302 	and.w	r3, r3, #2
 800496c:	2b02      	cmp	r3, #2
 800496e:	d122      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d11b      	bne.n	80049b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f06f 0202 	mvn.w	r2, #2
 8004986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f8f8 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80049a2:	e005      	b.n	80049b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f8ea 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 f8fb 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	691b      	ldr	r3, [r3, #16]
 80049bc:	f003 0304 	and.w	r3, r3, #4
 80049c0:	2b04      	cmp	r3, #4
 80049c2:	d122      	bne.n	8004a0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d11b      	bne.n	8004a0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f06f 0204 	mvn.w	r2, #4
 80049da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d003      	beq.n	80049f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f000 f8ce 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 80049f6:	e005      	b.n	8004a04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8c0 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 f8d1 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f003 0308 	and.w	r3, r3, #8
 8004a14:	2b08      	cmp	r3, #8
 8004a16:	d122      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d11b      	bne.n	8004a5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f06f 0208 	mvn.w	r2, #8
 8004a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2204      	movs	r2, #4
 8004a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f003 0303 	and.w	r3, r3, #3
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f8a4 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004a4a:	e005      	b.n	8004a58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f896 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f8a7 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691b      	ldr	r3, [r3, #16]
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b10      	cmp	r3, #16
 8004a6a:	d122      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d11b      	bne.n	8004ab2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f06f 0210 	mvn.w	r2, #16
 8004a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2208      	movs	r2, #8
 8004a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a98:	6878      	ldr	r0, [r7, #4]
 8004a9a:	f000 f87a 	bl	8004b92 <HAL_TIM_IC_CaptureCallback>
 8004a9e:	e005      	b.n	8004aac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f86c 	bl	8004b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f87d 	bl	8004ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0301 	and.w	r3, r3, #1
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d10e      	bne.n	8004ade <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f06f 0201 	mvn.w	r2, #1
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 f846 	bl	8004b6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d10e      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d107      	bne.n	8004b0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f989 	bl	8004e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d10e      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d107      	bne.n	8004b36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 f842 	bl	8004bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	691b      	ldr	r3, [r3, #16]
 8004b3c:	f003 0320 	and.w	r3, r3, #32
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d10e      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d107      	bne.n	8004b62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f06f 0220 	mvn.w	r2, #32
 8004b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 f953 	bl	8004e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b62:	bf00      	nop
 8004b64:	3708      	adds	r7, #8
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}

08004b6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b6a:	b480      	push	{r7}
 8004b6c:	b083      	sub	sp, #12
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
	...

08004bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a40      	ldr	r2, [pc, #256]	; (8004ce4 <TIM_Base_SetConfig+0x114>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d013      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bee:	d00f      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a3d      	ldr	r2, [pc, #244]	; (8004ce8 <TIM_Base_SetConfig+0x118>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d00b      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a3c      	ldr	r2, [pc, #240]	; (8004cec <TIM_Base_SetConfig+0x11c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <TIM_Base_SetConfig+0x120>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_Base_SetConfig+0x40>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a3a      	ldr	r2, [pc, #232]	; (8004cf4 <TIM_Base_SetConfig+0x124>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d108      	bne.n	8004c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	68fa      	ldr	r2, [r7, #12]
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a2f      	ldr	r2, [pc, #188]	; (8004ce4 <TIM_Base_SetConfig+0x114>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d02b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c30:	d027      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a2c      	ldr	r2, [pc, #176]	; (8004ce8 <TIM_Base_SetConfig+0x118>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d023      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a2b      	ldr	r2, [pc, #172]	; (8004cec <TIM_Base_SetConfig+0x11c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01f      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	4a2a      	ldr	r2, [pc, #168]	; (8004cf0 <TIM_Base_SetConfig+0x120>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d01b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	4a29      	ldr	r2, [pc, #164]	; (8004cf4 <TIM_Base_SetConfig+0x124>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d017      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	4a28      	ldr	r2, [pc, #160]	; (8004cf8 <TIM_Base_SetConfig+0x128>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d013      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	4a27      	ldr	r2, [pc, #156]	; (8004cfc <TIM_Base_SetConfig+0x12c>)
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	d00f      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a26      	ldr	r2, [pc, #152]	; (8004d00 <TIM_Base_SetConfig+0x130>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00b      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a25      	ldr	r2, [pc, #148]	; (8004d04 <TIM_Base_SetConfig+0x134>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d007      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <TIM_Base_SetConfig+0x138>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d003      	beq.n	8004c82 <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a23      	ldr	r2, [pc, #140]	; (8004d0c <TIM_Base_SetConfig+0x13c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d108      	bne.n	8004c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	695b      	ldr	r3, [r3, #20]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	689a      	ldr	r2, [r3, #8]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a0a      	ldr	r2, [pc, #40]	; (8004ce4 <TIM_Base_SetConfig+0x114>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0xf8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a0c      	ldr	r2, [pc, #48]	; (8004cf4 <TIM_Base_SetConfig+0x124>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d103      	bne.n	8004cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	691a      	ldr	r2, [r3, #16]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	615a      	str	r2, [r3, #20]
}
 8004cd6:	bf00      	nop
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40010000 	.word	0x40010000
 8004ce8:	40000400 	.word	0x40000400
 8004cec:	40000800 	.word	0x40000800
 8004cf0:	40000c00 	.word	0x40000c00
 8004cf4:	40010400 	.word	0x40010400
 8004cf8:	40014000 	.word	0x40014000
 8004cfc:	40014400 	.word	0x40014400
 8004d00:	40014800 	.word	0x40014800
 8004d04:	40001800 	.word	0x40001800
 8004d08:	40001c00 	.word	0x40001c00
 8004d0c:	40002000 	.word	0x40002000

08004d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b085      	sub	sp, #20
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d24:	2302      	movs	r3, #2
 8004d26:	e05a      	b.n	8004dde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2202      	movs	r2, #2
 8004d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a21      	ldr	r2, [pc, #132]	; (8004dec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d022      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d74:	d01d      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a1d      	ldr	r2, [pc, #116]	; (8004df0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d018      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d013      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a1a      	ldr	r2, [pc, #104]	; (8004df8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d00e      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a17      	ldr	r2, [pc, #92]	; (8004e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d10c      	bne.n	8004dcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ddc:	2300      	movs	r3, #0
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3714      	adds	r7, #20
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40000400 	.word	0x40000400
 8004df4:	40000800 	.word	0x40000800
 8004df8:	40000c00 	.word	0x40000c00
 8004dfc:	40010400 	.word	0x40010400
 8004e00:	40014000 	.word	0x40014000
 8004e04:	40001800 	.word	0x40001800

08004e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b083      	sub	sp, #12
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004e10:	bf00      	nop
 8004e12:	370c      	adds	r7, #12
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr

08004e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e03f      	b.n	8004ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7fd f9b8 	bl	80021cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2224      	movs	r2, #36	; 0x24
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68da      	ldr	r2, [r3, #12]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 fe1d 	bl	8005ab4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691a      	ldr	r2, [r3, #16]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	695a      	ldr	r2, [r3, #20]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68da      	ldr	r2, [r3, #12]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2220      	movs	r2, #32
 8004ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3708      	adds	r7, #8
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	b08a      	sub	sp, #40	; 0x28
 8004ece:	af02      	add	r7, sp, #8
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	603b      	str	r3, [r7, #0]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b20      	cmp	r3, #32
 8004ee8:	d17c      	bne.n	8004fe4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_Transmit+0x2c>
 8004ef0:	88fb      	ldrh	r3, [r7, #6]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e075      	b.n	8004fe6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_UART_Transmit+0x3e>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e06e      	b.n	8004fe6 <HAL_UART_Transmit+0x11c>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2200      	movs	r2, #0
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2221      	movs	r2, #33	; 0x21
 8004f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004f1e:	f7fd fa73 	bl	8002408 <HAL_GetTick>
 8004f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	88fa      	ldrh	r2, [r7, #6]
 8004f28:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	88fa      	ldrh	r2, [r7, #6]
 8004f2e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f38:	d108      	bne.n	8004f4c <HAL_UART_Transmit+0x82>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d104      	bne.n	8004f4c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	61bb      	str	r3, [r7, #24]
 8004f4a:	e003      	b.n	8004f54 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f50:	2300      	movs	r3, #0
 8004f52:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004f5c:	e02a      	b.n	8004fb4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	2200      	movs	r2, #0
 8004f66:	2180      	movs	r1, #128	; 0x80
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f000 fb9b 	bl	80056a4 <UART_WaitOnFlagUntilTimeout>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d001      	beq.n	8004f78 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e036      	b.n	8004fe6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f8c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	3302      	adds	r3, #2
 8004f92:	61bb      	str	r3, [r7, #24]
 8004f94:	e007      	b.n	8004fa6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	3b01      	subs	r3, #1
 8004fae:	b29a      	uxth	r2, r3
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1cf      	bne.n	8004f5e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	9300      	str	r3, [sp, #0]
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	2140      	movs	r1, #64	; 0x40
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f000 fb6b 	bl	80056a4 <UART_WaitOnFlagUntilTimeout>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d001      	beq.n	8004fd8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e006      	b.n	8004fe6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2220      	movs	r2, #32
 8004fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	e000      	b.n	8004fe6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004fe4:	2302      	movs	r3, #2
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b08a      	sub	sp, #40	; 0x28
 8004ff2:	af02      	add	r7, sp, #8
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	603b      	str	r3, [r7, #0]
 8004ffa:	4613      	mov	r3, r2
 8004ffc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b20      	cmp	r3, #32
 800500c:	f040 808c 	bne.w	8005128 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d002      	beq.n	800501c <HAL_UART_Receive+0x2e>
 8005016:	88fb      	ldrh	r3, [r7, #6]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d101      	bne.n	8005020 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e084      	b.n	800512a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005026:	2b01      	cmp	r3, #1
 8005028:	d101      	bne.n	800502e <HAL_UART_Receive+0x40>
 800502a:	2302      	movs	r3, #2
 800502c:	e07d      	b.n	800512a <HAL_UART_Receive+0x13c>
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2222      	movs	r2, #34	; 0x22
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800504a:	f7fd f9dd 	bl	8002408 <HAL_GetTick>
 800504e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	88fa      	ldrh	r2, [r7, #6]
 8005054:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	88fa      	ldrh	r2, [r7, #6]
 800505a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005064:	d108      	bne.n	8005078 <HAL_UART_Receive+0x8a>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d104      	bne.n	8005078 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	e003      	b.n	8005080 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800507c:	2300      	movs	r3, #0
 800507e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005088:	e043      	b.n	8005112 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	2120      	movs	r1, #32
 8005094:	68f8      	ldr	r0, [r7, #12]
 8005096:	f000 fb05 	bl	80056a4 <UART_WaitOnFlagUntilTimeout>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e042      	b.n	800512a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10c      	bne.n	80050c4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b6:	b29a      	uxth	r2, r3
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	3302      	adds	r3, #2
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e01f      	b.n	8005104 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050cc:	d007      	beq.n	80050de <HAL_UART_Receive+0xf0>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10a      	bne.n	80050ec <HAL_UART_Receive+0xfe>
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	b2da      	uxtb	r2, r3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	701a      	strb	r2, [r3, #0]
 80050ea:	e008      	b.n	80050fe <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	3301      	adds	r3, #1
 8005102:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	3b01      	subs	r3, #1
 800510c:	b29a      	uxth	r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005116:	b29b      	uxth	r3, r3
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1b6      	bne.n	800508a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2220      	movs	r2, #32
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3720      	adds	r7, #32
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b0ba      	sub	sp, #232	; 0xe8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800515a:	2300      	movs	r3, #0
 800515c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005160:	2300      	movs	r3, #0
 8005162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005166:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800516a:	f003 030f 	and.w	r3, r3, #15
 800516e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005172:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10f      	bne.n	800519a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
 8005186:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 fbd3 	bl	800593e <UART_Receive_IT>
      return;
 8005198:	e256      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800519a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80de 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
 80051a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	f000 80d1 	beq.w	8005360 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00b      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d005      	beq.n	80051e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	f043 0201 	orr.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051e6:	f003 0304 	and.w	r3, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00b      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
 80051ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	f043 0202 	orr.w	r2, r3, #2
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005206:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520a:	f003 0302 	and.w	r3, r3, #2
 800520e:	2b00      	cmp	r3, #0
 8005210:	d00b      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
 8005212:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d005      	beq.n	800522a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005222:	f043 0204 	orr.w	r2, r3, #4
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800522a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522e:	f003 0308 	and.w	r3, r3, #8
 8005232:	2b00      	cmp	r3, #0
 8005234:	d011      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
 8005236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800523a:	f003 0320 	and.w	r3, r3, #32
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	2b00      	cmp	r3, #0
 800524c:	d005      	beq.n	800525a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f043 0208 	orr.w	r2, r3, #8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 81ed 	beq.w	800563e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005268:	f003 0320 	and.w	r3, r3, #32
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005274:	f003 0320 	and.w	r3, r3, #32
 8005278:	2b00      	cmp	r3, #0
 800527a:	d002      	beq.n	8005282 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 fb5e 	bl	800593e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800528c:	2b40      	cmp	r3, #64	; 0x40
 800528e:	bf0c      	ite	eq
 8005290:	2301      	moveq	r3, #1
 8005292:	2300      	movne	r3, #0
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d103      	bne.n	80052ae <HAL_UART_IRQHandler+0x17a>
 80052a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d04f      	beq.n	800534e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fa66 	bl	8005780 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d141      	bne.n	8005346 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	3314      	adds	r3, #20
 80052c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d0:	e853 3f00 	ldrex	r3, [r3]
 80052d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80052d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80052ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80052f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80052fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80052fe:	e841 2300 	strex	r3, r2, [r1]
 8005302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1d9      	bne.n	80052c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	d013      	beq.n	800533e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800531a:	4a7d      	ldr	r2, [pc, #500]	; (8005510 <HAL_UART_IRQHandler+0x3dc>)
 800531c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005322:	4618      	mov	r0, r3
 8005324:	f7fe f9d7 	bl	80036d6 <HAL_DMA_Abort_IT>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005338:	4610      	mov	r0, r2
 800533a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	e00e      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f99a 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005344:	e00a      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 f996 	bl	8005678 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800534c:	e006      	b.n	800535c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f992 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800535a:	e170      	b.n	800563e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800535c:	bf00      	nop
    return;
 800535e:	e16e      	b.n	800563e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005364:	2b01      	cmp	r3, #1
 8005366:	f040 814a 	bne.w	80055fe <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800536a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536e:	f003 0310 	and.w	r3, r3, #16
 8005372:	2b00      	cmp	r3, #0
 8005374:	f000 8143 	beq.w	80055fe <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005378:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800537c:	f003 0310 	and.w	r3, r3, #16
 8005380:	2b00      	cmp	r3, #0
 8005382:	f000 813c 	beq.w	80055fe <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	60bb      	str	r3, [r7, #8]
 800539a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a6:	2b40      	cmp	r3, #64	; 0x40
 80053a8:	f040 80b4 	bne.w	8005514 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	685b      	ldr	r3, [r3, #4]
 80053b4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80053bc:	2b00      	cmp	r3, #0
 80053be:	f000 8140 	beq.w	8005642 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80053c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053ca:	429a      	cmp	r2, r3
 80053cc:	f080 8139 	bcs.w	8005642 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80053d6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e2:	f000 8088 	beq.w	80054f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	330c      	adds	r3, #12
 80053ec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80053f4:	e853 3f00 	ldrex	r3, [r3]
 80053f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80053fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005400:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005412:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005416:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800541e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005422:	e841 2300 	strex	r3, r2, [r1]
 8005426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800542a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1d9      	bne.n	80053e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	3314      	adds	r3, #20
 8005438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800543c:	e853 3f00 	ldrex	r3, [r3]
 8005440:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005444:	f023 0301 	bic.w	r3, r3, #1
 8005448:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3314      	adds	r3, #20
 8005452:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005456:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800545a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800545e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005462:	e841 2300 	strex	r3, r2, [r1]
 8005466:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1e1      	bne.n	8005432 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3314      	adds	r3, #20
 8005474:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005478:	e853 3f00 	ldrex	r3, [r3]
 800547c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800547e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005480:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005484:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	3314      	adds	r3, #20
 800548e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005492:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005494:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005496:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005498:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800549a:	e841 2300 	strex	r3, r2, [r1]
 800549e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d1e3      	bne.n	800546e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	2220      	movs	r2, #32
 80054aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2200      	movs	r2, #0
 80054b2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	330c      	adds	r3, #12
 80054ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054be:	e853 3f00 	ldrex	r3, [r3]
 80054c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80054c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80054c6:	f023 0310 	bic.w	r3, r3, #16
 80054ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	330c      	adds	r3, #12
 80054d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80054d8:	65ba      	str	r2, [r7, #88]	; 0x58
 80054da:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80054de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80054e0:	e841 2300 	strex	r3, r2, [r1]
 80054e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80054e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d1e3      	bne.n	80054b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fe f880 	bl	80035f6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054fe:	b29b      	uxth	r3, r3
 8005500:	1ad3      	subs	r3, r2, r3
 8005502:	b29b      	uxth	r3, r3
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f8c0 	bl	800568c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800550c:	e099      	b.n	8005642 <HAL_UART_IRQHandler+0x50e>
 800550e:	bf00      	nop
 8005510:	08005847 	.word	0x08005847
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	f000 808b 	beq.w	8005646 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005530:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 8086 	beq.w	8005646 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	330c      	adds	r3, #12
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005544:	e853 3f00 	ldrex	r3, [r3]
 8005548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800554a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800555e:	647a      	str	r2, [r7, #68]	; 0x44
 8005560:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005566:	e841 2300 	strex	r3, r2, [r1]
 800556a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800556e:	2b00      	cmp	r3, #0
 8005570:	d1e3      	bne.n	800553a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3314      	adds	r3, #20
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	623b      	str	r3, [r7, #32]
   return(result);
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	f023 0301 	bic.w	r3, r3, #1
 8005588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3314      	adds	r3, #20
 8005592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005596:	633a      	str	r2, [r7, #48]	; 0x30
 8005598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	e841 2300 	strex	r3, r2, [r1]
 80055a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1e3      	bne.n	8005572 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2220      	movs	r2, #32
 80055ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	330c      	adds	r3, #12
 80055be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	e853 3f00 	ldrex	r3, [r3]
 80055c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0310 	bic.w	r3, r3, #16
 80055ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80055dc:	61fa      	str	r2, [r7, #28]
 80055de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e0:	69b9      	ldr	r1, [r7, #24]
 80055e2:	69fa      	ldr	r2, [r7, #28]
 80055e4:	e841 2300 	strex	r3, r2, [r1]
 80055e8:	617b      	str	r3, [r7, #20]
   return(result);
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d1e3      	bne.n	80055b8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f848 	bl	800568c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055fc:	e023      	b.n	8005646 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <HAL_UART_IRQHandler+0x4ea>
 800560a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800560e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f929 	bl	800586e <UART_Transmit_IT>
    return;
 800561c:	e014      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800561e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <HAL_UART_IRQHandler+0x514>
 800562a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005632:	2b00      	cmp	r3, #0
 8005634:	d008      	beq.n	8005648 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f969 	bl	800590e <UART_EndTransmit_IT>
    return;
 800563c:	e004      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
    return;
 800563e:	bf00      	nop
 8005640:	e002      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
      return;
 8005642:	bf00      	nop
 8005644:	e000      	b.n	8005648 <HAL_UART_IRQHandler+0x514>
      return;
 8005646:	bf00      	nop
  }
}
 8005648:	37e8      	adds	r7, #232	; 0xe8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}
 800564e:	bf00      	nop

08005650 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005664:	b480      	push	{r7}
 8005666:	b083      	sub	sp, #12
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr

0800568c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	460b      	mov	r3, r1
 8005696:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b090      	sub	sp, #64	; 0x40
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	603b      	str	r3, [r7, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056b4:	e050      	b.n	8005758 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056bc:	d04c      	beq.n	8005758 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d007      	beq.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80056c4:	f7fc fea0 	bl	8002408 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d241      	bcs.n	8005758 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	330c      	adds	r3, #12
 80056da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056de:	e853 3f00 	ldrex	r3, [r3]
 80056e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80056ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	330c      	adds	r3, #12
 80056f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056f4:	637a      	str	r2, [r7, #52]	; 0x34
 80056f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80056fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80056fc:	e841 2300 	strex	r3, r2, [r1]
 8005700:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e5      	bne.n	80056d4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3314      	adds	r3, #20
 800570e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	e853 3f00 	ldrex	r3, [r3]
 8005716:	613b      	str	r3, [r7, #16]
   return(result);
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f023 0301 	bic.w	r3, r3, #1
 800571e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	3314      	adds	r3, #20
 8005726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005728:	623a      	str	r2, [r7, #32]
 800572a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	69f9      	ldr	r1, [r7, #28]
 800572e:	6a3a      	ldr	r2, [r7, #32]
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	61bb      	str	r3, [r7, #24]
   return(result);
 8005736:	69bb      	ldr	r3, [r7, #24]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e5      	bne.n	8005708 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2220      	movs	r2, #32
 8005740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005754:	2303      	movs	r3, #3
 8005756:	e00f      	b.n	8005778 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	4013      	ands	r3, r2
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	bf0c      	ite	eq
 8005768:	2301      	moveq	r3, #1
 800576a:	2300      	movne	r3, #0
 800576c:	b2db      	uxtb	r3, r3
 800576e:	461a      	mov	r2, r3
 8005770:	79fb      	ldrb	r3, [r7, #7]
 8005772:	429a      	cmp	r2, r3
 8005774:	d09f      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3740      	adds	r7, #64	; 0x40
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005780:	b480      	push	{r7}
 8005782:	b095      	sub	sp, #84	; 0x54
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	330c      	adds	r3, #12
 800578e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800579a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	330c      	adds	r3, #12
 80057a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80057a8:	643a      	str	r2, [r7, #64]	; 0x40
 80057aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3314      	adds	r3, #20
 80057c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	f023 0301 	bic.w	r3, r3, #1
 80057d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	3314      	adds	r3, #20
 80057da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e5      	bne.n	80057bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d119      	bne.n	800582c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	330c      	adds	r3, #12
 80057fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	e853 3f00 	ldrex	r3, [r3]
 8005806:	60bb      	str	r3, [r7, #8]
   return(result);
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	f023 0310 	bic.w	r3, r3, #16
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005818:	61ba      	str	r2, [r7, #24]
 800581a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581c:	6979      	ldr	r1, [r7, #20]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	e841 2300 	strex	r3, r2, [r1]
 8005824:	613b      	str	r3, [r7, #16]
   return(result);
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d1e5      	bne.n	80057f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2220      	movs	r2, #32
 8005830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	631a      	str	r2, [r3, #48]	; 0x30
}
 800583a:	bf00      	nop
 800583c:	3754      	adds	r7, #84	; 0x54
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr

08005846 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b084      	sub	sp, #16
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005852:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2200      	movs	r2, #0
 800585e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f7ff ff09 	bl	8005678 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800586e:	b480      	push	{r7}
 8005870:	b085      	sub	sp, #20
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800587c:	b2db      	uxtb	r3, r3
 800587e:	2b21      	cmp	r3, #33	; 0x21
 8005880:	d13e      	bne.n	8005900 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800588a:	d114      	bne.n	80058b6 <UART_Transmit_IT+0x48>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d110      	bne.n	80058b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	881b      	ldrh	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	1c9a      	adds	r2, r3, #2
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	621a      	str	r2, [r3, #32]
 80058b4:	e008      	b.n	80058c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6211      	str	r1, [r2, #32]
 80058c0:	781a      	ldrb	r2, [r3, #0]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	687a      	ldr	r2, [r7, #4]
 80058d4:	4619      	mov	r1, r3
 80058d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d10f      	bne.n	80058fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	68da      	ldr	r2, [r3, #12]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80058fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e000      	b.n	8005902 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005900:	2302      	movs	r3, #2
  }
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b082      	sub	sp, #8
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005924:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f7ff fe8e 	bl	8005650 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b08c      	sub	sp, #48	; 0x30
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b22      	cmp	r3, #34	; 0x22
 8005950:	f040 80ab 	bne.w	8005aaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800595c:	d117      	bne.n	800598e <UART_Receive_IT+0x50>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d113      	bne.n	800598e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005966:	2300      	movs	r3, #0
 8005968:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	b29b      	uxth	r3, r3
 8005978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800597c:	b29a      	uxth	r2, r3
 800597e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005980:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005986:	1c9a      	adds	r2, r3, #2
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	629a      	str	r2, [r3, #40]	; 0x28
 800598c:	e026      	b.n	80059dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005992:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005994:	2300      	movs	r3, #0
 8005996:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a0:	d007      	beq.n	80059b2 <UART_Receive_IT+0x74>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10a      	bne.n	80059c0 <UART_Receive_IT+0x82>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	691b      	ldr	r3, [r3, #16]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	b2da      	uxtb	r2, r3
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	e008      	b.n	80059d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	3b01      	subs	r3, #1
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	4619      	mov	r1, r3
 80059ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d15a      	bne.n	8005aa6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0220 	bic.w	r2, r2, #32
 80059fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695a      	ldr	r2, [r3, #20]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f022 0201 	bic.w	r2, r2, #1
 8005a1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	d135      	bne.n	8005a9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	330c      	adds	r3, #12
 8005a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	613b      	str	r3, [r7, #16]
   return(result);
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f023 0310 	bic.w	r3, r3, #16
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	330c      	adds	r3, #12
 8005a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a56:	623a      	str	r2, [r7, #32]
 8005a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	69f9      	ldr	r1, [r7, #28]
 8005a5c:	6a3a      	ldr	r2, [r7, #32]
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b10      	cmp	r3, #16
 8005a76:	d10a      	bne.n	8005a8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	60fb      	str	r3, [r7, #12]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f7ff fdf9 	bl	800568c <HAL_UARTEx_RxEventCallback>
 8005a9a:	e002      	b.n	8005aa2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	f7ff fde1 	bl	8005664 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	e002      	b.n	8005aac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	e000      	b.n	8005aac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005aaa:	2302      	movs	r3, #2
  }
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3730      	adds	r7, #48	; 0x30
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab8:	b0c0      	sub	sp, #256	; 0x100
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad0:	68d9      	ldr	r1, [r3, #12]
 8005ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	ea40 0301 	orr.w	r3, r0, r1
 8005adc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af0:	695b      	ldr	r3, [r3, #20]
 8005af2:	431a      	orrs	r2, r3
 8005af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af8:	69db      	ldr	r3, [r3, #28]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b0c:	f021 010c 	bic.w	r1, r1, #12
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b2e:	6999      	ldr	r1, [r3, #24]
 8005b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	ea40 0301 	orr.w	r3, r0, r1
 8005b3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	4b8f      	ldr	r3, [pc, #572]	; (8005d80 <UART_SetConfig+0x2cc>)
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d005      	beq.n	8005b54 <UART_SetConfig+0xa0>
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8d      	ldr	r3, [pc, #564]	; (8005d84 <UART_SetConfig+0x2d0>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d104      	bne.n	8005b5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b54:	f7fe f930 	bl	8003db8 <HAL_RCC_GetPCLK2Freq>
 8005b58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b5c:	e003      	b.n	8005b66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b5e:	f7fe f917 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8005b62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b70:	f040 810c 	bne.w	8005d8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b78:	2200      	movs	r2, #0
 8005b7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005b86:	4622      	mov	r2, r4
 8005b88:	462b      	mov	r3, r5
 8005b8a:	1891      	adds	r1, r2, r2
 8005b8c:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b8e:	415b      	adcs	r3, r3
 8005b90:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005b96:	4621      	mov	r1, r4
 8005b98:	eb12 0801 	adds.w	r8, r2, r1
 8005b9c:	4629      	mov	r1, r5
 8005b9e:	eb43 0901 	adc.w	r9, r3, r1
 8005ba2:	f04f 0200 	mov.w	r2, #0
 8005ba6:	f04f 0300 	mov.w	r3, #0
 8005baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	4699      	mov	r9, r3
 8005bba:	4623      	mov	r3, r4
 8005bbc:	eb18 0303 	adds.w	r3, r8, r3
 8005bc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005bc4:	462b      	mov	r3, r5
 8005bc6:	eb49 0303 	adc.w	r3, r9, r3
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005be2:	460b      	mov	r3, r1
 8005be4:	18db      	adds	r3, r3, r3
 8005be6:	653b      	str	r3, [r7, #80]	; 0x50
 8005be8:	4613      	mov	r3, r2
 8005bea:	eb42 0303 	adc.w	r3, r2, r3
 8005bee:	657b      	str	r3, [r7, #84]	; 0x54
 8005bf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005bf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005bf8:	f7fa ff48 	bl	8000a8c <__aeabi_uldivmod>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	460b      	mov	r3, r1
 8005c00:	4b61      	ldr	r3, [pc, #388]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c02:	fba3 2302 	umull	r2, r3, r3, r2
 8005c06:	095b      	lsrs	r3, r3, #5
 8005c08:	011c      	lsls	r4, r3, #4
 8005c0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c0e:	2200      	movs	r2, #0
 8005c10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c1c:	4642      	mov	r2, r8
 8005c1e:	464b      	mov	r3, r9
 8005c20:	1891      	adds	r1, r2, r2
 8005c22:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c24:	415b      	adcs	r3, r3
 8005c26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c2c:	4641      	mov	r1, r8
 8005c2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005c32:	4649      	mov	r1, r9
 8005c34:	eb43 0b01 	adc.w	fp, r3, r1
 8005c38:	f04f 0200 	mov.w	r2, #0
 8005c3c:	f04f 0300 	mov.w	r3, #0
 8005c40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c4c:	4692      	mov	sl, r2
 8005c4e:	469b      	mov	fp, r3
 8005c50:	4643      	mov	r3, r8
 8005c52:	eb1a 0303 	adds.w	r3, sl, r3
 8005c56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c5a:	464b      	mov	r3, r9
 8005c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005c60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	18db      	adds	r3, r3, r3
 8005c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8005c7e:	4613      	mov	r3, r2
 8005c80:	eb42 0303 	adc.w	r3, r2, r3
 8005c84:	647b      	str	r3, [r7, #68]	; 0x44
 8005c86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005c8e:	f7fa fefd 	bl	8000a8c <__aeabi_uldivmod>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	4b3b      	ldr	r3, [pc, #236]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005c9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005c9e:	095b      	lsrs	r3, r3, #5
 8005ca0:	2264      	movs	r2, #100	; 0x64
 8005ca2:	fb02 f303 	mul.w	r3, r2, r3
 8005ca6:	1acb      	subs	r3, r1, r3
 8005ca8:	00db      	lsls	r3, r3, #3
 8005caa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cae:	4b36      	ldr	r3, [pc, #216]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005cb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb4:	095b      	lsrs	r3, r3, #5
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cbc:	441c      	add	r4, r3
 8005cbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005cc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ccc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cd0:	4642      	mov	r2, r8
 8005cd2:	464b      	mov	r3, r9
 8005cd4:	1891      	adds	r1, r2, r2
 8005cd6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cd8:	415b      	adcs	r3, r3
 8005cda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005ce0:	4641      	mov	r1, r8
 8005ce2:	1851      	adds	r1, r2, r1
 8005ce4:	6339      	str	r1, [r7, #48]	; 0x30
 8005ce6:	4649      	mov	r1, r9
 8005ce8:	414b      	adcs	r3, r1
 8005cea:	637b      	str	r3, [r7, #52]	; 0x34
 8005cec:	f04f 0200 	mov.w	r2, #0
 8005cf0:	f04f 0300 	mov.w	r3, #0
 8005cf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005cf8:	4659      	mov	r1, fp
 8005cfa:	00cb      	lsls	r3, r1, #3
 8005cfc:	4651      	mov	r1, sl
 8005cfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d02:	4651      	mov	r1, sl
 8005d04:	00ca      	lsls	r2, r1, #3
 8005d06:	4610      	mov	r0, r2
 8005d08:	4619      	mov	r1, r3
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	4642      	mov	r2, r8
 8005d0e:	189b      	adds	r3, r3, r2
 8005d10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d14:	464b      	mov	r3, r9
 8005d16:	460a      	mov	r2, r1
 8005d18:	eb42 0303 	adc.w	r3, r2, r3
 8005d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d34:	460b      	mov	r3, r1
 8005d36:	18db      	adds	r3, r3, r3
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	eb42 0303 	adc.w	r3, r2, r3
 8005d40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d4a:	f7fa fe9f 	bl	8000a8c <__aeabi_uldivmod>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	460b      	mov	r3, r1
 8005d52:	4b0d      	ldr	r3, [pc, #52]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005d54:	fba3 1302 	umull	r1, r3, r3, r2
 8005d58:	095b      	lsrs	r3, r3, #5
 8005d5a:	2164      	movs	r1, #100	; 0x64
 8005d5c:	fb01 f303 	mul.w	r3, r1, r3
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	00db      	lsls	r3, r3, #3
 8005d64:	3332      	adds	r3, #50	; 0x32
 8005d66:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <UART_SetConfig+0x2d4>)
 8005d68:	fba2 2303 	umull	r2, r3, r2, r3
 8005d6c:	095b      	lsrs	r3, r3, #5
 8005d6e:	f003 0207 	and.w	r2, r3, #7
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	4422      	add	r2, r4
 8005d7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d7c:	e105      	b.n	8005f8a <UART_SetConfig+0x4d6>
 8005d7e:	bf00      	nop
 8005d80:	40011000 	.word	0x40011000
 8005d84:	40011400 	.word	0x40011400
 8005d88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d90:	2200      	movs	r2, #0
 8005d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005d9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005d9e:	4642      	mov	r2, r8
 8005da0:	464b      	mov	r3, r9
 8005da2:	1891      	adds	r1, r2, r2
 8005da4:	6239      	str	r1, [r7, #32]
 8005da6:	415b      	adcs	r3, r3
 8005da8:	627b      	str	r3, [r7, #36]	; 0x24
 8005daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dae:	4641      	mov	r1, r8
 8005db0:	1854      	adds	r4, r2, r1
 8005db2:	4649      	mov	r1, r9
 8005db4:	eb43 0501 	adc.w	r5, r3, r1
 8005db8:	f04f 0200 	mov.w	r2, #0
 8005dbc:	f04f 0300 	mov.w	r3, #0
 8005dc0:	00eb      	lsls	r3, r5, #3
 8005dc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dc6:	00e2      	lsls	r2, r4, #3
 8005dc8:	4614      	mov	r4, r2
 8005dca:	461d      	mov	r5, r3
 8005dcc:	4643      	mov	r3, r8
 8005dce:	18e3      	adds	r3, r4, r3
 8005dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	eb45 0303 	adc.w	r3, r5, r3
 8005dda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005dea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005dee:	f04f 0200 	mov.w	r2, #0
 8005df2:	f04f 0300 	mov.w	r3, #0
 8005df6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005dfa:	4629      	mov	r1, r5
 8005dfc:	008b      	lsls	r3, r1, #2
 8005dfe:	4621      	mov	r1, r4
 8005e00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e04:	4621      	mov	r1, r4
 8005e06:	008a      	lsls	r2, r1, #2
 8005e08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e0c:	f7fa fe3e 	bl	8000a8c <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4b60      	ldr	r3, [pc, #384]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005e16:	fba3 2302 	umull	r2, r3, r3, r2
 8005e1a:	095b      	lsrs	r3, r3, #5
 8005e1c:	011c      	lsls	r4, r3, #4
 8005e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e30:	4642      	mov	r2, r8
 8005e32:	464b      	mov	r3, r9
 8005e34:	1891      	adds	r1, r2, r2
 8005e36:	61b9      	str	r1, [r7, #24]
 8005e38:	415b      	adcs	r3, r3
 8005e3a:	61fb      	str	r3, [r7, #28]
 8005e3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e40:	4641      	mov	r1, r8
 8005e42:	1851      	adds	r1, r2, r1
 8005e44:	6139      	str	r1, [r7, #16]
 8005e46:	4649      	mov	r1, r9
 8005e48:	414b      	adcs	r3, r1
 8005e4a:	617b      	str	r3, [r7, #20]
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e58:	4659      	mov	r1, fp
 8005e5a:	00cb      	lsls	r3, r1, #3
 8005e5c:	4651      	mov	r1, sl
 8005e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e62:	4651      	mov	r1, sl
 8005e64:	00ca      	lsls	r2, r1, #3
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4642      	mov	r2, r8
 8005e6e:	189b      	adds	r3, r3, r2
 8005e70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e74:	464b      	mov	r3, r9
 8005e76:	460a      	mov	r2, r1
 8005e78:	eb42 0303 	adc.w	r3, r2, r3
 8005e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	67bb      	str	r3, [r7, #120]	; 0x78
 8005e8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005e8c:	f04f 0200 	mov.w	r2, #0
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005e98:	4649      	mov	r1, r9
 8005e9a:	008b      	lsls	r3, r1, #2
 8005e9c:	4641      	mov	r1, r8
 8005e9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ea2:	4641      	mov	r1, r8
 8005ea4:	008a      	lsls	r2, r1, #2
 8005ea6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005eaa:	f7fa fdef 	bl	8000a8c <__aeabi_uldivmod>
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	4b39      	ldr	r3, [pc, #228]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005eb8:	095b      	lsrs	r3, r3, #5
 8005eba:	2164      	movs	r1, #100	; 0x64
 8005ebc:	fb01 f303 	mul.w	r3, r1, r3
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	011b      	lsls	r3, r3, #4
 8005ec4:	3332      	adds	r3, #50	; 0x32
 8005ec6:	4a34      	ldr	r2, [pc, #208]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ecc:	095b      	lsrs	r3, r3, #5
 8005ece:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ed2:	441c      	add	r4, r3
 8005ed4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ed8:	2200      	movs	r2, #0
 8005eda:	673b      	str	r3, [r7, #112]	; 0x70
 8005edc:	677a      	str	r2, [r7, #116]	; 0x74
 8005ede:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005ee2:	4642      	mov	r2, r8
 8005ee4:	464b      	mov	r3, r9
 8005ee6:	1891      	adds	r1, r2, r2
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	415b      	adcs	r3, r3
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	1851      	adds	r1, r2, r1
 8005ef6:	6039      	str	r1, [r7, #0]
 8005ef8:	4649      	mov	r1, r9
 8005efa:	414b      	adcs	r3, r1
 8005efc:	607b      	str	r3, [r7, #4]
 8005efe:	f04f 0200 	mov.w	r2, #0
 8005f02:	f04f 0300 	mov.w	r3, #0
 8005f06:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	00cb      	lsls	r3, r1, #3
 8005f0e:	4651      	mov	r1, sl
 8005f10:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f14:	4651      	mov	r1, sl
 8005f16:	00ca      	lsls	r2, r1, #3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	4642      	mov	r2, r8
 8005f20:	189b      	adds	r3, r3, r2
 8005f22:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f24:	464b      	mov	r3, r9
 8005f26:	460a      	mov	r2, r1
 8005f28:	eb42 0303 	adc.w	r3, r2, r3
 8005f2c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	663b      	str	r3, [r7, #96]	; 0x60
 8005f38:	667a      	str	r2, [r7, #100]	; 0x64
 8005f3a:	f04f 0200 	mov.w	r2, #0
 8005f3e:	f04f 0300 	mov.w	r3, #0
 8005f42:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f46:	4649      	mov	r1, r9
 8005f48:	008b      	lsls	r3, r1, #2
 8005f4a:	4641      	mov	r1, r8
 8005f4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f50:	4641      	mov	r1, r8
 8005f52:	008a      	lsls	r2, r1, #2
 8005f54:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f58:	f7fa fd98 	bl	8000a8c <__aeabi_uldivmod>
 8005f5c:	4602      	mov	r2, r0
 8005f5e:	460b      	mov	r3, r1
 8005f60:	4b0d      	ldr	r3, [pc, #52]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005f62:	fba3 1302 	umull	r1, r3, r3, r2
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	2164      	movs	r1, #100	; 0x64
 8005f6a:	fb01 f303 	mul.w	r3, r1, r3
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	011b      	lsls	r3, r3, #4
 8005f72:	3332      	adds	r3, #50	; 0x32
 8005f74:	4a08      	ldr	r2, [pc, #32]	; (8005f98 <UART_SetConfig+0x4e4>)
 8005f76:	fba2 2303 	umull	r2, r3, r2, r3
 8005f7a:	095b      	lsrs	r3, r3, #5
 8005f7c:	f003 020f 	and.w	r2, r3, #15
 8005f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4422      	add	r2, r4
 8005f88:	609a      	str	r2, [r3, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005f90:	46bd      	mov	sp, r7
 8005f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f96:	bf00      	nop
 8005f98:	51eb851f 	.word	0x51eb851f

08005f9c <eMBInit>:
};

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBInit( eMBMode eMode, UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	603b      	str	r3, [r7, #0]
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	71fb      	strb	r3, [r7, #7]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	71bb      	strb	r3, [r7, #6]
 8005fac:	4613      	mov	r3, r2
 8005fae:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	73fb      	strb	r3, [r7, #15]

    /* check preconditions */
    if( ( ucSlaveAddress == MB_ADDRESS_BROADCAST ) ||
 8005fb4:	79bb      	ldrb	r3, [r7, #6]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d005      	beq.n	8005fc6 <eMBInit+0x2a>
 8005fba:	79bb      	ldrb	r3, [r7, #6]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <eMBInit+0x2a>
        ( ucSlaveAddress < MB_ADDRESS_MIN ) || ( ucSlaveAddress > MB_ADDRESS_MAX ) )
 8005fc0:	79bb      	ldrb	r3, [r7, #6]
 8005fc2:	2bf7      	cmp	r3, #247	; 0xf7
 8005fc4:	d902      	bls.n	8005fcc <eMBInit+0x30>
    {
        eStatus = MB_EINVAL;
 8005fc6:	2302      	movs	r3, #2
 8005fc8:	73fb      	strb	r3, [r7, #15]
 8005fca:	e03a      	b.n	8006042 <eMBInit+0xa6>
    }
    else
    {
        ucMBAddress = ucSlaveAddress;
 8005fcc:	4a1f      	ldr	r2, [pc, #124]	; (800604c <eMBInit+0xb0>)
 8005fce:	79bb      	ldrb	r3, [r7, #6]
 8005fd0:	7013      	strb	r3, [r2, #0]

        switch ( eMode )
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d121      	bne.n	800601c <eMBInit+0x80>
        {
#if MB_RTU_ENABLED > 0
        case MB_RTU:
            pvMBFrameStartCur = eMBRTUStart;
 8005fd8:	4b1d      	ldr	r3, [pc, #116]	; (8006050 <eMBInit+0xb4>)
 8005fda:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <eMBInit+0xb8>)
 8005fdc:	601a      	str	r2, [r3, #0]
            pvMBFrameStopCur = eMBRTUStop;
 8005fde:	4b1e      	ldr	r3, [pc, #120]	; (8006058 <eMBInit+0xbc>)
 8005fe0:	4a1e      	ldr	r2, [pc, #120]	; (800605c <eMBInit+0xc0>)
 8005fe2:	601a      	str	r2, [r3, #0]
            peMBFrameSendCur = eMBRTUSend;
 8005fe4:	4b1e      	ldr	r3, [pc, #120]	; (8006060 <eMBInit+0xc4>)
 8005fe6:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <eMBInit+0xc8>)
 8005fe8:	601a      	str	r2, [r3, #0]
            peMBFrameReceiveCur = eMBRTUReceive;
 8005fea:	4b1f      	ldr	r3, [pc, #124]	; (8006068 <eMBInit+0xcc>)
 8005fec:	4a1f      	ldr	r2, [pc, #124]	; (800606c <eMBInit+0xd0>)
 8005fee:	601a      	str	r2, [r3, #0]
            pvMBFrameCloseCur = MB_PORT_HAS_CLOSE ? vMBPortClose : NULL;
 8005ff0:	4b1f      	ldr	r3, [pc, #124]	; (8006070 <eMBInit+0xd4>)
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	601a      	str	r2, [r3, #0]
            pxMBFrameCBByteReceived = xMBRTUReceiveFSM;
 8005ff6:	4b1f      	ldr	r3, [pc, #124]	; (8006074 <eMBInit+0xd8>)
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <eMBInit+0xdc>)
 8005ffa:	601a      	str	r2, [r3, #0]
            pxMBFrameCBTransmitterEmpty = xMBRTUTransmitFSM;
 8005ffc:	4b1f      	ldr	r3, [pc, #124]	; (800607c <eMBInit+0xe0>)
 8005ffe:	4a20      	ldr	r2, [pc, #128]	; (8006080 <eMBInit+0xe4>)
 8006000:	601a      	str	r2, [r3, #0]
            pxMBPortCBTimerExpired = xMBRTUTimerT35Expired;
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <eMBInit+0xe8>)
 8006004:	4a20      	ldr	r2, [pc, #128]	; (8006088 <eMBInit+0xec>)
 8006006:	601a      	str	r2, [r3, #0]

            eStatus = eMBRTUInit( ucMBAddress, ucPort, ulBaudRate, eParity );
 8006008:	4b10      	ldr	r3, [pc, #64]	; (800604c <eMBInit+0xb0>)
 800600a:	7818      	ldrb	r0, [r3, #0]
 800600c:	7e3b      	ldrb	r3, [r7, #24]
 800600e:	7979      	ldrb	r1, [r7, #5]
 8006010:	683a      	ldr	r2, [r7, #0]
 8006012:	f000 fd3b 	bl	8006a8c <eMBRTUInit>
 8006016:	4603      	mov	r3, r0
 8006018:	73fb      	strb	r3, [r7, #15]
            break;
 800601a:	e001      	b.n	8006020 <eMBInit+0x84>

            eStatus = eMBASCIIInit( ucMBAddress, ucPort, ulBaudRate, eParity );
            break;
#endif
        default:
            eStatus = MB_EINVAL;
 800601c:	2302      	movs	r3, #2
 800601e:	73fb      	strb	r3, [r7, #15]
        }

        if( eStatus == MB_ENOERR )
 8006020:	7bfb      	ldrb	r3, [r7, #15]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10d      	bne.n	8006042 <eMBInit+0xa6>
        {
            if( !xMBPortEventInit(  ) )
 8006026:	f000 ff69 	bl	8006efc <xMBPortEventInit>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d102      	bne.n	8006036 <eMBInit+0x9a>
            {
                /* port dependent event module initalization failed. */
                eStatus = MB_EPORTERR;
 8006030:	2303      	movs	r3, #3
 8006032:	73fb      	strb	r3, [r7, #15]
 8006034:	e005      	b.n	8006042 <eMBInit+0xa6>
            }
            else
            {
                eMBCurrentMode = eMode;
 8006036:	4a15      	ldr	r2, [pc, #84]	; (800608c <eMBInit+0xf0>)
 8006038:	79fb      	ldrb	r3, [r7, #7]
 800603a:	7013      	strb	r3, [r2, #0]
                eMBState = STATE_DISABLED;
 800603c:	4b14      	ldr	r3, [pc, #80]	; (8006090 <eMBInit+0xf4>)
 800603e:	2201      	movs	r2, #1
 8006040:	701a      	strb	r2, [r3, #0]
            }
        }
    }
    return eStatus;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
}
 8006044:	4618      	mov	r0, r3
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bd80      	pop	{r7, pc}
 800604c:	200002d4 	.word	0x200002d4
 8006050:	200002dc 	.word	0x200002dc
 8006054:	08006b05 	.word	0x08006b05
 8006058:	200002e0 	.word	0x200002e0
 800605c:	08006b2d 	.word	0x08006b2d
 8006060:	200002d8 	.word	0x200002d8
 8006064:	08006be5 	.word	0x08006be5
 8006068:	200002e4 	.word	0x200002e4
 800606c:	08006b49 	.word	0x08006b49
 8006070:	200002e8 	.word	0x200002e8
 8006074:	200002ec 	.word	0x200002ec
 8006078:	08006cad 	.word	0x08006cad
 800607c:	200002f0 	.word	0x200002f0
 8006080:	08006d7d 	.word	0x08006d7d
 8006084:	200002f4 	.word	0x200002f4
 8006088:	08006e2d 	.word	0x08006e2d
 800608c:	200002d5 	.word	0x200002d5
 8006090:	20000011 	.word	0x20000011

08006094 <eMBEnable>:
    return eStatus;
}

eMBErrorCode
eMBEnable( void )
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
    eMBErrorCode    eStatus = MB_ENOERR;
 800609a:	2300      	movs	r3, #0
 800609c:	71fb      	strb	r3, [r7, #7]

    if( eMBState == STATE_DISABLED )
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <eMBEnable+0x30>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d106      	bne.n	80060b4 <eMBEnable+0x20>
    {
        /* Activate the protocol stack. */
        pvMBFrameStartCur(  );
 80060a6:	4b08      	ldr	r3, [pc, #32]	; (80060c8 <eMBEnable+0x34>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4798      	blx	r3
        eMBState = STATE_ENABLED;
 80060ac:	4b05      	ldr	r3, [pc, #20]	; (80060c4 <eMBEnable+0x30>)
 80060ae:	2200      	movs	r2, #0
 80060b0:	701a      	strb	r2, [r3, #0]
 80060b2:	e001      	b.n	80060b8 <eMBEnable+0x24>
    }
    else
    {
        eStatus = MB_EILLSTATE;
 80060b4:	2306      	movs	r3, #6
 80060b6:	71fb      	strb	r3, [r7, #7]
    }
    return eStatus;
 80060b8:	79fb      	ldrb	r3, [r7, #7]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3708      	adds	r7, #8
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20000011 	.word	0x20000011
 80060c8:	200002dc 	.word	0x200002dc

080060cc <eMBPoll>:
    return eStatus;
}

eMBErrorCode
eMBPoll( void )
{
 80060cc:	b590      	push	{r4, r7, lr}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
    static UCHAR    ucFunctionCode;
    static USHORT   usLength;
    static eMBException eException;

    int             i;
    eMBErrorCode    eStatus = MB_ENOERR;
 80060d2:	2300      	movs	r3, #0
 80060d4:	70fb      	strb	r3, [r7, #3]
    eMBEventType    eEvent;

    /* Check if the protocol stack is ready. */
    if( eMBState != STATE_ENABLED )
 80060d6:	4b51      	ldr	r3, [pc, #324]	; (800621c <eMBPoll+0x150>)
 80060d8:	781b      	ldrb	r3, [r3, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d001      	beq.n	80060e2 <eMBPoll+0x16>
    {
        return MB_EILLSTATE;
 80060de:	2306      	movs	r3, #6
 80060e0:	e097      	b.n	8006212 <eMBPoll+0x146>
    }

    /* Check if there is a event available. If not return control to caller.
     * Otherwise we will handle the event. */
    if( xMBPortEventGet( &eEvent ) == TRUE )
 80060e2:	1cbb      	adds	r3, r7, #2
 80060e4:	4618      	mov	r0, r3
 80060e6:	f000 ff2d 	bl	8006f44 <xMBPortEventGet>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	f040 808a 	bne.w	8006206 <eMBPoll+0x13a>
    {
        switch ( eEvent )
 80060f2:	78bb      	ldrb	r3, [r7, #2]
 80060f4:	2b03      	cmp	r3, #3
 80060f6:	f200 808b 	bhi.w	8006210 <eMBPoll+0x144>
 80060fa:	a201      	add	r2, pc, #4	; (adr r2, 8006100 <eMBPoll+0x34>)
 80060fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006100:	08006211 	.word	0x08006211
 8006104:	08006111 	.word	0x08006111
 8006108:	08006143 	.word	0x08006143
 800610c:	08006211 	.word	0x08006211
        {
        case EV_READY:
            break;

        case EV_FRAME_RECEIVED:
            eStatus = peMBFrameReceiveCur( &ucRcvAddress, &ucMBFrame, &usLength );
 8006110:	4b43      	ldr	r3, [pc, #268]	; (8006220 <eMBPoll+0x154>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a43      	ldr	r2, [pc, #268]	; (8006224 <eMBPoll+0x158>)
 8006116:	4944      	ldr	r1, [pc, #272]	; (8006228 <eMBPoll+0x15c>)
 8006118:	4844      	ldr	r0, [pc, #272]	; (800622c <eMBPoll+0x160>)
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	70fb      	strb	r3, [r7, #3]
            if( eStatus == MB_ENOERR )
 8006120:	78fb      	ldrb	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d171      	bne.n	800620a <eMBPoll+0x13e>
            {
                /* Check if the frame is for us. If not ignore the frame. */
                if( ( ucRcvAddress == ucMBAddress ) || ( ucRcvAddress == MB_ADDRESS_BROADCAST ) )
 8006126:	4b41      	ldr	r3, [pc, #260]	; (800622c <eMBPoll+0x160>)
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	4b41      	ldr	r3, [pc, #260]	; (8006230 <eMBPoll+0x164>)
 800612c:	781b      	ldrb	r3, [r3, #0]
 800612e:	429a      	cmp	r2, r3
 8006130:	d003      	beq.n	800613a <eMBPoll+0x6e>
 8006132:	4b3e      	ldr	r3, [pc, #248]	; (800622c <eMBPoll+0x160>)
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d167      	bne.n	800620a <eMBPoll+0x13e>
                {
                    ( void )xMBPortEventPost( EV_EXECUTE );
 800613a:	2002      	movs	r0, #2
 800613c:	f000 feec 	bl	8006f18 <xMBPortEventPost>
                }
            }
            break;
 8006140:	e063      	b.n	800620a <eMBPoll+0x13e>

        case EV_EXECUTE:
            ucFunctionCode = ucMBFrame[MB_PDU_FUNC_OFF];
 8006142:	4b39      	ldr	r3, [pc, #228]	; (8006228 <eMBPoll+0x15c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	4b3a      	ldr	r3, [pc, #232]	; (8006234 <eMBPoll+0x168>)
 800614a:	701a      	strb	r2, [r3, #0]
            eException = MB_EX_ILLEGAL_FUNCTION;
 800614c:	4b3a      	ldr	r3, [pc, #232]	; (8006238 <eMBPoll+0x16c>)
 800614e:	2201      	movs	r2, #1
 8006150:	701a      	strb	r2, [r3, #0]
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8006152:	2300      	movs	r3, #0
 8006154:	607b      	str	r3, [r7, #4]
 8006156:	e01f      	b.n	8006198 <eMBPoll+0xcc>
            {
                /* No more function handlers registered. Abort. */
                if( xFuncHandlers[i].ucFunctionCode == 0 )
 8006158:	4a38      	ldr	r2, [pc, #224]	; (800623c <eMBPoll+0x170>)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d01d      	beq.n	80061a0 <eMBPoll+0xd4>
                {
                    break;
                }
                else if( xFuncHandlers[i].ucFunctionCode == ucFunctionCode )
 8006164:	4a35      	ldr	r2, [pc, #212]	; (800623c <eMBPoll+0x170>)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800616c:	4b31      	ldr	r3, [pc, #196]	; (8006234 <eMBPoll+0x168>)
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	429a      	cmp	r2, r3
 8006172:	d10e      	bne.n	8006192 <eMBPoll+0xc6>
                {
                    eException = xFuncHandlers[i].pxHandler( ucMBFrame, &usLength );
 8006174:	4a31      	ldr	r2, [pc, #196]	; (800623c <eMBPoll+0x170>)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	4413      	add	r3, r2
 800617c:	685b      	ldr	r3, [r3, #4]
 800617e:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <eMBPoll+0x15c>)
 8006180:	6812      	ldr	r2, [r2, #0]
 8006182:	4928      	ldr	r1, [pc, #160]	; (8006224 <eMBPoll+0x158>)
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
 8006188:	4603      	mov	r3, r0
 800618a:	461a      	mov	r2, r3
 800618c:	4b2a      	ldr	r3, [pc, #168]	; (8006238 <eMBPoll+0x16c>)
 800618e:	701a      	strb	r2, [r3, #0]
                    break;
 8006190:	e007      	b.n	80061a2 <eMBPoll+0xd6>
            for( i = 0; i < MB_FUNC_HANDLERS_MAX; i++ )
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	3301      	adds	r3, #1
 8006196:	607b      	str	r3, [r7, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b0f      	cmp	r3, #15
 800619c:	dddc      	ble.n	8006158 <eMBPoll+0x8c>
 800619e:	e000      	b.n	80061a2 <eMBPoll+0xd6>
                    break;
 80061a0:	bf00      	nop
                }
            }

            /* If the request was not sent to the broadcast address we
             * return a reply. */
            if( ucRcvAddress != MB_ADDRESS_BROADCAST )
 80061a2:	4b22      	ldr	r3, [pc, #136]	; (800622c <eMBPoll+0x160>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d031      	beq.n	800620e <eMBPoll+0x142>
            {
                if( eException != MB_EX_NONE )
 80061aa:	4b23      	ldr	r3, [pc, #140]	; (8006238 <eMBPoll+0x16c>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d01d      	beq.n	80061ee <eMBPoll+0x122>
                {
                    /* An exception occured. Build an error frame. */
                    usLength = 0;
 80061b2:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <eMBPoll+0x158>)
 80061b4:	2200      	movs	r2, #0
 80061b6:	801a      	strh	r2, [r3, #0]
                    ucMBFrame[usLength++] = ( UCHAR )( ucFunctionCode | MB_FUNC_ERROR );
 80061b8:	4b1e      	ldr	r3, [pc, #120]	; (8006234 <eMBPoll+0x168>)
 80061ba:	781a      	ldrb	r2, [r3, #0]
 80061bc:	4b1a      	ldr	r3, [pc, #104]	; (8006228 <eMBPoll+0x15c>)
 80061be:	6819      	ldr	r1, [r3, #0]
 80061c0:	4b18      	ldr	r3, [pc, #96]	; (8006224 <eMBPoll+0x158>)
 80061c2:	881b      	ldrh	r3, [r3, #0]
 80061c4:	1c58      	adds	r0, r3, #1
 80061c6:	b284      	uxth	r4, r0
 80061c8:	4816      	ldr	r0, [pc, #88]	; (8006224 <eMBPoll+0x158>)
 80061ca:	8004      	strh	r4, [r0, #0]
 80061cc:	440b      	add	r3, r1
 80061ce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80061d2:	b2d2      	uxtb	r2, r2
 80061d4:	701a      	strb	r2, [r3, #0]
                    ucMBFrame[usLength++] = eException;
 80061d6:	4b14      	ldr	r3, [pc, #80]	; (8006228 <eMBPoll+0x15c>)
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <eMBPoll+0x158>)
 80061dc:	881b      	ldrh	r3, [r3, #0]
 80061de:	1c59      	adds	r1, r3, #1
 80061e0:	b288      	uxth	r0, r1
 80061e2:	4910      	ldr	r1, [pc, #64]	; (8006224 <eMBPoll+0x158>)
 80061e4:	8008      	strh	r0, [r1, #0]
 80061e6:	4413      	add	r3, r2
 80061e8:	4a13      	ldr	r2, [pc, #76]	; (8006238 <eMBPoll+0x16c>)
 80061ea:	7812      	ldrb	r2, [r2, #0]
 80061ec:	701a      	strb	r2, [r3, #0]
                }
                if( ( eMBCurrentMode == MB_ASCII ) && MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS )
                {
                    vMBPortTimersDelay( MB_ASCII_TIMEOUT_WAIT_BEFORE_SEND_MS );
                }                
                eStatus = peMBFrameSendCur( ucMBAddress, ucMBFrame, usLength );
 80061ee:	4b14      	ldr	r3, [pc, #80]	; (8006240 <eMBPoll+0x174>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	4a0f      	ldr	r2, [pc, #60]	; (8006230 <eMBPoll+0x164>)
 80061f4:	7810      	ldrb	r0, [r2, #0]
 80061f6:	4a0c      	ldr	r2, [pc, #48]	; (8006228 <eMBPoll+0x15c>)
 80061f8:	6811      	ldr	r1, [r2, #0]
 80061fa:	4a0a      	ldr	r2, [pc, #40]	; (8006224 <eMBPoll+0x158>)
 80061fc:	8812      	ldrh	r2, [r2, #0]
 80061fe:	4798      	blx	r3
 8006200:	4603      	mov	r3, r0
 8006202:	70fb      	strb	r3, [r7, #3]
            }
            break;
 8006204:	e003      	b.n	800620e <eMBPoll+0x142>

        case EV_FRAME_SENT:
            break;
        }
    }
 8006206:	bf00      	nop
 8006208:	e002      	b.n	8006210 <eMBPoll+0x144>
            break;
 800620a:	bf00      	nop
 800620c:	e000      	b.n	8006210 <eMBPoll+0x144>
            break;
 800620e:	bf00      	nop
    return MB_ENOERR;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	bd90      	pop	{r4, r7, pc}
 800621a:	bf00      	nop
 800621c:	20000011 	.word	0x20000011
 8006220:	200002e4 	.word	0x200002e4
 8006224:	20000300 	.word	0x20000300
 8006228:	200002fc 	.word	0x200002fc
 800622c:	200002f8 	.word	0x200002f8
 8006230:	200002d4 	.word	0x200002d4
 8006234:	20000302 	.word	0x20000302
 8006238:	20000303 	.word	0x20000303
 800623c:	20000014 	.word	0x20000014
 8006240:	200002d8 	.word	0x200002d8

08006244 <usMBCRC16>:
    0x41, 0x81, 0x80, 0x40
};

USHORT
usMBCRC16( UCHAR * pucFrame, USHORT usLen )
{
 8006244:	b480      	push	{r7}
 8006246:	b085      	sub	sp, #20
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	807b      	strh	r3, [r7, #2]
    UCHAR           ucCRCHi = 0xFF;
 8006250:	23ff      	movs	r3, #255	; 0xff
 8006252:	73fb      	strb	r3, [r7, #15]
    UCHAR           ucCRCLo = 0xFF;
 8006254:	23ff      	movs	r3, #255	; 0xff
 8006256:	73bb      	strb	r3, [r7, #14]
    int             iIndex;

    while( usLen-- )
 8006258:	e013      	b.n	8006282 <usMBCRC16+0x3e>
    {
        iIndex = ucCRCLo ^ *( pucFrame++ );
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1c5a      	adds	r2, r3, #1
 800625e:	607a      	str	r2, [r7, #4]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	7bbb      	ldrb	r3, [r7, #14]
 8006264:	4053      	eors	r3, r2
 8006266:	b2db      	uxtb	r3, r3
 8006268:	60bb      	str	r3, [r7, #8]
        ucCRCLo = ( UCHAR )( ucCRCHi ^ aucCRCHi[iIndex] );
 800626a:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <usMBCRC16+0x64>)
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	4413      	add	r3, r2
 8006270:	781a      	ldrb	r2, [r3, #0]
 8006272:	7bfb      	ldrb	r3, [r7, #15]
 8006274:	4053      	eors	r3, r2
 8006276:	73bb      	strb	r3, [r7, #14]
        ucCRCHi = aucCRCLo[iIndex];
 8006278:	4a0c      	ldr	r2, [pc, #48]	; (80062ac <usMBCRC16+0x68>)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	73fb      	strb	r3, [r7, #15]
    while( usLen-- )
 8006282:	887b      	ldrh	r3, [r7, #2]
 8006284:	1e5a      	subs	r2, r3, #1
 8006286:	807a      	strh	r2, [r7, #2]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d1e6      	bne.n	800625a <usMBCRC16+0x16>
    }
    return ( USHORT )( ucCRCHi << 8 | ucCRCLo );
 800628c:	7bfb      	ldrb	r3, [r7, #15]
 800628e:	021b      	lsls	r3, r3, #8
 8006290:	b21a      	sxth	r2, r3
 8006292:	7bbb      	ldrb	r3, [r7, #14]
 8006294:	b21b      	sxth	r3, r3
 8006296:	4313      	orrs	r3, r2
 8006298:	b21b      	sxth	r3, r3
 800629a:	b29b      	uxth	r3, r3
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	0800829c 	.word	0x0800829c
 80062ac:	0800839c 	.word	0x0800839c

080062b0 <eMBFuncReadCoils>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadCoils( UCHAR * pucFrame, USHORT * usLen )
{
 80062b0:	b580      	push	{r7, lr}
 80062b2:	b086      	sub	sp, #24
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCount;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 80062ba:	2300      	movs	r3, #0
 80062bc:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d16c      	bne.n	80063a0 <eMBFuncReadCoils+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	3301      	adds	r3, #1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3302      	adds	r3, #2
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	b29a      	uxth	r2, r3
 80062da:	8abb      	ldrh	r3, [r7, #20]
 80062dc:	4313      	orrs	r3, r2
 80062de:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 80062e0:	8abb      	ldrh	r3, [r7, #20]
 80062e2:	3301      	adds	r3, #1
 80062e4:	82bb      	strh	r3, [r7, #20]

        usCoilCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF] << 8 );
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	3303      	adds	r3, #3
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	021b      	lsls	r3, r3, #8
 80062f0:	827b      	strh	r3, [r7, #18]
        usCoilCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_COILCNT_OFF + 1] );
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	8a7b      	ldrh	r3, [r7, #18]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usCoilCount >= 1 ) &&
 8006300:	8a7b      	ldrh	r3, [r7, #18]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d049      	beq.n	800639a <eMBFuncReadCoils+0xea>
 8006306:	8a7b      	ldrh	r3, [r7, #18]
 8006308:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800630c:	d245      	bcs.n	800639a <eMBFuncReadCoils+0xea>
            ( usCoilCount < MB_PDU_FUNC_READ_COILCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	2200      	movs	r2, #0
 8006316:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_COILS;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	1c5a      	adds	r2, r3, #1
 800631c:	60fa      	str	r2, [r7, #12]
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	881b      	ldrh	r3, [r3, #0]
 8006326:	3301      	adds	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usCoilCount & 0x0007 ) != 0 )
 800632e:	8a7b      	ldrh	r3, [r7, #18]
 8006330:	f003 0307 	and.w	r3, r3, #7
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <eMBFuncReadCoils+0x96>
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 + 1 );
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	08db      	lsrs	r3, r3, #3
 800633c:	b29b      	uxth	r3, r3
 800633e:	b2db      	uxtb	r3, r3
 8006340:	3301      	adds	r3, #1
 8006342:	75fb      	strb	r3, [r7, #23]
 8006344:	e003      	b.n	800634e <eMBFuncReadCoils+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR )( usCoilCount / 8 );
 8006346:	8a7b      	ldrh	r3, [r7, #18]
 8006348:	08db      	lsrs	r3, r3, #3
 800634a:	b29b      	uxth	r3, r3
 800634c:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	60fa      	str	r2, [r7, #12]
 8006354:	7dfa      	ldrb	r2, [r7, #23]
 8006356:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	3301      	adds	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegCoilsCB( pucFrameCur, usRegAddress, usCoilCount,
 8006364:	8a7a      	ldrh	r2, [r7, #18]
 8006366:	8ab9      	ldrh	r1, [r7, #20]
 8006368:	2300      	movs	r3, #0
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7fb fc99 	bl	8001ca2 <eMBRegCoilsCB>
 8006370:	4603      	mov	r3, r0
 8006372:	72fb      	strb	r3, [r7, #11]
                               MB_REG_READ );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006374:	7afb      	ldrb	r3, [r7, #11]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d006      	beq.n	8006388 <eMBFuncReadCoils+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	4618      	mov	r0, r3
 800637e:	f000 fd9b 	bl	8006eb8 <prveMBError2Exception>
 8006382:	4603      	mov	r3, r0
 8006384:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 8006386:	e00d      	b.n	80063a4 <eMBFuncReadCoils+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	881a      	ldrh	r2, [r3, #0]
 800638c:	7dfb      	ldrb	r3, [r7, #23]
 800638e:	b29b      	uxth	r3, r3
 8006390:	4413      	add	r3, r2
 8006392:	b29a      	uxth	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006398:	e004      	b.n	80063a4 <eMBFuncReadCoils+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800639a:	2303      	movs	r3, #3
 800639c:	75bb      	strb	r3, [r7, #22]
 800639e:	e001      	b.n	80063a4 <eMBFuncReadCoils+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 80063a0:	2303      	movs	r3, #3
 80063a2:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 80063a4:	7dbb      	ldrb	r3, [r7, #22]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <eMBFuncWriteCoil>:

#if MB_FUNC_WRITE_COIL_ENABLED > 0
eMBException
eMBFuncWriteCoil( UCHAR * pucFrame, USHORT * usLen )
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b084      	sub	sp, #16
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    UCHAR           ucBuf[2];

    eMBException    eStatus = MB_EX_NONE;
 80063b8:	2300      	movs	r3, #0
 80063ba:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	881b      	ldrh	r3, [r3, #0]
 80063c0:	2b05      	cmp	r3, #5
 80063c2:	d140      	bne.n	8006446 <eMBFuncWriteCoil+0x98>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	3301      	adds	r3, #1
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3302      	adds	r3, #2
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	b29a      	uxth	r2, r3
 80063d8:	89bb      	ldrh	r3, [r7, #12]
 80063da:	4313      	orrs	r3, r2
 80063dc:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80063de:	89bb      	ldrh	r3, [r7, #12]
 80063e0:	3301      	adds	r3, #1
 80063e2:	81bb      	strh	r3, [r7, #12]

        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	3304      	adds	r3, #4
 80063e8:	781b      	ldrb	r3, [r3, #0]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d128      	bne.n	8006440 <eMBFuncWriteCoil+0x92>
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3303      	adds	r3, #3
 80063f2:	781b      	ldrb	r3, [r3, #0]
        if( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF + 1] == 0x00 ) &&
 80063f4:	2bff      	cmp	r3, #255	; 0xff
 80063f6:	d004      	beq.n	8006402 <eMBFuncWriteCoil+0x54>
              ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0x00 ) ) )
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	3303      	adds	r3, #3
 80063fc:	781b      	ldrb	r3, [r3, #0]
            ( ( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF ) ||
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d11e      	bne.n	8006440 <eMBFuncWriteCoil+0x92>
        {
            ucBuf[1] = 0;
 8006402:	2300      	movs	r3, #0
 8006404:	727b      	strb	r3, [r7, #9]
            if( pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF] == 0xFF )
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3303      	adds	r3, #3
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2bff      	cmp	r3, #255	; 0xff
 800640e:	d102      	bne.n	8006416 <eMBFuncWriteCoil+0x68>
            {
                ucBuf[0] = 1;
 8006410:	2301      	movs	r3, #1
 8006412:	723b      	strb	r3, [r7, #8]
 8006414:	e001      	b.n	800641a <eMBFuncWriteCoil+0x6c>
            }
            else
            {
                ucBuf[0] = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	723b      	strb	r3, [r7, #8]
            }
            eRegStatus =
                eMBRegCoilsCB( &ucBuf[0], usRegAddress, 1, MB_REG_WRITE );
 800641a:	89b9      	ldrh	r1, [r7, #12]
 800641c:	f107 0008 	add.w	r0, r7, #8
 8006420:	2301      	movs	r3, #1
 8006422:	2201      	movs	r2, #1
 8006424:	f7fb fc3d 	bl	8001ca2 <eMBRegCoilsCB>
 8006428:	4603      	mov	r3, r0
 800642a:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800642c:	7afb      	ldrb	r3, [r7, #11]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d00b      	beq.n	800644a <eMBFuncWriteCoil+0x9c>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006432:	7afb      	ldrb	r3, [r7, #11]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 fd3f 	bl	8006eb8 <prveMBError2Exception>
 800643a:	4603      	mov	r3, r0
 800643c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800643e:	e004      	b.n	800644a <eMBFuncWriteCoil+0x9c>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006440:	2303      	movs	r3, #3
 8006442:	73fb      	strb	r3, [r7, #15]
 8006444:	e001      	b.n	800644a <eMBFuncWriteCoil+0x9c>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006446:	2303      	movs	r3, #3
 8006448:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 800644a:	7bfb      	ldrb	r3, [r7, #15]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3710      	adds	r7, #16
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <eMBFuncWriteMultipleCoils>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_COILS_ENABLED > 0
eMBException
eMBFuncWriteMultipleCoils( UCHAR * pucFrame, USHORT * usLen )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usCoilCnt;
    UCHAR           ucByteCount;
    UCHAR           ucByteCountVerify;

    eMBException    eStatus = MB_EX_NONE;
 800645e:	2300      	movs	r3, #0
 8006460:	73bb      	strb	r3, [r7, #14]
    eMBErrorCode    eRegStatus;

    if( *usLen > ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	881b      	ldrh	r3, [r3, #0]
 8006466:	2b05      	cmp	r3, #5
 8006468:	d954      	bls.n	8006514 <eMBFuncWriteMultipleCoils+0xc0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3301      	adds	r3, #1
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	b29b      	uxth	r3, r3
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3302      	adds	r3, #2
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	b29a      	uxth	r2, r3
 800647e:	89bb      	ldrh	r3, [r7, #12]
 8006480:	4313      	orrs	r3, r2
 8006482:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006484:	89bb      	ldrh	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	81bb      	strh	r3, [r7, #12]

        usCoilCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF] << 8 );
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	3303      	adds	r3, #3
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	b29b      	uxth	r3, r3
 8006492:	021b      	lsls	r3, r3, #8
 8006494:	817b      	strh	r3, [r7, #10]
        usCoilCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_COILCNT_OFF + 1] );
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3304      	adds	r3, #4
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	b29a      	uxth	r2, r3
 800649e:	897b      	ldrh	r3, [r7, #10]
 80064a0:	4313      	orrs	r3, r2
 80064a2:	817b      	strh	r3, [r7, #10]

        ucByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	795b      	ldrb	r3, [r3, #5]
 80064a8:	727b      	strb	r3, [r7, #9]

        /* Compute the number of expected bytes in the request. */
        if( ( usCoilCnt & 0x0007 ) != 0 )
 80064aa:	897b      	ldrh	r3, [r7, #10]
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d006      	beq.n	80064c2 <eMBFuncWriteMultipleCoils+0x6e>
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 + 1 );
 80064b4:	897b      	ldrh	r3, [r7, #10]
 80064b6:	08db      	lsrs	r3, r3, #3
 80064b8:	b29b      	uxth	r3, r3
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	3301      	adds	r3, #1
 80064be:	73fb      	strb	r3, [r7, #15]
 80064c0:	e003      	b.n	80064ca <eMBFuncWriteMultipleCoils+0x76>
        }
        else
        {
            ucByteCountVerify = ( UCHAR )( usCoilCnt / 8 );
 80064c2:	897b      	ldrh	r3, [r7, #10]
 80064c4:	08db      	lsrs	r3, r3, #3
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	73fb      	strb	r3, [r7, #15]
        }

        if( ( usCoilCnt >= 1 ) &&
 80064ca:	897b      	ldrh	r3, [r7, #10]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01e      	beq.n	800650e <eMBFuncWriteMultipleCoils+0xba>
 80064d0:	897b      	ldrh	r3, [r7, #10]
 80064d2:	f5b3 6ff6 	cmp.w	r3, #1968	; 0x7b0
 80064d6:	d81a      	bhi.n	800650e <eMBFuncWriteMultipleCoils+0xba>
            ( usCoilCnt <= MB_PDU_FUNC_WRITE_MUL_COILCNT_MAX ) &&
 80064d8:	7bfa      	ldrb	r2, [r7, #15]
 80064da:	7a7b      	ldrb	r3, [r7, #9]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d116      	bne.n	800650e <eMBFuncWriteMultipleCoils+0xba>
            ( ucByteCountVerify == ucByteCount ) )
        {
            eRegStatus =
                eMBRegCoilsCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	1d98      	adds	r0, r3, #6
 80064e4:	897a      	ldrh	r2, [r7, #10]
 80064e6:	89b9      	ldrh	r1, [r7, #12]
 80064e8:	2301      	movs	r3, #1
 80064ea:	f7fb fbda 	bl	8001ca2 <eMBRegCoilsCB>
 80064ee:	4603      	mov	r3, r0
 80064f0:	723b      	strb	r3, [r7, #8]
                               usRegAddress, usCoilCnt, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80064f2:	7a3b      	ldrb	r3, [r7, #8]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d006      	beq.n	8006506 <eMBFuncWriteMultipleCoils+0xb2>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80064f8:	7a3b      	ldrb	r3, [r7, #8]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 fcdc 	bl	8006eb8 <prveMBError2Exception>
 8006500:	4603      	mov	r3, r0
 8006502:	73bb      	strb	r3, [r7, #14]
            if( eRegStatus != MB_ENOERR )
 8006504:	e008      	b.n	8006518 <eMBFuncWriteMultipleCoils+0xc4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2205      	movs	r2, #5
 800650a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800650c:	e004      	b.n	8006518 <eMBFuncWriteMultipleCoils+0xc4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800650e:	2303      	movs	r3, #3
 8006510:	73bb      	strb	r3, [r7, #14]
 8006512:	e001      	b.n	8006518 <eMBFuncWriteMultipleCoils+0xc4>
    }
    else
    {
        /* Can't be a valid write coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006514:	2303      	movs	r3, #3
 8006516:	73bb      	strb	r3, [r7, #14]
    }
    return eStatus;
 8006518:	7bbb      	ldrb	r3, [r7, #14]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <eMBFuncReadDiscreteInputs>:

#if MB_FUNC_READ_COILS_ENABLED > 0

eMBException
eMBFuncReadDiscreteInputs( UCHAR * pucFrame, USHORT * usLen )
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usDiscreteCnt;
    UCHAR           ucNBytes;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 800652c:	2300      	movs	r3, #0
 800652e:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	881b      	ldrh	r3, [r3, #0]
 8006534:	2b05      	cmp	r3, #5
 8006536:	d16c      	bne.n	8006612 <eMBFuncReadDiscreteInputs+0xf0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3301      	adds	r3, #1
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	b29b      	uxth	r3, r3
 8006540:	021b      	lsls	r3, r3, #8
 8006542:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3302      	adds	r3, #2
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	b29a      	uxth	r2, r3
 800654c:	8abb      	ldrh	r3, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 8006552:	8abb      	ldrh	r3, [r7, #20]
 8006554:	3301      	adds	r3, #1
 8006556:	82bb      	strh	r3, [r7, #20]

        usDiscreteCnt = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF] << 8 );
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3303      	adds	r3, #3
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	b29b      	uxth	r3, r3
 8006560:	021b      	lsls	r3, r3, #8
 8006562:	827b      	strh	r3, [r7, #18]
        usDiscreteCnt |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_DISCCNT_OFF + 1] );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3304      	adds	r3, #4
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	b29a      	uxth	r2, r3
 800656c:	8a7b      	ldrh	r3, [r7, #18]
 800656e:	4313      	orrs	r3, r2
 8006570:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usDiscreteCnt >= 1 ) &&
 8006572:	8a7b      	ldrh	r3, [r7, #18]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d049      	beq.n	800660c <eMBFuncReadDiscreteInputs+0xea>
 8006578:	8a7b      	ldrh	r3, [r7, #18]
 800657a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800657e:	d245      	bcs.n	800660c <eMBFuncReadDiscreteInputs+0xea>
            ( usDiscreteCnt < MB_PDU_FUNC_READ_DISCCNT_MAX ) )
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	2200      	movs	r2, #0
 8006588:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_DISCRETE_INPUTS;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	60fa      	str	r2, [r7, #12]
 8006590:	2202      	movs	r2, #2
 8006592:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	881b      	ldrh	r3, [r3, #0]
 8006598:	3301      	adds	r3, #1
 800659a:	b29a      	uxth	r2, r3
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	801a      	strh	r2, [r3, #0]

            /* Test if the quantity of coils is a multiple of 8. If not last
             * byte is only partially field with unused coils set to zero. */
            if( ( usDiscreteCnt & 0x0007 ) != 0 )
 80065a0:	8a7b      	ldrh	r3, [r7, #18]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d006      	beq.n	80065b8 <eMBFuncReadDiscreteInputs+0x96>
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 + 1 );
 80065aa:	8a7b      	ldrh	r3, [r7, #18]
 80065ac:	08db      	lsrs	r3, r3, #3
 80065ae:	b29b      	uxth	r3, r3
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	3301      	adds	r3, #1
 80065b4:	75fb      	strb	r3, [r7, #23]
 80065b6:	e003      	b.n	80065c0 <eMBFuncReadDiscreteInputs+0x9e>
            }
            else
            {
                ucNBytes = ( UCHAR ) ( usDiscreteCnt / 8 );
 80065b8:	8a7b      	ldrh	r3, [r7, #18]
 80065ba:	08db      	lsrs	r3, r3, #3
 80065bc:	b29b      	uxth	r3, r3
 80065be:	75fb      	strb	r3, [r7, #23]
            }
            *pucFrameCur++ = ucNBytes;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	60fa      	str	r2, [r7, #12]
 80065c6:	7dfa      	ldrb	r2, [r7, #23]
 80065c8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegDiscreteCB( pucFrameCur, usRegAddress, usDiscreteCnt );
 80065d6:	8a7a      	ldrh	r2, [r7, #18]
 80065d8:	8abb      	ldrh	r3, [r7, #20]
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fb fb74 	bl	8001cca <eMBRegDiscreteCB>
 80065e2:	4603      	mov	r3, r0
 80065e4:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80065e6:	7afb      	ldrb	r3, [r7, #11]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d006      	beq.n	80065fa <eMBFuncReadDiscreteInputs+0xd8>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80065ec:	7afb      	ldrb	r3, [r7, #11]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f000 fc62 	bl	8006eb8 <prveMBError2Exception>
 80065f4:	4603      	mov	r3, r0
 80065f6:	75bb      	strb	r3, [r7, #22]
            if( eRegStatus != MB_ENOERR )
 80065f8:	e00d      	b.n	8006616 <eMBFuncReadDiscreteInputs+0xf4>
            else
            {
                /* The response contains the function code, the starting address
                 * and the quantity of registers. We reuse the old values in the 
                 * buffer because they are still valid. */
                *usLen += ucNBytes;;
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	881a      	ldrh	r2, [r3, #0]
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	b29b      	uxth	r3, r3
 8006602:	4413      	add	r3, r2
 8006604:	b29a      	uxth	r2, r3
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 800660a:	e004      	b.n	8006616 <eMBFuncReadDiscreteInputs+0xf4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800660c:	2303      	movs	r3, #3
 800660e:	75bb      	strb	r3, [r7, #22]
 8006610:	e001      	b.n	8006616 <eMBFuncReadDiscreteInputs+0xf4>
    }
    else
    {
        /* Can't be a valid read coil register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006612:	2303      	movs	r3, #3
 8006614:	75bb      	strb	r3, [r7, #22]
    }
    return eStatus;
 8006616:	7dbb      	ldrb	r3, [r7, #22]
}
 8006618:	4618      	mov	r0, r3
 800661a:	3718      	adds	r7, #24
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <eMBFuncWriteHoldingRegister>:

#if MB_FUNC_WRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncWriteHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    eMBException    eStatus = MB_EX_NONE;
 800662a:	2300      	movs	r3, #0
 800662c:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_WRITE_SIZE + MB_PDU_SIZE_MIN ) )
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	2b05      	cmp	r3, #5
 8006634:	d122      	bne.n	800667c <eMBFuncWriteHoldingRegister+0x5c>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF] << 8 );
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	3301      	adds	r3, #1
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	b29b      	uxth	r3, r3
 800663e:	021b      	lsls	r3, r3, #8
 8006640:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_ADDR_OFF + 1] );
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	3302      	adds	r3, #2
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	b29a      	uxth	r2, r3
 800664a:	89bb      	ldrh	r3, [r7, #12]
 800664c:	4313      	orrs	r3, r2
 800664e:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 8006650:	89bb      	ldrh	r3, [r7, #12]
 8006652:	3301      	adds	r3, #1
 8006654:	81bb      	strh	r3, [r7, #12]

        /* Make callback to update the value. */
        eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_VALUE_OFF],
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	1cd8      	adds	r0, r3, #3
 800665a:	89b9      	ldrh	r1, [r7, #12]
 800665c:	2301      	movs	r3, #1
 800665e:	2201      	movs	r2, #1
 8006660:	f7fb fa7e 	bl	8001b60 <eMBRegHoldingCB>
 8006664:	4603      	mov	r3, r0
 8006666:	72fb      	strb	r3, [r7, #11]
                                      usRegAddress, 1, MB_REG_WRITE );

        /* If an error occured convert it into a Modbus exception. */
        if( eRegStatus != MB_ENOERR )
 8006668:	7afb      	ldrb	r3, [r7, #11]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d008      	beq.n	8006680 <eMBFuncWriteHoldingRegister+0x60>
        {
            eStatus = prveMBError2Exception( eRegStatus );
 800666e:	7afb      	ldrb	r3, [r7, #11]
 8006670:	4618      	mov	r0, r3
 8006672:	f000 fc21 	bl	8006eb8 <prveMBError2Exception>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
 800667a:	e001      	b.n	8006680 <eMBFuncWriteHoldingRegister+0x60>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800667c:	2303      	movs	r3, #3
 800667e:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8006680:	7bfb      	ldrb	r3, [r7, #15]
}
 8006682:	4618      	mov	r0, r3
 8006684:	3710      	adds	r7, #16
 8006686:	46bd      	mov	sp, r7
 8006688:	bd80      	pop	{r7, pc}

0800668a <eMBFuncWriteMultipleHoldingRegister>:
#endif

#if MB_FUNC_WRITE_MULTIPLE_HOLDING_ENABLED > 0
eMBException
eMBFuncWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800668a:	b580      	push	{r7, lr}
 800668c:	b084      	sub	sp, #16
 800668e:	af00      	add	r7, sp, #0
 8006690:	6078      	str	r0, [r7, #4]
 8006692:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR           ucRegByteCount;

    eMBException    eStatus = MB_EX_NONE;
 8006694:	2300      	movs	r3, #0
 8006696:	73fb      	strb	r3, [r7, #15]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_WRITE_MUL_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	881b      	ldrh	r3, [r3, #0]
 800669c:	2b05      	cmp	r3, #5
 800669e:	d946      	bls.n	800672e <eMBFuncWriteMultipleHoldingRegister+0xa4>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF] << 8 );
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	3301      	adds	r3, #1
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	81bb      	strh	r3, [r7, #12]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_ADDR_OFF + 1] );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	3302      	adds	r3, #2
 80066b0:	781b      	ldrb	r3, [r3, #0]
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	89bb      	ldrh	r3, [r7, #12]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	81bb      	strh	r3, [r7, #12]
        usRegAddress++;
 80066ba:	89bb      	ldrh	r3, [r7, #12]
 80066bc:	3301      	adds	r3, #1
 80066be:	81bb      	strh	r3, [r7, #12]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF] << 8 );
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	3303      	adds	r3, #3
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	817b      	strh	r3, [r7, #10]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_WRITE_MUL_REGCNT_OFF + 1] );
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	3304      	adds	r3, #4
 80066d0:	781b      	ldrb	r3, [r3, #0]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	897b      	ldrh	r3, [r7, #10]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	817b      	strh	r3, [r7, #10]

        ucRegByteCount = pucFrame[MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF];
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	795b      	ldrb	r3, [r3, #5]
 80066de:	727b      	strb	r3, [r7, #9]

        if( ( usRegCount >= 1 ) &&
 80066e0:	897b      	ldrh	r3, [r7, #10]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d020      	beq.n	8006728 <eMBFuncWriteMultipleHoldingRegister+0x9e>
 80066e6:	897b      	ldrh	r3, [r7, #10]
 80066e8:	2b78      	cmp	r3, #120	; 0x78
 80066ea:	d81d      	bhi.n	8006728 <eMBFuncWriteMultipleHoldingRegister+0x9e>
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
            ( ucRegByteCount == ( UCHAR ) ( 2 * usRegCount ) ) )
 80066ec:	897b      	ldrh	r3, [r7, #10]
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	b2db      	uxtb	r3, r3
            ( usRegCount <= MB_PDU_FUNC_WRITE_MUL_REGCNT_MAX ) &&
 80066f4:	7a7a      	ldrb	r2, [r7, #9]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d116      	bne.n	8006728 <eMBFuncWriteMultipleHoldingRegister+0x9e>
        {
            /* Make callback to update the register values. */
            eRegStatus =
                eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_WRITE_MUL_VALUES_OFF],
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	1d98      	adds	r0, r3, #6
 80066fe:	897a      	ldrh	r2, [r7, #10]
 8006700:	89b9      	ldrh	r1, [r7, #12]
 8006702:	2301      	movs	r3, #1
 8006704:	f7fb fa2c 	bl	8001b60 <eMBRegHoldingCB>
 8006708:	4603      	mov	r3, r0
 800670a:	723b      	strb	r3, [r7, #8]
                                 usRegAddress, usRegCount, MB_REG_WRITE );

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 800670c:	7a3b      	ldrb	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d006      	beq.n	8006720 <eMBFuncWriteMultipleHoldingRegister+0x96>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006712:	7a3b      	ldrb	r3, [r7, #8]
 8006714:	4618      	mov	r0, r3
 8006716:	f000 fbcf 	bl	8006eb8 <prveMBError2Exception>
 800671a:	4603      	mov	r3, r0
 800671c:	73fb      	strb	r3, [r7, #15]
            if( eRegStatus != MB_ENOERR )
 800671e:	e008      	b.n	8006732 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            {
                /* The response contains the function code, the starting
                 * address and the quantity of registers. We reuse the
                 * old values in the buffer because they are still valid.
                 */
                *usLen = MB_PDU_FUNC_WRITE_MUL_BYTECNT_OFF;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	2205      	movs	r2, #5
 8006724:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006726:	e004      	b.n	8006732 <eMBFuncWriteMultipleHoldingRegister+0xa8>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006728:	2303      	movs	r3, #3
 800672a:	73fb      	strb	r3, [r7, #15]
 800672c:	e001      	b.n	8006732 <eMBFuncWriteMultipleHoldingRegister+0xa8>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800672e:	2303      	movs	r3, #3
 8006730:	73fb      	strb	r3, [r7, #15]
    }
    return eStatus;
 8006732:	7bfb      	ldrb	r3, [r7, #15]
}
 8006734:	4618      	mov	r0, r3
 8006736:	3710      	adds	r7, #16
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <eMBFuncReadHoldingRegister>:

#if MB_FUNC_READ_HOLDING_ENABLED > 0

eMBException
eMBFuncReadHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006746:	2300      	movs	r3, #0
 8006748:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	881b      	ldrh	r3, [r3, #0]
 800674e:	2b05      	cmp	r3, #5
 8006750:	d15c      	bne.n	800680c <eMBFuncReadHoldingRegister+0xd0>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3301      	adds	r3, #1
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	b29b      	uxth	r3, r3
 800675a:	021b      	lsls	r3, r3, #8
 800675c:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	3302      	adds	r3, #2
 8006762:	781b      	ldrb	r3, [r3, #0]
 8006764:	b29a      	uxth	r2, r3
 8006766:	8abb      	ldrh	r3, [r7, #20]
 8006768:	4313      	orrs	r3, r2
 800676a:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800676c:	8abb      	ldrh	r3, [r7, #20]
 800676e:	3301      	adds	r3, #1
 8006770:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3303      	adds	r3, #3
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	021b      	lsls	r3, r3, #8
 800677c:	827b      	strh	r3, [r7, #18]
        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	3304      	adds	r3, #4
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 ) && ( usRegCount <= MB_PDU_FUNC_READ_REGCNT_MAX ) )
 8006786:	8a7b      	ldrh	r3, [r7, #18]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d03c      	beq.n	8006806 <eMBFuncReadHoldingRegister+0xca>
 800678c:	8a7b      	ldrh	r3, [r7, #18]
 800678e:	2b7d      	cmp	r3, #125	; 0x7d
 8006790:	d839      	bhi.n	8006806 <eMBFuncReadHoldingRegister+0xca>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	2200      	movs	r2, #0
 800679a:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_HOLDING_REGISTER;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	60fa      	str	r2, [r7, #12]
 80067a2:	2203      	movs	r2, #3
 80067a4:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	3301      	adds	r3, #1
 80067ac:	b29a      	uxth	r2, r3
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR ) ( usRegCount * 2 );
 80067b2:	8a7b      	ldrh	r3, [r7, #18]
 80067b4:	b2da      	uxtb	r2, r3
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	1c59      	adds	r1, r3, #1
 80067ba:	60f9      	str	r1, [r7, #12]
 80067bc:	0052      	lsls	r2, r2, #1
 80067be:	b2d2      	uxtb	r2, r2
 80067c0:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	881b      	ldrh	r3, [r3, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	b29a      	uxth	r2, r3
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	801a      	strh	r2, [r3, #0]

            /* Make callback to fill the buffer. */
            eRegStatus = eMBRegHoldingCB( pucFrameCur, usRegAddress, usRegCount, MB_REG_READ );
 80067ce:	8a7a      	ldrh	r2, [r7, #18]
 80067d0:	8ab9      	ldrh	r1, [r7, #20]
 80067d2:	2300      	movs	r3, #0
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7fb f9c3 	bl	8001b60 <eMBRegHoldingCB>
 80067da:	4603      	mov	r3, r0
 80067dc:	72fb      	strb	r3, [r7, #11]
            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 80067de:	7afb      	ldrb	r3, [r7, #11]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d006      	beq.n	80067f2 <eMBFuncReadHoldingRegister+0xb6>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fb66 	bl	8006eb8 <prveMBError2Exception>
 80067ec:	4603      	mov	r3, r0
 80067ee:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 80067f0:	e00e      	b.n	8006810 <eMBFuncReadHoldingRegister+0xd4>
            }
            else
            {
                *usLen += usRegCount * 2;
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	881a      	ldrh	r2, [r3, #0]
 80067f6:	8a7b      	ldrh	r3, [r7, #18]
 80067f8:	005b      	lsls	r3, r3, #1
 80067fa:	b29b      	uxth	r3, r3
 80067fc:	4413      	add	r3, r2
 80067fe:	b29a      	uxth	r2, r3
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006804:	e004      	b.n	8006810 <eMBFuncReadHoldingRegister+0xd4>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006806:	2303      	movs	r3, #3
 8006808:	75fb      	strb	r3, [r7, #23]
 800680a:	e001      	b.n	8006810 <eMBFuncReadHoldingRegister+0xd4>
        }
    }
    else
    {
        /* Can't be a valid request because the length is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 800680c:	2303      	movs	r3, #3
 800680e:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8006810:	7dfb      	ldrb	r3, [r7, #23]
}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <eMBFuncReadWriteMultipleHoldingRegister>:

#if MB_FUNC_READWRITE_HOLDING_ENABLED > 0

eMBException
eMBFuncReadWriteMultipleHoldingRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b086      	sub	sp, #24
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
 8006822:	6039      	str	r1, [r7, #0]
    USHORT          usRegWriteAddress;
    USHORT          usRegWriteCount;
    UCHAR           ucRegWriteByteCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006824:	2300      	movs	r3, #0
 8006826:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen >= ( MB_PDU_FUNC_READWRITE_SIZE_MIN + MB_PDU_SIZE_MIN ) )
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	2b09      	cmp	r3, #9
 800682e:	f240 8099 	bls.w	8006964 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
    {
        usRegReadAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF] << 8U );
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	3301      	adds	r3, #1
 8006836:	781b      	ldrb	r3, [r3, #0]
 8006838:	b29b      	uxth	r3, r3
 800683a:	021b      	lsls	r3, r3, #8
 800683c:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_ADDR_OFF + 1] );
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	3302      	adds	r3, #2
 8006842:	781b      	ldrb	r3, [r3, #0]
 8006844:	b29a      	uxth	r2, r3
 8006846:	8abb      	ldrh	r3, [r7, #20]
 8006848:	4313      	orrs	r3, r2
 800684a:	82bb      	strh	r3, [r7, #20]
        usRegReadAddress++;
 800684c:	8abb      	ldrh	r3, [r7, #20]
 800684e:	3301      	adds	r3, #1
 8006850:	82bb      	strh	r3, [r7, #20]

        usRegReadCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF] << 8U );
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	3303      	adds	r3, #3
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	b29b      	uxth	r3, r3
 800685a:	021b      	lsls	r3, r3, #8
 800685c:	827b      	strh	r3, [r7, #18]
        usRegReadCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_READ_REGCNT_OFF + 1] );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	3304      	adds	r3, #4
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	b29a      	uxth	r2, r3
 8006866:	8a7b      	ldrh	r3, [r7, #18]
 8006868:	4313      	orrs	r3, r2
 800686a:	827b      	strh	r3, [r7, #18]

        usRegWriteAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF] << 8U );
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	3305      	adds	r3, #5
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	b29b      	uxth	r3, r3
 8006874:	021b      	lsls	r3, r3, #8
 8006876:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_ADDR_OFF + 1] );
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	3306      	adds	r3, #6
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	b29a      	uxth	r2, r3
 8006880:	8a3b      	ldrh	r3, [r7, #16]
 8006882:	4313      	orrs	r3, r2
 8006884:	823b      	strh	r3, [r7, #16]
        usRegWriteAddress++;
 8006886:	8a3b      	ldrh	r3, [r7, #16]
 8006888:	3301      	adds	r3, #1
 800688a:	823b      	strh	r3, [r7, #16]

        usRegWriteCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF] << 8U );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3307      	adds	r3, #7
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	b29b      	uxth	r3, r3
 8006894:	021b      	lsls	r3, r3, #8
 8006896:	81fb      	strh	r3, [r7, #14]
        usRegWriteCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READWRITE_WRITE_REGCNT_OFF + 1] );
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	3308      	adds	r3, #8
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	b29a      	uxth	r2, r3
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	81fb      	strh	r3, [r7, #14]

        ucRegWriteByteCount = pucFrame[MB_PDU_FUNC_READWRITE_BYTECNT_OFF];
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7a5b      	ldrb	r3, [r3, #9]
 80068aa:	737b      	strb	r3, [r7, #13]

        if( ( usRegReadCount >= 1 ) && ( usRegReadCount <= 0x7D ) &&
 80068ac:	8a7b      	ldrh	r3, [r7, #18]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d056      	beq.n	8006960 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80068b2:	8a7b      	ldrh	r3, [r7, #18]
 80068b4:	2b7d      	cmp	r3, #125	; 0x7d
 80068b6:	d853      	bhi.n	8006960 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
 80068b8:	89fb      	ldrh	r3, [r7, #14]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d050      	beq.n	8006960 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80068be:	89fb      	ldrh	r3, [r7, #14]
 80068c0:	2b79      	cmp	r3, #121	; 0x79
 80068c2:	d84d      	bhi.n	8006960 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
            ( ( 2 * usRegWriteCount ) == ucRegWriteByteCount ) )
 80068c4:	89fb      	ldrh	r3, [r7, #14]
 80068c6:	005a      	lsls	r2, r3, #1
 80068c8:	7b7b      	ldrb	r3, [r7, #13]
            ( usRegWriteCount >= 1 ) && ( usRegWriteCount <= 0x79 ) &&
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d148      	bne.n	8006960 <eMBFuncReadWriteMultipleHoldingRegister+0x146>
        {
            /* Make callback to update the register values. */
            eRegStatus = eMBRegHoldingCB( &pucFrame[MB_PDU_FUNC_READWRITE_WRITE_VALUES_OFF],
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f103 000a 	add.w	r0, r3, #10
 80068d4:	89fa      	ldrh	r2, [r7, #14]
 80068d6:	8a39      	ldrh	r1, [r7, #16]
 80068d8:	2301      	movs	r3, #1
 80068da:	f7fb f941 	bl	8001b60 <eMBRegHoldingCB>
 80068de:	4603      	mov	r3, r0
 80068e0:	75bb      	strb	r3, [r7, #22]
                                          usRegWriteAddress, usRegWriteCount, MB_REG_WRITE );

            if( eRegStatus == MB_ENOERR )
 80068e2:	7dbb      	ldrb	r3, [r7, #22]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d131      	bne.n	800694c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
            {
                /* Set the current PDU data pointer to the beginning. */
                pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	60bb      	str	r3, [r7, #8]
                *usLen = MB_PDU_FUNC_OFF;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2200      	movs	r2, #0
 80068f0:	801a      	strh	r2, [r3, #0]

                /* First byte contains the function code. */
                *pucFrameCur++ = MB_FUNC_READWRITE_MULTIPLE_REGISTERS;
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	60ba      	str	r2, [r7, #8]
 80068f8:	2217      	movs	r2, #23
 80068fa:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	881b      	ldrh	r3, [r3, #0]
 8006900:	3301      	adds	r3, #1
 8006902:	b29a      	uxth	r2, r3
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	801a      	strh	r2, [r3, #0]

                /* Second byte in the response contain the number of bytes. */
                *pucFrameCur++ = ( UCHAR ) ( usRegReadCount * 2 );
 8006908:	8a7b      	ldrh	r3, [r7, #18]
 800690a:	b2da      	uxtb	r2, r3
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	1c59      	adds	r1, r3, #1
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	0052      	lsls	r2, r2, #1
 8006914:	b2d2      	uxtb	r2, r2
 8006916:	701a      	strb	r2, [r3, #0]
                *usLen += 1;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	881b      	ldrh	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	b29a      	uxth	r2, r3
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	801a      	strh	r2, [r3, #0]

                /* Make the read callback. */
                eRegStatus =
                    eMBRegHoldingCB( pucFrameCur, usRegReadAddress, usRegReadCount, MB_REG_READ );
 8006924:	8a7a      	ldrh	r2, [r7, #18]
 8006926:	8ab9      	ldrh	r1, [r7, #20]
 8006928:	2300      	movs	r3, #0
 800692a:	68b8      	ldr	r0, [r7, #8]
 800692c:	f7fb f918 	bl	8001b60 <eMBRegHoldingCB>
 8006930:	4603      	mov	r3, r0
 8006932:	75bb      	strb	r3, [r7, #22]
                if( eRegStatus == MB_ENOERR )
 8006934:	7dbb      	ldrb	r3, [r7, #22]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d108      	bne.n	800694c <eMBFuncReadWriteMultipleHoldingRegister+0x132>
                {
                    *usLen += 2 * usRegReadCount;
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	881a      	ldrh	r2, [r3, #0]
 800693e:	8a7b      	ldrh	r3, [r7, #18]
 8006940:	005b      	lsls	r3, r3, #1
 8006942:	b29b      	uxth	r3, r3
 8006944:	4413      	add	r3, r2
 8006946:	b29a      	uxth	r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	801a      	strh	r2, [r3, #0]
                }
            }
            if( eRegStatus != MB_ENOERR )
 800694c:	7dbb      	ldrb	r3, [r7, #22]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d008      	beq.n	8006964 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006952:	7dbb      	ldrb	r3, [r7, #22]
 8006954:	4618      	mov	r0, r3
 8006956:	f000 faaf 	bl	8006eb8 <prveMBError2Exception>
 800695a:	4603      	mov	r3, r0
 800695c:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 800695e:	e001      	b.n	8006964 <eMBFuncReadWriteMultipleHoldingRegister+0x14a>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006960:	2303      	movs	r3, #3
 8006962:	75fb      	strb	r3, [r7, #23]
        }
    }
    return eStatus;
 8006964:	7dfb      	ldrb	r3, [r7, #23]
}
 8006966:	4618      	mov	r0, r3
 8006968:	3718      	adds	r7, #24
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <eMBFuncReadInputRegister>:
/* ----------------------- Start implementation -----------------------------*/
#if MB_FUNC_READ_INPUT_ENABLED > 0

eMBException
eMBFuncReadInputRegister( UCHAR * pucFrame, USHORT * usLen )
{
 800696e:	b580      	push	{r7, lr}
 8006970:	b086      	sub	sp, #24
 8006972:	af00      	add	r7, sp, #0
 8006974:	6078      	str	r0, [r7, #4]
 8006976:	6039      	str	r1, [r7, #0]
    USHORT          usRegAddress;
    USHORT          usRegCount;
    UCHAR          *pucFrameCur;

    eMBException    eStatus = MB_EX_NONE;
 8006978:	2300      	movs	r3, #0
 800697a:	75fb      	strb	r3, [r7, #23]
    eMBErrorCode    eRegStatus;

    if( *usLen == ( MB_PDU_FUNC_READ_SIZE + MB_PDU_SIZE_MIN ) )
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	881b      	ldrh	r3, [r3, #0]
 8006980:	2b05      	cmp	r3, #5
 8006982:	d15f      	bne.n	8006a44 <eMBFuncReadInputRegister+0xd6>
    {
        usRegAddress = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF] << 8 );
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3301      	adds	r3, #1
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	b29b      	uxth	r3, r3
 800698c:	021b      	lsls	r3, r3, #8
 800698e:	82bb      	strh	r3, [r7, #20]
        usRegAddress |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_ADDR_OFF + 1] );
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3302      	adds	r3, #2
 8006994:	781b      	ldrb	r3, [r3, #0]
 8006996:	b29a      	uxth	r2, r3
 8006998:	8abb      	ldrh	r3, [r7, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	82bb      	strh	r3, [r7, #20]
        usRegAddress++;
 800699e:	8abb      	ldrh	r3, [r7, #20]
 80069a0:	3301      	adds	r3, #1
 80069a2:	82bb      	strh	r3, [r7, #20]

        usRegCount = ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF] << 8 );
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	3303      	adds	r3, #3
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	021b      	lsls	r3, r3, #8
 80069ae:	827b      	strh	r3, [r7, #18]
        usRegCount |= ( USHORT )( pucFrame[MB_PDU_FUNC_READ_REGCNT_OFF + 1] );
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	3304      	adds	r3, #4
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	b29a      	uxth	r2, r3
 80069b8:	8a7b      	ldrh	r3, [r7, #18]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	827b      	strh	r3, [r7, #18]

        /* Check if the number of registers to read is valid. If not
         * return Modbus illegal data value exception. 
         */
        if( ( usRegCount >= 1 )
 80069be:	8a7b      	ldrh	r3, [r7, #18]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d03c      	beq.n	8006a3e <eMBFuncReadInputRegister+0xd0>
            && ( usRegCount < MB_PDU_FUNC_READ_REGCNT_MAX ) )
 80069c4:	8a7b      	ldrh	r3, [r7, #18]
 80069c6:	2b7c      	cmp	r3, #124	; 0x7c
 80069c8:	d839      	bhi.n	8006a3e <eMBFuncReadInputRegister+0xd0>
        {
            /* Set the current PDU data pointer to the beginning. */
            pucFrameCur = &pucFrame[MB_PDU_FUNC_OFF];
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60fb      	str	r3, [r7, #12]
            *usLen = MB_PDU_FUNC_OFF;
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2200      	movs	r2, #0
 80069d2:	801a      	strh	r2, [r3, #0]

            /* First byte contains the function code. */
            *pucFrameCur++ = MB_FUNC_READ_INPUT_REGISTER;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	60fa      	str	r2, [r7, #12]
 80069da:	2204      	movs	r2, #4
 80069dc:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	881b      	ldrh	r3, [r3, #0]
 80069e2:	3301      	adds	r3, #1
 80069e4:	b29a      	uxth	r2, r3
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	801a      	strh	r2, [r3, #0]

            /* Second byte in the response contain the number of bytes. */
            *pucFrameCur++ = ( UCHAR )( usRegCount * 2 );
 80069ea:	8a7b      	ldrh	r3, [r7, #18]
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	60f9      	str	r1, [r7, #12]
 80069f4:	0052      	lsls	r2, r2, #1
 80069f6:	b2d2      	uxtb	r2, r2
 80069f8:	701a      	strb	r2, [r3, #0]
            *usLen += 1;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	881b      	ldrh	r3, [r3, #0]
 80069fe:	3301      	adds	r3, #1
 8006a00:	b29a      	uxth	r2, r3
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	801a      	strh	r2, [r3, #0]

            eRegStatus =
                eMBRegInputCB( pucFrameCur, usRegAddress, usRegCount );
 8006a06:	8a7a      	ldrh	r2, [r7, #18]
 8006a08:	8abb      	ldrh	r3, [r7, #20]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f7fb f939 	bl	8001c84 <eMBRegInputCB>
 8006a12:	4603      	mov	r3, r0
 8006a14:	72fb      	strb	r3, [r7, #11]

            /* If an error occured convert it into a Modbus exception. */
            if( eRegStatus != MB_ENOERR )
 8006a16:	7afb      	ldrb	r3, [r7, #11]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d006      	beq.n	8006a2a <eMBFuncReadInputRegister+0xbc>
            {
                eStatus = prveMBError2Exception( eRegStatus );
 8006a1c:	7afb      	ldrb	r3, [r7, #11]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fa4a 	bl	8006eb8 <prveMBError2Exception>
 8006a24:	4603      	mov	r3, r0
 8006a26:	75fb      	strb	r3, [r7, #23]
            if( eRegStatus != MB_ENOERR )
 8006a28:	e00e      	b.n	8006a48 <eMBFuncReadInputRegister+0xda>
            }
            else
            {
                *usLen += usRegCount * 2;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	881a      	ldrh	r2, [r3, #0]
 8006a2e:	8a7b      	ldrh	r3, [r7, #18]
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	4413      	add	r3, r2
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	801a      	strh	r2, [r3, #0]
            if( eRegStatus != MB_ENOERR )
 8006a3c:	e004      	b.n	8006a48 <eMBFuncReadInputRegister+0xda>
            }
        }
        else
        {
            eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	75fb      	strb	r3, [r7, #23]
 8006a42:	e001      	b.n	8006a48 <eMBFuncReadInputRegister+0xda>
    }
    else
    {
        /* Can't be a valid read input register request because the length
         * is incorrect. */
        eStatus = MB_EX_ILLEGAL_DATA_VALUE;
 8006a44:	2303      	movs	r3, #3
 8006a46:	75fb      	strb	r3, [r7, #23]
    }
    return eStatus;
 8006a48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3718      	adds	r7, #24
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
	...

08006a54 <eMBFuncReportSlaveID>:
    return eStatus;
}

eMBException
eMBFuncReportSlaveID( UCHAR * pucFrame, USHORT * usLen )
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
    memcpy( &pucFrame[MB_PDU_DATA_OFF], &ucMBSlaveID[0], ( size_t )usMBSlaveIDLen );
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	3301      	adds	r3, #1
 8006a62:	4a08      	ldr	r2, [pc, #32]	; (8006a84 <eMBFuncReportSlaveID+0x30>)
 8006a64:	8812      	ldrh	r2, [r2, #0]
 8006a66:	4908      	ldr	r1, [pc, #32]	; (8006a88 <eMBFuncReportSlaveID+0x34>)
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 fbb7 	bl	80071dc <memcpy>
    *usLen = ( USHORT )( MB_PDU_DATA_OFF + usMBSlaveIDLen );
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <eMBFuncReportSlaveID+0x30>)
 8006a70:	881b      	ldrh	r3, [r3, #0]
 8006a72:	3301      	adds	r3, #1
 8006a74:	b29a      	uxth	r2, r3
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	801a      	strh	r2, [r3, #0]
    return MB_EX_NONE;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	20000324 	.word	0x20000324
 8006a88:	20000304 	.word	0x20000304

08006a8c <eMBRTUInit>:
static volatile USHORT usRcvBufferPos;

/* ----------------------- Start implementation -----------------------------*/
eMBErrorCode
eMBRTUInit( UCHAR ucSlaveAddress, UCHAR ucPort, ULONG ulBaudRate, eMBParity eParity )
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	603a      	str	r2, [r7, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	4603      	mov	r3, r0
 8006a98:	71fb      	strb	r3, [r7, #7]
 8006a9a:	460b      	mov	r3, r1
 8006a9c:	71bb      	strb	r3, [r7, #6]
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	717b      	strb	r3, [r7, #5]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8006aa6:	b672      	cpsid	i
}
 8006aa8:	bf00      	nop

    ( void )ucSlaveAddress;
    ENTER_CRITICAL_SECTION(  );

    /* Modbus RTU uses 8 Databits. */
    if( xMBPortSerialInit( ucPort, ulBaudRate, 8, eParity ) != TRUE )
 8006aaa:	797b      	ldrb	r3, [r7, #5]
 8006aac:	79b8      	ldrb	r0, [r7, #6]
 8006aae:	2208      	movs	r2, #8
 8006ab0:	6839      	ldr	r1, [r7, #0]
 8006ab2:	f000 fa9d 	bl	8006ff0 <xMBPortSerialInit>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d002      	beq.n	8006ac2 <eMBRTUInit+0x36>
    {
        eStatus = MB_EPORTERR;
 8006abc:	2303      	movs	r3, #3
 8006abe:	73fb      	strb	r3, [r7, #15]
 8006ac0:	e016      	b.n	8006af0 <eMBRTUInit+0x64>
    else
    {
        /* If baudrate > 19200 then we should use the fixed timer values
         * t35 = 1750us. Otherwise t35 must be 3.5 times the character time.
         */
        if( ulBaudRate > 19200 )
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8006ac8:	d902      	bls.n	8006ad0 <eMBRTUInit+0x44>
        {
            usTimerT35_50us = 35;       /* 1800us. */
 8006aca:	2323      	movs	r3, #35	; 0x23
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	e005      	b.n	8006adc <eMBRTUInit+0x50>
             *             = 11 * Ticks_per_1s / Baudrate
             *             = 220000 / Baudrate
             * The reload for t3.5 is 1.5 times this value and similary
             * for t3.5.
             */
            usTimerT35_50us = ( 7UL * 220000UL ) / ( 2UL * ulBaudRate );
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	4a0a      	ldr	r2, [pc, #40]	; (8006b00 <eMBRTUInit+0x74>)
 8006ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ada:	60bb      	str	r3, [r7, #8]
        }
        if( xMBPortTimersInit( ( USHORT ) usTimerT35_50us ) != TRUE )
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	b29b      	uxth	r3, r3
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f000 fac5 	bl	8007070 <xMBPortTimersInit>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d001      	beq.n	8006af0 <eMBRTUInit+0x64>
        {
            eStatus = MB_EPORTERR;
 8006aec:	2303      	movs	r3, #3
 8006aee:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8006af0:	b662      	cpsie	i
}
 8006af2:	bf00      	nop
        }
    }
    EXIT_CRITICAL_SECTION(  );

    return eStatus;
 8006af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	00177fa0 	.word	0x00177fa0

08006b04 <eMBRTUStart>:

void
eMBRTUStart( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006b08:	b672      	cpsid	i
}
 8006b0a:	bf00      	nop
    /* Initially the receiver is in the state STATE_RX_INIT. we start
     * the timer and if no character is received within t3.5 we change
     * to STATE_RX_IDLE. This makes sure that we delay startup of the
     * modbus protocol stack until the bus is free.
     */
    eRcvState = STATE_RX_INIT;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <eMBRTUStart+0x24>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	701a      	strb	r2, [r3, #0]
    vMBPortSerialEnable( TRUE, FALSE );
 8006b12:	2100      	movs	r1, #0
 8006b14:	2001      	movs	r0, #1
 8006b16:	f000 fa33 	bl	8006f80 <vMBPortSerialEnable>
    vMBPortTimersEnable(  );
 8006b1a:	f000 fae9 	bl	80070f0 <vMBPortTimersEnable>
  __ASM volatile ("cpsie i" : : : "memory");
 8006b1e:	b662      	cpsie	i
}
 8006b20:	bf00      	nop

    EXIT_CRITICAL_SECTION(  );
}
 8006b22:	bf00      	nop
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000327 	.word	0x20000327

08006b2c <eMBRTUStop>:

void
eMBRTUStop( void )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006b30:	b672      	cpsid	i
}
 8006b32:	bf00      	nop
    ENTER_CRITICAL_SECTION(  );
    vMBPortSerialEnable( FALSE, FALSE );
 8006b34:	2100      	movs	r1, #0
 8006b36:	2000      	movs	r0, #0
 8006b38:	f000 fa22 	bl	8006f80 <vMBPortSerialEnable>
    vMBPortTimersDisable(  );
 8006b3c:	f000 faea 	bl	8007114 <vMBPortTimersDisable>
  __ASM volatile ("cpsie i" : : : "memory");
 8006b40:	b662      	cpsie	i
}
 8006b42:	bf00      	nop
    EXIT_CRITICAL_SECTION(  );
}
 8006b44:	bf00      	nop
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <eMBRTUReceive>:

eMBErrorCode
eMBRTUReceive( UCHAR * pucRcvAddress, UCHAR ** pucFrame, USHORT * pusLength )
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	607a      	str	r2, [r7, #4]
    BOOL            xFrameReceived = FALSE;
 8006b54:	2300      	movs	r3, #0
 8006b56:	75bb      	strb	r3, [r7, #22]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 8006b5c:	b672      	cpsid	i
}
 8006b5e:	bf00      	nop
	
	 (void)(xFrameReceived);
	

    ENTER_CRITICAL_SECTION(  );
    assert( usRcvBufferPos < MB_SER_PDU_SIZE_MAX );
 8006b60:	4b1a      	ldr	r3, [pc, #104]	; (8006bcc <eMBRTUReceive+0x84>)
 8006b62:	881b      	ldrh	r3, [r3, #0]
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2bff      	cmp	r3, #255	; 0xff
 8006b68:	d905      	bls.n	8006b76 <eMBRTUReceive+0x2e>
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <eMBRTUReceive+0x88>)
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <eMBRTUReceive+0x8c>)
 8006b6e:	21a1      	movs	r1, #161	; 0xa1
 8006b70:	4819      	ldr	r0, [pc, #100]	; (8006bd8 <eMBRTUReceive+0x90>)
 8006b72:	f000 fad9 	bl	8007128 <__assert_func>

    /* Length and CRC check */
    if( ( usRcvBufferPos >= MB_SER_PDU_SIZE_MIN )
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <eMBRTUReceive+0x84>)
 8006b78:	881b      	ldrh	r3, [r3, #0]
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d91b      	bls.n	8006bb8 <eMBRTUReceive+0x70>
        && ( usMBCRC16( ( UCHAR * ) ucRTUBuf, usRcvBufferPos ) == 0 ) )
 8006b80:	4b12      	ldr	r3, [pc, #72]	; (8006bcc <eMBRTUReceive+0x84>)
 8006b82:	881b      	ldrh	r3, [r3, #0]
 8006b84:	b29b      	uxth	r3, r3
 8006b86:	4619      	mov	r1, r3
 8006b88:	4814      	ldr	r0, [pc, #80]	; (8006bdc <eMBRTUReceive+0x94>)
 8006b8a:	f7ff fb5b 	bl	8006244 <usMBCRC16>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d111      	bne.n	8006bb8 <eMBRTUReceive+0x70>
    {
        /* Save the address field. All frames are passed to the upper layed
         * and the decision if a frame is used is done there.
         */
        *pucRcvAddress = ucRTUBuf[MB_SER_PDU_ADDR_OFF];
 8006b94:	4b11      	ldr	r3, [pc, #68]	; (8006bdc <eMBRTUReceive+0x94>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	701a      	strb	r2, [r3, #0]

        /* Total length of Modbus-PDU is Modbus-Serial-Line-PDU minus
         * size of address field and CRC checksum.
         */
        *pusLength = ( USHORT )( usRcvBufferPos - MB_SER_PDU_PDU_OFF - MB_SER_PDU_SIZE_CRC );
 8006b9e:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <eMBRTUReceive+0x84>)
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	3b03      	subs	r3, #3
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	801a      	strh	r2, [r3, #0]

        /* Return the start of the Modbus PDU to the caller. */
        *pucFrame = ( UCHAR * ) & ucRTUBuf[MB_SER_PDU_PDU_OFF];
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	4a0c      	ldr	r2, [pc, #48]	; (8006be0 <eMBRTUReceive+0x98>)
 8006bb0:	601a      	str	r2, [r3, #0]
        xFrameReceived = TRUE;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	75bb      	strb	r3, [r7, #22]
 8006bb6:	e001      	b.n	8006bbc <eMBRTUReceive+0x74>
    }
    else
    {
        eStatus = MB_EIO;
 8006bb8:	2305      	movs	r3, #5
 8006bba:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 8006bbc:	b662      	cpsie	i
}
 8006bbe:	bf00      	nop
    }

    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8006bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	3718      	adds	r7, #24
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd80      	pop	{r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	2000042e 	.word	0x2000042e
 8006bd0:	080081ac 	.word	0x080081ac
 8006bd4:	0800849c 	.word	0x0800849c
 8006bd8:	080081d4 	.word	0x080081d4
 8006bdc:	20000328 	.word	0x20000328
 8006be0:	20000329 	.word	0x20000329

08006be4 <eMBRTUSend>:

eMBErrorCode
eMBRTUSend( UCHAR ucSlaveAddress, const UCHAR * pucFrame, USHORT usLength )
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	4603      	mov	r3, r0
 8006bec:	6039      	str	r1, [r7, #0]
 8006bee:	71fb      	strb	r3, [r7, #7]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	80bb      	strh	r3, [r7, #4]
    eMBErrorCode    eStatus = MB_ENOERR;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8006bf8:	b672      	cpsid	i
}
 8006bfa:	bf00      	nop

    /* Check if the receiver is still in idle state. If not we where to
     * slow with processing the received frame and the master sent another
     * frame on the network. We have to abort sending the frame.
     */
    if( eRcvState == STATE_RX_IDLE )
 8006bfc:	4b26      	ldr	r3, [pc, #152]	; (8006c98 <eMBRTUSend+0xb4>)
 8006bfe:	781b      	ldrb	r3, [r3, #0]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d13f      	bne.n	8006c86 <eMBRTUSend+0xa2>
    {
        /* First byte before the Modbus-PDU is the slave address. */
        pucSndBufferCur = ( UCHAR * ) pucFrame - 1;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	4a24      	ldr	r2, [pc, #144]	; (8006c9c <eMBRTUSend+0xb8>)
 8006c0c:	6013      	str	r3, [r2, #0]
        usSndBufferCount = 1;
 8006c0e:	4b24      	ldr	r3, [pc, #144]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c10:	2201      	movs	r2, #1
 8006c12:	801a      	strh	r2, [r3, #0]

        /* Now copy the Modbus-PDU into the Modbus-Serial-Line-PDU. */
        pucSndBufferCur[MB_SER_PDU_ADDR_OFF] = ucSlaveAddress;
 8006c14:	4b21      	ldr	r3, [pc, #132]	; (8006c9c <eMBRTUSend+0xb8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	79fa      	ldrb	r2, [r7, #7]
 8006c1a:	701a      	strb	r2, [r3, #0]
        usSndBufferCount += usLength;
 8006c1c:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29a      	uxth	r2, r3
 8006c22:	88bb      	ldrh	r3, [r7, #4]
 8006c24:	4413      	add	r3, r2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c2a:	801a      	strh	r2, [r3, #0]

        /* Calculate CRC16 checksum for Modbus-Serial-Line-PDU. */
        usCRC16 = usMBCRC16( ( UCHAR * ) pucSndBufferCur, usSndBufferCount );
 8006c2c:	4b1b      	ldr	r3, [pc, #108]	; (8006c9c <eMBRTUSend+0xb8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a1b      	ldr	r2, [pc, #108]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c32:	8812      	ldrh	r2, [r2, #0]
 8006c34:	b292      	uxth	r2, r2
 8006c36:	4611      	mov	r1, r2
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f7ff fb03 	bl	8006244 <usMBCRC16>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	81bb      	strh	r3, [r7, #12]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 & 0xFF );
 8006c42:	4b17      	ldr	r3, [pc, #92]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c44:	881b      	ldrh	r3, [r3, #0]
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	1c5a      	adds	r2, r3, #1
 8006c4a:	b291      	uxth	r1, r2
 8006c4c:	4a14      	ldr	r2, [pc, #80]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c4e:	8011      	strh	r1, [r2, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	89bb      	ldrh	r3, [r7, #12]
 8006c54:	b2d9      	uxtb	r1, r3
 8006c56:	4b13      	ldr	r3, [pc, #76]	; (8006ca4 <eMBRTUSend+0xc0>)
 8006c58:	5499      	strb	r1, [r3, r2]
        ucRTUBuf[usSndBufferCount++] = ( UCHAR )( usCRC16 >> 8 );
 8006c5a:	89bb      	ldrh	r3, [r7, #12]
 8006c5c:	0a1b      	lsrs	r3, r3, #8
 8006c5e:	b299      	uxth	r1, r3
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c62:	881b      	ldrh	r3, [r3, #0]
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	1c5a      	adds	r2, r3, #1
 8006c68:	b290      	uxth	r0, r2
 8006c6a:	4a0d      	ldr	r2, [pc, #52]	; (8006ca0 <eMBRTUSend+0xbc>)
 8006c6c:	8010      	strh	r0, [r2, #0]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	b2c9      	uxtb	r1, r1
 8006c72:	4b0c      	ldr	r3, [pc, #48]	; (8006ca4 <eMBRTUSend+0xc0>)
 8006c74:	5499      	strb	r1, [r3, r2]

        /* Activate the transmitter. */
        eSndState = STATE_TX_XMIT;
 8006c76:	4b0c      	ldr	r3, [pc, #48]	; (8006ca8 <eMBRTUSend+0xc4>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
        vMBPortSerialEnable( FALSE, TRUE );
 8006c7c:	2101      	movs	r1, #1
 8006c7e:	2000      	movs	r0, #0
 8006c80:	f000 f97e 	bl	8006f80 <vMBPortSerialEnable>
 8006c84:	e001      	b.n	8006c8a <eMBRTUSend+0xa6>
    }
    else
    {
        eStatus = MB_EIO;
 8006c86:	2305      	movs	r3, #5
 8006c88:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c8a:	b662      	cpsie	i
}
 8006c8c:	bf00      	nop
    }
    EXIT_CRITICAL_SECTION(  );
    return eStatus;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000327 	.word	0x20000327
 8006c9c:	20000428 	.word	0x20000428
 8006ca0:	2000042c 	.word	0x2000042c
 8006ca4:	20000328 	.word	0x20000328
 8006ca8:	20000326 	.word	0x20000326

08006cac <xMBRTUReceiveFSM>:

BOOL
xMBRTUReceiveFSM( void )
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
    BOOL            xTaskNeedSwitch = FALSE;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	71fb      	strb	r3, [r7, #7]
    UCHAR           ucByte;

    assert( eSndState == STATE_TX_IDLE );
 8006cb6:	4b2a      	ldr	r3, [pc, #168]	; (8006d60 <xMBRTUReceiveFSM+0xb4>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <xMBRTUReceiveFSM+0x20>
 8006cc0:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <xMBRTUReceiveFSM+0xb8>)
 8006cc2:	4a29      	ldr	r2, [pc, #164]	; (8006d68 <xMBRTUReceiveFSM+0xbc>)
 8006cc4:	21eb      	movs	r1, #235	; 0xeb
 8006cc6:	4829      	ldr	r0, [pc, #164]	; (8006d6c <xMBRTUReceiveFSM+0xc0>)
 8006cc8:	f000 fa2e 	bl	8007128 <__assert_func>

    /* Always read the character. */
    ( void )xMBPortSerialGetByte( ( CHAR * ) & ucByte );
 8006ccc:	1dbb      	adds	r3, r7, #6
 8006cce:	4618      	mov	r0, r3
 8006cd0:	f000 f9ba 	bl	8007048 <xMBPortSerialGetByte>

    switch ( eRcvState )
 8006cd4:	4b26      	ldr	r3, [pc, #152]	; (8006d70 <xMBRTUReceiveFSM+0xc4>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	b2db      	uxtb	r3, r3
 8006cda:	2b03      	cmp	r3, #3
 8006cdc:	d83b      	bhi.n	8006d56 <xMBRTUReceiveFSM+0xaa>
 8006cde:	a201      	add	r2, pc, #4	; (adr r2, 8006ce4 <xMBRTUReceiveFSM+0x38>)
 8006ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce4:	08006cf5 	.word	0x08006cf5
 8006ce8:	08006d01 	.word	0x08006d01
 8006cec:	08006d29 	.word	0x08006d29
 8006cf0:	08006cfb 	.word	0x08006cfb
    {
        /* If we have received a character in the init state we have to
         * wait until the frame is finished.
         */
    case STATE_RX_INIT:
        vMBPortTimersEnable(  );
 8006cf4:	f000 f9fc 	bl	80070f0 <vMBPortTimersEnable>
        break;
 8006cf8:	e02d      	b.n	8006d56 <xMBRTUReceiveFSM+0xaa>

        /* In the error state we wait until all characters in the
         * damaged frame are transmitted.
         */
    case STATE_RX_ERROR:
        vMBPortTimersEnable(  );
 8006cfa:	f000 f9f9 	bl	80070f0 <vMBPortTimersEnable>
        break;
 8006cfe:	e02a      	b.n	8006d56 <xMBRTUReceiveFSM+0xaa>
        /* In the idle state we wait for a new character. If a character
         * is received the t1.5 and t3.5 timers are started and the
         * receiver is in the state STATE_RX_RECEIVCE.
         */
    case STATE_RX_IDLE:
        usRcvBufferPos = 0;
 8006d00:	4b1c      	ldr	r3, [pc, #112]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d02:	2200      	movs	r2, #0
 8006d04:	801a      	strh	r2, [r3, #0]
        ucRTUBuf[usRcvBufferPos++] = ucByte;
 8006d06:	4b1b      	ldr	r3, [pc, #108]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d08:	881b      	ldrh	r3, [r3, #0]
 8006d0a:	b29b      	uxth	r3, r3
 8006d0c:	1c5a      	adds	r2, r3, #1
 8006d0e:	b291      	uxth	r1, r2
 8006d10:	4a18      	ldr	r2, [pc, #96]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d12:	8011      	strh	r1, [r2, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	79b9      	ldrb	r1, [r7, #6]
 8006d18:	4b17      	ldr	r3, [pc, #92]	; (8006d78 <xMBRTUReceiveFSM+0xcc>)
 8006d1a:	5499      	strb	r1, [r3, r2]
        eRcvState = STATE_RX_RCV;
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <xMBRTUReceiveFSM+0xc4>)
 8006d1e:	2202      	movs	r2, #2
 8006d20:	701a      	strb	r2, [r3, #0]

        /* Enable t3.5 timers. */
        vMBPortTimersEnable(  );
 8006d22:	f000 f9e5 	bl	80070f0 <vMBPortTimersEnable>
        break;
 8006d26:	e016      	b.n	8006d56 <xMBRTUReceiveFSM+0xaa>
         * every character received. If more than the maximum possible
         * number of bytes in a modbus frame is received the frame is
         * ignored.
         */
    case STATE_RX_RCV:
        if( usRcvBufferPos < MB_SER_PDU_SIZE_MAX )
 8006d28:	4b12      	ldr	r3, [pc, #72]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d2a:	881b      	ldrh	r3, [r3, #0]
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	2bff      	cmp	r3, #255	; 0xff
 8006d30:	d80b      	bhi.n	8006d4a <xMBRTUReceiveFSM+0x9e>
        {
            ucRTUBuf[usRcvBufferPos++] = ucByte;
 8006d32:	4b10      	ldr	r3, [pc, #64]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d34:	881b      	ldrh	r3, [r3, #0]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	b291      	uxth	r1, r2
 8006d3c:	4a0d      	ldr	r2, [pc, #52]	; (8006d74 <xMBRTUReceiveFSM+0xc8>)
 8006d3e:	8011      	strh	r1, [r2, #0]
 8006d40:	461a      	mov	r2, r3
 8006d42:	79b9      	ldrb	r1, [r7, #6]
 8006d44:	4b0c      	ldr	r3, [pc, #48]	; (8006d78 <xMBRTUReceiveFSM+0xcc>)
 8006d46:	5499      	strb	r1, [r3, r2]
 8006d48:	e002      	b.n	8006d50 <xMBRTUReceiveFSM+0xa4>
        }
        else
        {
            eRcvState = STATE_RX_ERROR;
 8006d4a:	4b09      	ldr	r3, [pc, #36]	; (8006d70 <xMBRTUReceiveFSM+0xc4>)
 8006d4c:	2203      	movs	r2, #3
 8006d4e:	701a      	strb	r2, [r3, #0]
        }
        vMBPortTimersEnable(  );
 8006d50:	f000 f9ce 	bl	80070f0 <vMBPortTimersEnable>
        break;
 8006d54:	bf00      	nop
    }
    return xTaskNeedSwitch;
 8006d56:	79fb      	ldrb	r3, [r7, #7]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20000326 	.word	0x20000326
 8006d64:	080081e8 	.word	0x080081e8
 8006d68:	080084ac 	.word	0x080084ac
 8006d6c:	080081d4 	.word	0x080081d4
 8006d70:	20000327 	.word	0x20000327
 8006d74:	2000042e 	.word	0x2000042e
 8006d78:	20000328 	.word	0x20000328

08006d7c <xMBRTUTransmitFSM>:

BOOL
xMBRTUTransmitFSM( void )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b082      	sub	sp, #8
 8006d80:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8006d82:	2300      	movs	r3, #0
 8006d84:	71fb      	strb	r3, [r7, #7]

    assert( eRcvState == STATE_RX_IDLE );
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <xMBRTUTransmitFSM+0x94>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	b2db      	uxtb	r3, r3
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d006      	beq.n	8006d9e <xMBRTUTransmitFSM+0x22>
 8006d90:	4b20      	ldr	r3, [pc, #128]	; (8006e14 <xMBRTUTransmitFSM+0x98>)
 8006d92:	4a21      	ldr	r2, [pc, #132]	; (8006e18 <xMBRTUTransmitFSM+0x9c>)
 8006d94:	f44f 7193 	mov.w	r1, #294	; 0x126
 8006d98:	4820      	ldr	r0, [pc, #128]	; (8006e1c <xMBRTUTransmitFSM+0xa0>)
 8006d9a:	f000 f9c5 	bl	8007128 <__assert_func>

    switch ( eSndState )
 8006d9e:	4b20      	ldr	r3, [pc, #128]	; (8006e20 <xMBRTUTransmitFSM+0xa4>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d002      	beq.n	8006dae <xMBRTUTransmitFSM+0x32>
 8006da8:	2b01      	cmp	r3, #1
 8006daa:	d005      	beq.n	8006db8 <xMBRTUTransmitFSM+0x3c>
 8006dac:	e02a      	b.n	8006e04 <xMBRTUTransmitFSM+0x88>
    {
        /* We should not get a transmitter event if the transmitter is in
         * idle state.  */
    case STATE_TX_IDLE:
        /* enable receiver/disable transmitter. */
        vMBPortSerialEnable( TRUE, FALSE );
 8006dae:	2100      	movs	r1, #0
 8006db0:	2001      	movs	r0, #1
 8006db2:	f000 f8e5 	bl	8006f80 <vMBPortSerialEnable>
        break;
 8006db6:	e025      	b.n	8006e04 <xMBRTUTransmitFSM+0x88>

    case STATE_TX_XMIT:
        /* check if we are finished. */
        if( usSndBufferCount != 0 )
 8006db8:	4b1a      	ldr	r3, [pc, #104]	; (8006e24 <xMBRTUTransmitFSM+0xa8>)
 8006dba:	881b      	ldrh	r3, [r3, #0]
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d013      	beq.n	8006dea <xMBRTUTransmitFSM+0x6e>
        {
            xMBPortSerialPutByte( ( CHAR )*pucSndBufferCur );
 8006dc2:	4b19      	ldr	r3, [pc, #100]	; (8006e28 <xMBRTUTransmitFSM+0xac>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f000 f924 	bl	8007018 <xMBPortSerialPutByte>
            pucSndBufferCur++;  /* next byte in sendbuffer. */
 8006dd0:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <xMBRTUTransmitFSM+0xac>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3301      	adds	r3, #1
 8006dd6:	4a14      	ldr	r2, [pc, #80]	; (8006e28 <xMBRTUTransmitFSM+0xac>)
 8006dd8:	6013      	str	r3, [r2, #0]
            usSndBufferCount--;
 8006dda:	4b12      	ldr	r3, [pc, #72]	; (8006e24 <xMBRTUTransmitFSM+0xa8>)
 8006ddc:	881b      	ldrh	r3, [r3, #0]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	3b01      	subs	r3, #1
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <xMBRTUTransmitFSM+0xa8>)
 8006de6:	801a      	strh	r2, [r3, #0]
            /* Disable transmitter. This prevents another transmit buffer
             * empty interrupt. */
            vMBPortSerialEnable( TRUE, FALSE );
            eSndState = STATE_TX_IDLE;
        }
        break;
 8006de8:	e00b      	b.n	8006e02 <xMBRTUTransmitFSM+0x86>
            xNeedPoll = xMBPortEventPost( EV_FRAME_SENT );
 8006dea:	2003      	movs	r0, #3
 8006dec:	f000 f894 	bl	8006f18 <xMBPortEventPost>
 8006df0:	4603      	mov	r3, r0
 8006df2:	71fb      	strb	r3, [r7, #7]
            vMBPortSerialEnable( TRUE, FALSE );
 8006df4:	2100      	movs	r1, #0
 8006df6:	2001      	movs	r0, #1
 8006df8:	f000 f8c2 	bl	8006f80 <vMBPortSerialEnable>
            eSndState = STATE_TX_IDLE;
 8006dfc:	4b08      	ldr	r3, [pc, #32]	; (8006e20 <xMBRTUTransmitFSM+0xa4>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
        break;
 8006e02:	bf00      	nop
    }

    return xNeedPoll;
 8006e04:	79fb      	ldrb	r3, [r7, #7]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3708      	adds	r7, #8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000327 	.word	0x20000327
 8006e14:	08008204 	.word	0x08008204
 8006e18:	080084c0 	.word	0x080084c0
 8006e1c:	080081d4 	.word	0x080081d4
 8006e20:	20000326 	.word	0x20000326
 8006e24:	2000042c 	.word	0x2000042c
 8006e28:	20000428 	.word	0x20000428

08006e2c <xMBRTUTimerT35Expired>:

BOOL
xMBRTUTimerT35Expired( void )
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b082      	sub	sp, #8
 8006e30:	af00      	add	r7, sp, #0
    BOOL            xNeedPoll = FALSE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	71fb      	strb	r3, [r7, #7]

    switch ( eRcvState )
 8006e36:	4b1c      	ldr	r3, [pc, #112]	; (8006ea8 <xMBRTUTimerT35Expired+0x7c>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b03      	cmp	r3, #3
 8006e3e:	d028      	beq.n	8006e92 <xMBRTUTimerT35Expired+0x66>
 8006e40:	2b03      	cmp	r3, #3
 8006e42:	dc10      	bgt.n	8006e66 <xMBRTUTimerT35Expired+0x3a>
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <xMBRTUTimerT35Expired+0x22>
 8006e48:	2b02      	cmp	r3, #2
 8006e4a:	d006      	beq.n	8006e5a <xMBRTUTimerT35Expired+0x2e>
 8006e4c:	e00b      	b.n	8006e66 <xMBRTUTimerT35Expired+0x3a>
    {
        /* Timer t35 expired. Startup phase is finished. */
    case STATE_RX_INIT:
        xNeedPoll = xMBPortEventPost( EV_READY );
 8006e4e:	2000      	movs	r0, #0
 8006e50:	f000 f862 	bl	8006f18 <xMBPortEventPost>
 8006e54:	4603      	mov	r3, r0
 8006e56:	71fb      	strb	r3, [r7, #7]
        break;
 8006e58:	e01c      	b.n	8006e94 <xMBRTUTimerT35Expired+0x68>

        /* A frame was received and t35 expired. Notify the listener that
         * a new frame was received. */
    case STATE_RX_RCV:
        xNeedPoll = xMBPortEventPost( EV_FRAME_RECEIVED );
 8006e5a:	2001      	movs	r0, #1
 8006e5c:	f000 f85c 	bl	8006f18 <xMBPortEventPost>
 8006e60:	4603      	mov	r3, r0
 8006e62:	71fb      	strb	r3, [r7, #7]
        break;
 8006e64:	e016      	b.n	8006e94 <xMBRTUTimerT35Expired+0x68>
    case STATE_RX_ERROR:
        break;

        /* Function called in an illegal state. */
    default:
        assert( ( eRcvState == STATE_RX_INIT ) ||
 8006e66:	4b10      	ldr	r3, [pc, #64]	; (8006ea8 <xMBRTUTimerT35Expired+0x7c>)
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d011      	beq.n	8006e94 <xMBRTUTimerT35Expired+0x68>
 8006e70:	4b0d      	ldr	r3, [pc, #52]	; (8006ea8 <xMBRTUTimerT35Expired+0x7c>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d00c      	beq.n	8006e94 <xMBRTUTimerT35Expired+0x68>
 8006e7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ea8 <xMBRTUTimerT35Expired+0x7c>)
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	b2db      	uxtb	r3, r3
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d007      	beq.n	8006e94 <xMBRTUTimerT35Expired+0x68>
 8006e84:	4b09      	ldr	r3, [pc, #36]	; (8006eac <xMBRTUTimerT35Expired+0x80>)
 8006e86:	4a0a      	ldr	r2, [pc, #40]	; (8006eb0 <xMBRTUTimerT35Expired+0x84>)
 8006e88:	f240 115f 	movw	r1, #351	; 0x15f
 8006e8c:	4809      	ldr	r0, [pc, #36]	; (8006eb4 <xMBRTUTimerT35Expired+0x88>)
 8006e8e:	f000 f94b 	bl	8007128 <__assert_func>
        break;
 8006e92:	bf00      	nop
                ( eRcvState == STATE_RX_RCV ) || ( eRcvState == STATE_RX_ERROR ) );
    }

    vMBPortTimersDisable(  );
 8006e94:	f000 f93e 	bl	8007114 <vMBPortTimersDisable>
    eRcvState = STATE_RX_IDLE;
 8006e98:	4b03      	ldr	r3, [pc, #12]	; (8006ea8 <xMBRTUTimerT35Expired+0x7c>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	701a      	strb	r2, [r3, #0]

    return xNeedPoll;
 8006e9e:	79fb      	ldrb	r3, [r7, #7]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000327 	.word	0x20000327
 8006eac:	08008220 	.word	0x08008220
 8006eb0:	080084d4 	.word	0x080084d4
 8006eb4:	080081d4 	.word	0x080081d4

08006eb8 <prveMBError2Exception>:
    return ( UCHAR ) usWordBuf;
}

eMBException
prveMBError2Exception( eMBErrorCode eErrorCode )
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	71fb      	strb	r3, [r7, #7]
    eMBException    eStatus;

    switch ( eErrorCode )
 8006ec2:	79fb      	ldrb	r3, [r7, #7]
 8006ec4:	2b07      	cmp	r3, #7
 8006ec6:	d00c      	beq.n	8006ee2 <prveMBError2Exception+0x2a>
 8006ec8:	2b07      	cmp	r3, #7
 8006eca:	dc0d      	bgt.n	8006ee8 <prveMBError2Exception+0x30>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d002      	beq.n	8006ed6 <prveMBError2Exception+0x1e>
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d003      	beq.n	8006edc <prveMBError2Exception+0x24>
 8006ed4:	e008      	b.n	8006ee8 <prveMBError2Exception+0x30>
    {
        case MB_ENOERR:
            eStatus = MB_EX_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	73fb      	strb	r3, [r7, #15]
            break;
 8006eda:	e008      	b.n	8006eee <prveMBError2Exception+0x36>

        case MB_ENOREG:
            eStatus = MB_EX_ILLEGAL_DATA_ADDRESS;
 8006edc:	2302      	movs	r3, #2
 8006ede:	73fb      	strb	r3, [r7, #15]
            break;
 8006ee0:	e005      	b.n	8006eee <prveMBError2Exception+0x36>

        case MB_ETIMEDOUT:
            eStatus = MB_EX_SLAVE_BUSY;
 8006ee2:	2306      	movs	r3, #6
 8006ee4:	73fb      	strb	r3, [r7, #15]
            break;
 8006ee6:	e002      	b.n	8006eee <prveMBError2Exception+0x36>

        default:
            eStatus = MB_EX_SLAVE_DEVICE_FAILURE;
 8006ee8:	2304      	movs	r3, #4
 8006eea:	73fb      	strb	r3, [r7, #15]
            break;
 8006eec:	bf00      	nop
    }

    return eStatus;
 8006eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3714      	adds	r7, #20
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <xMBPortEventInit>:
static BOOL     xEventInQueue;

/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortEventInit( void )
{
 8006efc:	b480      	push	{r7}
 8006efe:	af00      	add	r7, sp, #0
    xEventInQueue = FALSE;
 8006f00:	4b04      	ldr	r3, [pc, #16]	; (8006f14 <xMBPortEventInit+0x18>)
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]
    return TRUE;
 8006f06:	2301      	movs	r3, #1
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	20000431 	.word	0x20000431

08006f18 <xMBPortEventPost>:

BOOL
xMBPortEventPost( eMBEventType eEvent )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	71fb      	strb	r3, [r7, #7]
    xEventInQueue = TRUE;
 8006f22:	4b06      	ldr	r3, [pc, #24]	; (8006f3c <xMBPortEventPost+0x24>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	701a      	strb	r2, [r3, #0]
    eQueuedEvent = eEvent;
 8006f28:	4a05      	ldr	r2, [pc, #20]	; (8006f40 <xMBPortEventPost+0x28>)
 8006f2a:	79fb      	ldrb	r3, [r7, #7]
 8006f2c:	7013      	strb	r3, [r2, #0]
    return TRUE;
 8006f2e:	2301      	movs	r3, #1
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000431 	.word	0x20000431
 8006f40:	20000430 	.word	0x20000430

08006f44 <xMBPortEventGet>:

BOOL
xMBPortEventGet( eMBEventType * eEvent )
{
 8006f44:	b480      	push	{r7}
 8006f46:	b085      	sub	sp, #20
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	6078      	str	r0, [r7, #4]
    BOOL            xEventHappened = FALSE;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	73fb      	strb	r3, [r7, #15]

    if( xEventInQueue )
 8006f50:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <xMBPortEventGet+0x34>)
 8006f52:	781b      	ldrb	r3, [r3, #0]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d008      	beq.n	8006f6a <xMBPortEventGet+0x26>
    {
        *eEvent = eQueuedEvent;
 8006f58:	4b08      	ldr	r3, [pc, #32]	; (8006f7c <xMBPortEventGet+0x38>)
 8006f5a:	781a      	ldrb	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	701a      	strb	r2, [r3, #0]
        xEventInQueue = FALSE;
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <xMBPortEventGet+0x34>)
 8006f62:	2200      	movs	r2, #0
 8006f64:	701a      	strb	r2, [r3, #0]
        xEventHappened = TRUE;
 8006f66:	2301      	movs	r3, #1
 8006f68:	73fb      	strb	r3, [r7, #15]
    }
    return xEventHappened;
 8006f6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20000431 	.word	0x20000431
 8006f7c:	20000430 	.word	0x20000430

08006f80 <vMBPortSerialEnable>:
extern UART_HandleTypeDef huart2;
 
/* ----------------------- Start implementation -----------------------------*/
void
vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	4603      	mov	r3, r0
 8006f88:	460a      	mov	r2, r1
 8006f8a:	71fb      	strb	r3, [r7, #7]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	71bb      	strb	r3, [r7, #6]
  /* If xRXEnable enable serial receive interrupts. If xTxENable enable
  * transmitter empty interrupts.
  */
  
  if (xRxEnable) {        
 8006f90:	79fb      	ldrb	r3, [r7, #7]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d008      	beq.n	8006fa8 <vMBPortSerialEnable+0x28>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8006f96:	4b15      	ldr	r3, [pc, #84]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	4b13      	ldr	r3, [pc, #76]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0220 	orr.w	r2, r2, #32
 8006fa4:	60da      	str	r2, [r3, #12]
 8006fa6:	e007      	b.n	8006fb8 <vMBPortSerialEnable+0x38>
  } else {    
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_RXNE);
 8006fa8:	4b10      	ldr	r3, [pc, #64]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	68da      	ldr	r2, [r3, #12]
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f022 0220 	bic.w	r2, r2, #32
 8006fb6:	60da      	str	r2, [r3, #12]
  }
  
  if (xTxEnable) {    
 8006fb8:	79bb      	ldrb	r3, [r7, #6]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d008      	beq.n	8006fd0 <vMBPortSerialEnable+0x50>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TXE);
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68da      	ldr	r2, [r3, #12]
 8006fc4:	4b09      	ldr	r3, [pc, #36]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006fcc:	60da      	str	r2, [r3, #12]
  } else {
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
  }  
}
 8006fce:	e007      	b.n	8006fe0 <vMBPortSerialEnable+0x60>
    __HAL_UART_DISABLE_IT(&huart2, UART_IT_TXE);
 8006fd0:	4b06      	ldr	r3, [pc, #24]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68da      	ldr	r2, [r3, #12]
 8006fd6:	4b05      	ldr	r3, [pc, #20]	; (8006fec <vMBPortSerialEnable+0x6c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fde:	60da      	str	r2, [r3, #12]
}
 8006fe0:	bf00      	nop
 8006fe2:	370c      	adds	r7, #12
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fea:	4770      	bx	lr
 8006fec:	20000248 	.word	0x20000248

08006ff0 <xMBPortSerialInit>:
 
BOOL
xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6039      	str	r1, [r7, #0]
 8006ff8:	4611      	mov	r1, r2
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	71fb      	strb	r3, [r7, #7]
 8007000:	460b      	mov	r3, r1
 8007002:	71bb      	strb	r3, [r7, #6]
 8007004:	4613      	mov	r3, r2
 8007006:	717b      	strb	r3, [r7, #5]
  /* 
  Do nothing, Initialization is handled by MX_USART3_UART_Init() 
  Fixed port, baudrate, databit and parity  
  */
  return TRUE;
 8007008:	2301      	movs	r3, #1
}
 800700a:	4618      	mov	r0, r3
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
	...

08007018 <xMBPortSerialPutByte>:
 
BOOL
xMBPortSerialPutByte( CHAR ucByte )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b082      	sub	sp, #8
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  /* Put a byte in the UARTs transmit buffer. This function is called
  * by the protocol stack if pxMBFrameCBTransmitterEmpty( ) has been
  * called. */
  return (HAL_OK == HAL_UART_Transmit(&huart2, (uint8_t*)&ucByte, 1, 10));
 8007022:	1df9      	adds	r1, r7, #7
 8007024:	230a      	movs	r3, #10
 8007026:	2201      	movs	r2, #1
 8007028:	4806      	ldr	r0, [pc, #24]	; (8007044 <xMBPortSerialPutByte+0x2c>)
 800702a:	f7fd ff4e 	bl	8004eca <HAL_UART_Transmit>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	bf0c      	ite	eq
 8007034:	2301      	moveq	r3, #1
 8007036:	2300      	movne	r3, #0
 8007038:	b2db      	uxtb	r3, r3
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	20000248 	.word	0x20000248

08007048 <xMBPortSerialGetByte>:
 
BOOL
xMBPortSerialGetByte( CHAR * pucByte )
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Return the byte in the UARTs receive buffer. This function is called
  * by the protocol stack after pxMBFrameCBByteReceived( ) has been called.
  */
  *pucByte = (uint8_t)(huart2.Instance->DR & (uint8_t)0x00FF);
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <xMBPortSerialGetByte+0x24>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	b2da      	uxtb	r2, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	701a      	strb	r2, [r3, #0]
  return TRUE;
 800705c:	2301      	movs	r3, #1
}
 800705e:	4618      	mov	r0, r3
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	20000248 	.word	0x20000248

08007070 <xMBPortTimersInit>:
uint16_t downcounter = 0;
 
/* ----------------------- Start implementation -----------------------------*/
BOOL
xMBPortTimersInit( USHORT usTim1Timerout50us )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b084      	sub	sp, #16
 8007074:	af00      	add	r7, sp, #0
 8007076:	4603      	mov	r3, r0
 8007078:	80fb      	strh	r3, [r7, #6]
  TIM_MasterConfigTypeDef sMasterConfig;
  
  htim7.Instance = TIM7;
 800707a:	4b19      	ldr	r3, [pc, #100]	; (80070e0 <xMBPortTimersInit+0x70>)
 800707c:	4a19      	ldr	r2, [pc, #100]	; (80070e4 <xMBPortTimersInit+0x74>)
 800707e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = (HAL_RCC_GetPCLK1Freq() / 1000000) - 1;
 8007080:	f7fc fe86 	bl	8003d90 <HAL_RCC_GetPCLK1Freq>
 8007084:	4603      	mov	r3, r0
 8007086:	4a18      	ldr	r2, [pc, #96]	; (80070e8 <xMBPortTimersInit+0x78>)
 8007088:	fba2 2303 	umull	r2, r3, r2, r3
 800708c:	0c9b      	lsrs	r3, r3, #18
 800708e:	3b01      	subs	r3, #1
 8007090:	4a13      	ldr	r2, [pc, #76]	; (80070e0 <xMBPortTimersInit+0x70>)
 8007092:	6053      	str	r3, [r2, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007094:	4b12      	ldr	r3, [pc, #72]	; (80070e0 <xMBPortTimersInit+0x70>)
 8007096:	2200      	movs	r2, #0
 8007098:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 50 - 1;
 800709a:	4b11      	ldr	r3, [pc, #68]	; (80070e0 <xMBPortTimersInit+0x70>)
 800709c:	2231      	movs	r2, #49	; 0x31
 800709e:	60da      	str	r2, [r3, #12]
  
  timeout = usTim1Timerout50us;
 80070a0:	4a12      	ldr	r2, [pc, #72]	; (80070ec <xMBPortTimersInit+0x7c>)
 80070a2:	88fb      	ldrh	r3, [r7, #6]
 80070a4:	8013      	strh	r3, [r2, #0]
  
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80070a6:	480e      	ldr	r0, [pc, #56]	; (80070e0 <xMBPortTimersInit+0x70>)
 80070a8:	f7fd fb68 	bl	800477c <HAL_TIM_Base_Init>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <xMBPortTimersInit+0x46>
  {
    return FALSE;
 80070b2:	2300      	movs	r3, #0
 80070b4:	e00f      	b.n	80070d6 <xMBPortTimersInit+0x66>
  }
  
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80070b6:	2320      	movs	r3, #32
 80070b8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	4619      	mov	r1, r3
 80070c4:	4806      	ldr	r0, [pc, #24]	; (80070e0 <xMBPortTimersInit+0x70>)
 80070c6:	f7fd fe23 	bl	8004d10 <HAL_TIMEx_MasterConfigSynchronization>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <xMBPortTimersInit+0x64>
  {
    return FALSE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	e000      	b.n	80070d6 <xMBPortTimersInit+0x66>
  }
  
  return TRUE;
 80070d4:	2301      	movs	r3, #1
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3710      	adds	r7, #16
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000200 	.word	0x20000200
 80070e4:	40001400 	.word	0x40001400
 80070e8:	431bde83 	.word	0x431bde83
 80070ec:	20000432 	.word	0x20000432

080070f0 <vMBPortTimersEnable>:
 
 
void
vMBPortTimersEnable(  )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Enable the timer with the timeout passed to xMBPortTimersInit( ) */
  downcounter = timeout;
 80070f4:	4b04      	ldr	r3, [pc, #16]	; (8007108 <vMBPortTimersEnable+0x18>)
 80070f6:	881a      	ldrh	r2, [r3, #0]
 80070f8:	4b04      	ldr	r3, [pc, #16]	; (800710c <vMBPortTimersEnable+0x1c>)
 80070fa:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim7);
 80070fc:	4804      	ldr	r0, [pc, #16]	; (8007110 <vMBPortTimersEnable+0x20>)
 80070fe:	f7fd fb8d 	bl	800481c <HAL_TIM_Base_Start_IT>
}
 8007102:	bf00      	nop
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20000432 	.word	0x20000432
 800710c:	20000434 	.word	0x20000434
 8007110:	20000200 	.word	0x20000200

08007114 <vMBPortTimersDisable>:
 
void
vMBPortTimersDisable(  )
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* Disable any pending timers. */
  HAL_TIM_Base_Stop_IT(&htim7);
 8007118:	4802      	ldr	r0, [pc, #8]	; (8007124 <vMBPortTimersDisable+0x10>)
 800711a:	f7fd fbef 	bl	80048fc <HAL_TIM_Base_Stop_IT>
}
 800711e:	bf00      	nop
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20000200 	.word	0x20000200

08007128 <__assert_func>:
 8007128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800712a:	4614      	mov	r4, r2
 800712c:	461a      	mov	r2, r3
 800712e:	4b09      	ldr	r3, [pc, #36]	; (8007154 <__assert_func+0x2c>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4605      	mov	r5, r0
 8007134:	68d8      	ldr	r0, [r3, #12]
 8007136:	b14c      	cbz	r4, 800714c <__assert_func+0x24>
 8007138:	4b07      	ldr	r3, [pc, #28]	; (8007158 <__assert_func+0x30>)
 800713a:	9100      	str	r1, [sp, #0]
 800713c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007140:	4906      	ldr	r1, [pc, #24]	; (800715c <__assert_func+0x34>)
 8007142:	462b      	mov	r3, r5
 8007144:	f000 f814 	bl	8007170 <fiprintf>
 8007148:	f000 fc0c 	bl	8007964 <abort>
 800714c:	4b04      	ldr	r3, [pc, #16]	; (8007160 <__assert_func+0x38>)
 800714e:	461c      	mov	r4, r3
 8007150:	e7f3      	b.n	800713a <__assert_func+0x12>
 8007152:	bf00      	nop
 8007154:	20000094 	.word	0x20000094
 8007158:	080084ea 	.word	0x080084ea
 800715c:	080084f7 	.word	0x080084f7
 8007160:	08008525 	.word	0x08008525

08007164 <__errno>:
 8007164:	4b01      	ldr	r3, [pc, #4]	; (800716c <__errno+0x8>)
 8007166:	6818      	ldr	r0, [r3, #0]
 8007168:	4770      	bx	lr
 800716a:	bf00      	nop
 800716c:	20000094 	.word	0x20000094

08007170 <fiprintf>:
 8007170:	b40e      	push	{r1, r2, r3}
 8007172:	b503      	push	{r0, r1, lr}
 8007174:	4601      	mov	r1, r0
 8007176:	ab03      	add	r3, sp, #12
 8007178:	4805      	ldr	r0, [pc, #20]	; (8007190 <fiprintf+0x20>)
 800717a:	f853 2b04 	ldr.w	r2, [r3], #4
 800717e:	6800      	ldr	r0, [r0, #0]
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	f000 f86b 	bl	800725c <_vfiprintf_r>
 8007186:	b002      	add	sp, #8
 8007188:	f85d eb04 	ldr.w	lr, [sp], #4
 800718c:	b003      	add	sp, #12
 800718e:	4770      	bx	lr
 8007190:	20000094 	.word	0x20000094

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	4d0d      	ldr	r5, [pc, #52]	; (80071cc <__libc_init_array+0x38>)
 8007198:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719a:	1b64      	subs	r4, r4, r5
 800719c:	10a4      	asrs	r4, r4, #2
 800719e:	2600      	movs	r6, #0
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	4d0b      	ldr	r5, [pc, #44]	; (80071d4 <__libc_init_array+0x40>)
 80071a6:	4c0c      	ldr	r4, [pc, #48]	; (80071d8 <__libc_init_array+0x44>)
 80071a8:	f000 fff0 	bl	800818c <_init>
 80071ac:	1b64      	subs	r4, r4, r5
 80071ae:	10a4      	asrs	r4, r4, #2
 80071b0:	2600      	movs	r6, #0
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	080085c8 	.word	0x080085c8
 80071d0:	080085c8 	.word	0x080085c8
 80071d4:	080085c8 	.word	0x080085c8
 80071d8:	080085cc 	.word	0x080085cc

080071dc <memcpy>:
 80071dc:	440a      	add	r2, r1
 80071de:	4291      	cmp	r1, r2
 80071e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80071e4:	d100      	bne.n	80071e8 <memcpy+0xc>
 80071e6:	4770      	bx	lr
 80071e8:	b510      	push	{r4, lr}
 80071ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071f2:	4291      	cmp	r1, r2
 80071f4:	d1f9      	bne.n	80071ea <memcpy+0xe>
 80071f6:	bd10      	pop	{r4, pc}

080071f8 <memset>:
 80071f8:	4402      	add	r2, r0
 80071fa:	4603      	mov	r3, r0
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d100      	bne.n	8007202 <memset+0xa>
 8007200:	4770      	bx	lr
 8007202:	f803 1b01 	strb.w	r1, [r3], #1
 8007206:	e7f9      	b.n	80071fc <memset+0x4>

08007208 <__sfputc_r>:
 8007208:	6893      	ldr	r3, [r2, #8]
 800720a:	3b01      	subs	r3, #1
 800720c:	2b00      	cmp	r3, #0
 800720e:	b410      	push	{r4}
 8007210:	6093      	str	r3, [r2, #8]
 8007212:	da08      	bge.n	8007226 <__sfputc_r+0x1e>
 8007214:	6994      	ldr	r4, [r2, #24]
 8007216:	42a3      	cmp	r3, r4
 8007218:	db01      	blt.n	800721e <__sfputc_r+0x16>
 800721a:	290a      	cmp	r1, #10
 800721c:	d103      	bne.n	8007226 <__sfputc_r+0x1e>
 800721e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007222:	f000 badf 	b.w	80077e4 <__swbuf_r>
 8007226:	6813      	ldr	r3, [r2, #0]
 8007228:	1c58      	adds	r0, r3, #1
 800722a:	6010      	str	r0, [r2, #0]
 800722c:	7019      	strb	r1, [r3, #0]
 800722e:	4608      	mov	r0, r1
 8007230:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007234:	4770      	bx	lr

08007236 <__sfputs_r>:
 8007236:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007238:	4606      	mov	r6, r0
 800723a:	460f      	mov	r7, r1
 800723c:	4614      	mov	r4, r2
 800723e:	18d5      	adds	r5, r2, r3
 8007240:	42ac      	cmp	r4, r5
 8007242:	d101      	bne.n	8007248 <__sfputs_r+0x12>
 8007244:	2000      	movs	r0, #0
 8007246:	e007      	b.n	8007258 <__sfputs_r+0x22>
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	463a      	mov	r2, r7
 800724e:	4630      	mov	r0, r6
 8007250:	f7ff ffda 	bl	8007208 <__sfputc_r>
 8007254:	1c43      	adds	r3, r0, #1
 8007256:	d1f3      	bne.n	8007240 <__sfputs_r+0xa>
 8007258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800725c <_vfiprintf_r>:
 800725c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007260:	460d      	mov	r5, r1
 8007262:	b09d      	sub	sp, #116	; 0x74
 8007264:	4614      	mov	r4, r2
 8007266:	4698      	mov	r8, r3
 8007268:	4606      	mov	r6, r0
 800726a:	b118      	cbz	r0, 8007274 <_vfiprintf_r+0x18>
 800726c:	6983      	ldr	r3, [r0, #24]
 800726e:	b90b      	cbnz	r3, 8007274 <_vfiprintf_r+0x18>
 8007270:	f000 fc9a 	bl	8007ba8 <__sinit>
 8007274:	4b89      	ldr	r3, [pc, #548]	; (800749c <_vfiprintf_r+0x240>)
 8007276:	429d      	cmp	r5, r3
 8007278:	d11b      	bne.n	80072b2 <_vfiprintf_r+0x56>
 800727a:	6875      	ldr	r5, [r6, #4]
 800727c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800727e:	07d9      	lsls	r1, r3, #31
 8007280:	d405      	bmi.n	800728e <_vfiprintf_r+0x32>
 8007282:	89ab      	ldrh	r3, [r5, #12]
 8007284:	059a      	lsls	r2, r3, #22
 8007286:	d402      	bmi.n	800728e <_vfiprintf_r+0x32>
 8007288:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800728a:	f000 fd2b 	bl	8007ce4 <__retarget_lock_acquire_recursive>
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	071b      	lsls	r3, r3, #28
 8007292:	d501      	bpl.n	8007298 <_vfiprintf_r+0x3c>
 8007294:	692b      	ldr	r3, [r5, #16]
 8007296:	b9eb      	cbnz	r3, 80072d4 <_vfiprintf_r+0x78>
 8007298:	4629      	mov	r1, r5
 800729a:	4630      	mov	r0, r6
 800729c:	f000 faf4 	bl	8007888 <__swsetup_r>
 80072a0:	b1c0      	cbz	r0, 80072d4 <_vfiprintf_r+0x78>
 80072a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072a4:	07dc      	lsls	r4, r3, #31
 80072a6:	d50e      	bpl.n	80072c6 <_vfiprintf_r+0x6a>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b01d      	add	sp, #116	; 0x74
 80072ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b2:	4b7b      	ldr	r3, [pc, #492]	; (80074a0 <_vfiprintf_r+0x244>)
 80072b4:	429d      	cmp	r5, r3
 80072b6:	d101      	bne.n	80072bc <_vfiprintf_r+0x60>
 80072b8:	68b5      	ldr	r5, [r6, #8]
 80072ba:	e7df      	b.n	800727c <_vfiprintf_r+0x20>
 80072bc:	4b79      	ldr	r3, [pc, #484]	; (80074a4 <_vfiprintf_r+0x248>)
 80072be:	429d      	cmp	r5, r3
 80072c0:	bf08      	it	eq
 80072c2:	68f5      	ldreq	r5, [r6, #12]
 80072c4:	e7da      	b.n	800727c <_vfiprintf_r+0x20>
 80072c6:	89ab      	ldrh	r3, [r5, #12]
 80072c8:	0598      	lsls	r0, r3, #22
 80072ca:	d4ed      	bmi.n	80072a8 <_vfiprintf_r+0x4c>
 80072cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072ce:	f000 fd0a 	bl	8007ce6 <__retarget_lock_release_recursive>
 80072d2:	e7e9      	b.n	80072a8 <_vfiprintf_r+0x4c>
 80072d4:	2300      	movs	r3, #0
 80072d6:	9309      	str	r3, [sp, #36]	; 0x24
 80072d8:	2320      	movs	r3, #32
 80072da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072de:	f8cd 800c 	str.w	r8, [sp, #12]
 80072e2:	2330      	movs	r3, #48	; 0x30
 80072e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80074a8 <_vfiprintf_r+0x24c>
 80072e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072ec:	f04f 0901 	mov.w	r9, #1
 80072f0:	4623      	mov	r3, r4
 80072f2:	469a      	mov	sl, r3
 80072f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f8:	b10a      	cbz	r2, 80072fe <_vfiprintf_r+0xa2>
 80072fa:	2a25      	cmp	r2, #37	; 0x25
 80072fc:	d1f9      	bne.n	80072f2 <_vfiprintf_r+0x96>
 80072fe:	ebba 0b04 	subs.w	fp, sl, r4
 8007302:	d00b      	beq.n	800731c <_vfiprintf_r+0xc0>
 8007304:	465b      	mov	r3, fp
 8007306:	4622      	mov	r2, r4
 8007308:	4629      	mov	r1, r5
 800730a:	4630      	mov	r0, r6
 800730c:	f7ff ff93 	bl	8007236 <__sfputs_r>
 8007310:	3001      	adds	r0, #1
 8007312:	f000 80aa 	beq.w	800746a <_vfiprintf_r+0x20e>
 8007316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007318:	445a      	add	r2, fp
 800731a:	9209      	str	r2, [sp, #36]	; 0x24
 800731c:	f89a 3000 	ldrb.w	r3, [sl]
 8007320:	2b00      	cmp	r3, #0
 8007322:	f000 80a2 	beq.w	800746a <_vfiprintf_r+0x20e>
 8007326:	2300      	movs	r3, #0
 8007328:	f04f 32ff 	mov.w	r2, #4294967295
 800732c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007330:	f10a 0a01 	add.w	sl, sl, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	9307      	str	r3, [sp, #28]
 8007338:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800733c:	931a      	str	r3, [sp, #104]	; 0x68
 800733e:	4654      	mov	r4, sl
 8007340:	2205      	movs	r2, #5
 8007342:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007346:	4858      	ldr	r0, [pc, #352]	; (80074a8 <_vfiprintf_r+0x24c>)
 8007348:	f7f8 ff62 	bl	8000210 <memchr>
 800734c:	9a04      	ldr	r2, [sp, #16]
 800734e:	b9d8      	cbnz	r0, 8007388 <_vfiprintf_r+0x12c>
 8007350:	06d1      	lsls	r1, r2, #27
 8007352:	bf44      	itt	mi
 8007354:	2320      	movmi	r3, #32
 8007356:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800735a:	0713      	lsls	r3, r2, #28
 800735c:	bf44      	itt	mi
 800735e:	232b      	movmi	r3, #43	; 0x2b
 8007360:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007364:	f89a 3000 	ldrb.w	r3, [sl]
 8007368:	2b2a      	cmp	r3, #42	; 0x2a
 800736a:	d015      	beq.n	8007398 <_vfiprintf_r+0x13c>
 800736c:	9a07      	ldr	r2, [sp, #28]
 800736e:	4654      	mov	r4, sl
 8007370:	2000      	movs	r0, #0
 8007372:	f04f 0c0a 	mov.w	ip, #10
 8007376:	4621      	mov	r1, r4
 8007378:	f811 3b01 	ldrb.w	r3, [r1], #1
 800737c:	3b30      	subs	r3, #48	; 0x30
 800737e:	2b09      	cmp	r3, #9
 8007380:	d94e      	bls.n	8007420 <_vfiprintf_r+0x1c4>
 8007382:	b1b0      	cbz	r0, 80073b2 <_vfiprintf_r+0x156>
 8007384:	9207      	str	r2, [sp, #28]
 8007386:	e014      	b.n	80073b2 <_vfiprintf_r+0x156>
 8007388:	eba0 0308 	sub.w	r3, r0, r8
 800738c:	fa09 f303 	lsl.w	r3, r9, r3
 8007390:	4313      	orrs	r3, r2
 8007392:	9304      	str	r3, [sp, #16]
 8007394:	46a2      	mov	sl, r4
 8007396:	e7d2      	b.n	800733e <_vfiprintf_r+0xe2>
 8007398:	9b03      	ldr	r3, [sp, #12]
 800739a:	1d19      	adds	r1, r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	9103      	str	r1, [sp, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	bfbb      	ittet	lt
 80073a4:	425b      	neglt	r3, r3
 80073a6:	f042 0202 	orrlt.w	r2, r2, #2
 80073aa:	9307      	strge	r3, [sp, #28]
 80073ac:	9307      	strlt	r3, [sp, #28]
 80073ae:	bfb8      	it	lt
 80073b0:	9204      	strlt	r2, [sp, #16]
 80073b2:	7823      	ldrb	r3, [r4, #0]
 80073b4:	2b2e      	cmp	r3, #46	; 0x2e
 80073b6:	d10c      	bne.n	80073d2 <_vfiprintf_r+0x176>
 80073b8:	7863      	ldrb	r3, [r4, #1]
 80073ba:	2b2a      	cmp	r3, #42	; 0x2a
 80073bc:	d135      	bne.n	800742a <_vfiprintf_r+0x1ce>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d1a      	adds	r2, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9203      	str	r2, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfb8      	it	lt
 80073ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80073ce:	3402      	adds	r4, #2
 80073d0:	9305      	str	r3, [sp, #20]
 80073d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80074b8 <_vfiprintf_r+0x25c>
 80073d6:	7821      	ldrb	r1, [r4, #0]
 80073d8:	2203      	movs	r2, #3
 80073da:	4650      	mov	r0, sl
 80073dc:	f7f8 ff18 	bl	8000210 <memchr>
 80073e0:	b140      	cbz	r0, 80073f4 <_vfiprintf_r+0x198>
 80073e2:	2340      	movs	r3, #64	; 0x40
 80073e4:	eba0 000a 	sub.w	r0, r0, sl
 80073e8:	fa03 f000 	lsl.w	r0, r3, r0
 80073ec:	9b04      	ldr	r3, [sp, #16]
 80073ee:	4303      	orrs	r3, r0
 80073f0:	3401      	adds	r4, #1
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f8:	482c      	ldr	r0, [pc, #176]	; (80074ac <_vfiprintf_r+0x250>)
 80073fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073fe:	2206      	movs	r2, #6
 8007400:	f7f8 ff06 	bl	8000210 <memchr>
 8007404:	2800      	cmp	r0, #0
 8007406:	d03f      	beq.n	8007488 <_vfiprintf_r+0x22c>
 8007408:	4b29      	ldr	r3, [pc, #164]	; (80074b0 <_vfiprintf_r+0x254>)
 800740a:	bb1b      	cbnz	r3, 8007454 <_vfiprintf_r+0x1f8>
 800740c:	9b03      	ldr	r3, [sp, #12]
 800740e:	3307      	adds	r3, #7
 8007410:	f023 0307 	bic.w	r3, r3, #7
 8007414:	3308      	adds	r3, #8
 8007416:	9303      	str	r3, [sp, #12]
 8007418:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800741a:	443b      	add	r3, r7
 800741c:	9309      	str	r3, [sp, #36]	; 0x24
 800741e:	e767      	b.n	80072f0 <_vfiprintf_r+0x94>
 8007420:	fb0c 3202 	mla	r2, ip, r2, r3
 8007424:	460c      	mov	r4, r1
 8007426:	2001      	movs	r0, #1
 8007428:	e7a5      	b.n	8007376 <_vfiprintf_r+0x11a>
 800742a:	2300      	movs	r3, #0
 800742c:	3401      	adds	r4, #1
 800742e:	9305      	str	r3, [sp, #20]
 8007430:	4619      	mov	r1, r3
 8007432:	f04f 0c0a 	mov.w	ip, #10
 8007436:	4620      	mov	r0, r4
 8007438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800743c:	3a30      	subs	r2, #48	; 0x30
 800743e:	2a09      	cmp	r2, #9
 8007440:	d903      	bls.n	800744a <_vfiprintf_r+0x1ee>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d0c5      	beq.n	80073d2 <_vfiprintf_r+0x176>
 8007446:	9105      	str	r1, [sp, #20]
 8007448:	e7c3      	b.n	80073d2 <_vfiprintf_r+0x176>
 800744a:	fb0c 2101 	mla	r1, ip, r1, r2
 800744e:	4604      	mov	r4, r0
 8007450:	2301      	movs	r3, #1
 8007452:	e7f0      	b.n	8007436 <_vfiprintf_r+0x1da>
 8007454:	ab03      	add	r3, sp, #12
 8007456:	9300      	str	r3, [sp, #0]
 8007458:	462a      	mov	r2, r5
 800745a:	4b16      	ldr	r3, [pc, #88]	; (80074b4 <_vfiprintf_r+0x258>)
 800745c:	a904      	add	r1, sp, #16
 800745e:	4630      	mov	r0, r6
 8007460:	f3af 8000 	nop.w
 8007464:	4607      	mov	r7, r0
 8007466:	1c78      	adds	r0, r7, #1
 8007468:	d1d6      	bne.n	8007418 <_vfiprintf_r+0x1bc>
 800746a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800746c:	07d9      	lsls	r1, r3, #31
 800746e:	d405      	bmi.n	800747c <_vfiprintf_r+0x220>
 8007470:	89ab      	ldrh	r3, [r5, #12]
 8007472:	059a      	lsls	r2, r3, #22
 8007474:	d402      	bmi.n	800747c <_vfiprintf_r+0x220>
 8007476:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007478:	f000 fc35 	bl	8007ce6 <__retarget_lock_release_recursive>
 800747c:	89ab      	ldrh	r3, [r5, #12]
 800747e:	065b      	lsls	r3, r3, #25
 8007480:	f53f af12 	bmi.w	80072a8 <_vfiprintf_r+0x4c>
 8007484:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007486:	e711      	b.n	80072ac <_vfiprintf_r+0x50>
 8007488:	ab03      	add	r3, sp, #12
 800748a:	9300      	str	r3, [sp, #0]
 800748c:	462a      	mov	r2, r5
 800748e:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <_vfiprintf_r+0x258>)
 8007490:	a904      	add	r1, sp, #16
 8007492:	4630      	mov	r0, r6
 8007494:	f000 f880 	bl	8007598 <_printf_i>
 8007498:	e7e4      	b.n	8007464 <_vfiprintf_r+0x208>
 800749a:	bf00      	nop
 800749c:	08008580 	.word	0x08008580
 80074a0:	080085a0 	.word	0x080085a0
 80074a4:	08008560 	.word	0x08008560
 80074a8:	0800852c 	.word	0x0800852c
 80074ac:	08008536 	.word	0x08008536
 80074b0:	00000000 	.word	0x00000000
 80074b4:	08007237 	.word	0x08007237
 80074b8:	08008532 	.word	0x08008532

080074bc <_printf_common>:
 80074bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c0:	4616      	mov	r6, r2
 80074c2:	4699      	mov	r9, r3
 80074c4:	688a      	ldr	r2, [r1, #8]
 80074c6:	690b      	ldr	r3, [r1, #16]
 80074c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80074cc:	4293      	cmp	r3, r2
 80074ce:	bfb8      	it	lt
 80074d0:	4613      	movlt	r3, r2
 80074d2:	6033      	str	r3, [r6, #0]
 80074d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074d8:	4607      	mov	r7, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	b10a      	cbz	r2, 80074e2 <_printf_common+0x26>
 80074de:	3301      	adds	r3, #1
 80074e0:	6033      	str	r3, [r6, #0]
 80074e2:	6823      	ldr	r3, [r4, #0]
 80074e4:	0699      	lsls	r1, r3, #26
 80074e6:	bf42      	ittt	mi
 80074e8:	6833      	ldrmi	r3, [r6, #0]
 80074ea:	3302      	addmi	r3, #2
 80074ec:	6033      	strmi	r3, [r6, #0]
 80074ee:	6825      	ldr	r5, [r4, #0]
 80074f0:	f015 0506 	ands.w	r5, r5, #6
 80074f4:	d106      	bne.n	8007504 <_printf_common+0x48>
 80074f6:	f104 0a19 	add.w	sl, r4, #25
 80074fa:	68e3      	ldr	r3, [r4, #12]
 80074fc:	6832      	ldr	r2, [r6, #0]
 80074fe:	1a9b      	subs	r3, r3, r2
 8007500:	42ab      	cmp	r3, r5
 8007502:	dc26      	bgt.n	8007552 <_printf_common+0x96>
 8007504:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007508:	1e13      	subs	r3, r2, #0
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	bf18      	it	ne
 800750e:	2301      	movne	r3, #1
 8007510:	0692      	lsls	r2, r2, #26
 8007512:	d42b      	bmi.n	800756c <_printf_common+0xb0>
 8007514:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007518:	4649      	mov	r1, r9
 800751a:	4638      	mov	r0, r7
 800751c:	47c0      	blx	r8
 800751e:	3001      	adds	r0, #1
 8007520:	d01e      	beq.n	8007560 <_printf_common+0xa4>
 8007522:	6823      	ldr	r3, [r4, #0]
 8007524:	68e5      	ldr	r5, [r4, #12]
 8007526:	6832      	ldr	r2, [r6, #0]
 8007528:	f003 0306 	and.w	r3, r3, #6
 800752c:	2b04      	cmp	r3, #4
 800752e:	bf08      	it	eq
 8007530:	1aad      	subeq	r5, r5, r2
 8007532:	68a3      	ldr	r3, [r4, #8]
 8007534:	6922      	ldr	r2, [r4, #16]
 8007536:	bf0c      	ite	eq
 8007538:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800753c:	2500      	movne	r5, #0
 800753e:	4293      	cmp	r3, r2
 8007540:	bfc4      	itt	gt
 8007542:	1a9b      	subgt	r3, r3, r2
 8007544:	18ed      	addgt	r5, r5, r3
 8007546:	2600      	movs	r6, #0
 8007548:	341a      	adds	r4, #26
 800754a:	42b5      	cmp	r5, r6
 800754c:	d11a      	bne.n	8007584 <_printf_common+0xc8>
 800754e:	2000      	movs	r0, #0
 8007550:	e008      	b.n	8007564 <_printf_common+0xa8>
 8007552:	2301      	movs	r3, #1
 8007554:	4652      	mov	r2, sl
 8007556:	4649      	mov	r1, r9
 8007558:	4638      	mov	r0, r7
 800755a:	47c0      	blx	r8
 800755c:	3001      	adds	r0, #1
 800755e:	d103      	bne.n	8007568 <_printf_common+0xac>
 8007560:	f04f 30ff 	mov.w	r0, #4294967295
 8007564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007568:	3501      	adds	r5, #1
 800756a:	e7c6      	b.n	80074fa <_printf_common+0x3e>
 800756c:	18e1      	adds	r1, r4, r3
 800756e:	1c5a      	adds	r2, r3, #1
 8007570:	2030      	movs	r0, #48	; 0x30
 8007572:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007576:	4422      	add	r2, r4
 8007578:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800757c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007580:	3302      	adds	r3, #2
 8007582:	e7c7      	b.n	8007514 <_printf_common+0x58>
 8007584:	2301      	movs	r3, #1
 8007586:	4622      	mov	r2, r4
 8007588:	4649      	mov	r1, r9
 800758a:	4638      	mov	r0, r7
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d0e6      	beq.n	8007560 <_printf_common+0xa4>
 8007592:	3601      	adds	r6, #1
 8007594:	e7d9      	b.n	800754a <_printf_common+0x8e>
	...

08007598 <_printf_i>:
 8007598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800759c:	7e0f      	ldrb	r7, [r1, #24]
 800759e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075a0:	2f78      	cmp	r7, #120	; 0x78
 80075a2:	4691      	mov	r9, r2
 80075a4:	4680      	mov	r8, r0
 80075a6:	460c      	mov	r4, r1
 80075a8:	469a      	mov	sl, r3
 80075aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075ae:	d807      	bhi.n	80075c0 <_printf_i+0x28>
 80075b0:	2f62      	cmp	r7, #98	; 0x62
 80075b2:	d80a      	bhi.n	80075ca <_printf_i+0x32>
 80075b4:	2f00      	cmp	r7, #0
 80075b6:	f000 80d8 	beq.w	800776a <_printf_i+0x1d2>
 80075ba:	2f58      	cmp	r7, #88	; 0x58
 80075bc:	f000 80a3 	beq.w	8007706 <_printf_i+0x16e>
 80075c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075c8:	e03a      	b.n	8007640 <_printf_i+0xa8>
 80075ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80075ce:	2b15      	cmp	r3, #21
 80075d0:	d8f6      	bhi.n	80075c0 <_printf_i+0x28>
 80075d2:	a101      	add	r1, pc, #4	; (adr r1, 80075d8 <_printf_i+0x40>)
 80075d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d8:	08007631 	.word	0x08007631
 80075dc:	08007645 	.word	0x08007645
 80075e0:	080075c1 	.word	0x080075c1
 80075e4:	080075c1 	.word	0x080075c1
 80075e8:	080075c1 	.word	0x080075c1
 80075ec:	080075c1 	.word	0x080075c1
 80075f0:	08007645 	.word	0x08007645
 80075f4:	080075c1 	.word	0x080075c1
 80075f8:	080075c1 	.word	0x080075c1
 80075fc:	080075c1 	.word	0x080075c1
 8007600:	080075c1 	.word	0x080075c1
 8007604:	08007751 	.word	0x08007751
 8007608:	08007675 	.word	0x08007675
 800760c:	08007733 	.word	0x08007733
 8007610:	080075c1 	.word	0x080075c1
 8007614:	080075c1 	.word	0x080075c1
 8007618:	08007773 	.word	0x08007773
 800761c:	080075c1 	.word	0x080075c1
 8007620:	08007675 	.word	0x08007675
 8007624:	080075c1 	.word	0x080075c1
 8007628:	080075c1 	.word	0x080075c1
 800762c:	0800773b 	.word	0x0800773b
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	1d1a      	adds	r2, r3, #4
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	602a      	str	r2, [r5, #0]
 8007638:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800763c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007640:	2301      	movs	r3, #1
 8007642:	e0a3      	b.n	800778c <_printf_i+0x1f4>
 8007644:	6820      	ldr	r0, [r4, #0]
 8007646:	6829      	ldr	r1, [r5, #0]
 8007648:	0606      	lsls	r6, r0, #24
 800764a:	f101 0304 	add.w	r3, r1, #4
 800764e:	d50a      	bpl.n	8007666 <_printf_i+0xce>
 8007650:	680e      	ldr	r6, [r1, #0]
 8007652:	602b      	str	r3, [r5, #0]
 8007654:	2e00      	cmp	r6, #0
 8007656:	da03      	bge.n	8007660 <_printf_i+0xc8>
 8007658:	232d      	movs	r3, #45	; 0x2d
 800765a:	4276      	negs	r6, r6
 800765c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007660:	485e      	ldr	r0, [pc, #376]	; (80077dc <_printf_i+0x244>)
 8007662:	230a      	movs	r3, #10
 8007664:	e019      	b.n	800769a <_printf_i+0x102>
 8007666:	680e      	ldr	r6, [r1, #0]
 8007668:	602b      	str	r3, [r5, #0]
 800766a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800766e:	bf18      	it	ne
 8007670:	b236      	sxthne	r6, r6
 8007672:	e7ef      	b.n	8007654 <_printf_i+0xbc>
 8007674:	682b      	ldr	r3, [r5, #0]
 8007676:	6820      	ldr	r0, [r4, #0]
 8007678:	1d19      	adds	r1, r3, #4
 800767a:	6029      	str	r1, [r5, #0]
 800767c:	0601      	lsls	r1, r0, #24
 800767e:	d501      	bpl.n	8007684 <_printf_i+0xec>
 8007680:	681e      	ldr	r6, [r3, #0]
 8007682:	e002      	b.n	800768a <_printf_i+0xf2>
 8007684:	0646      	lsls	r6, r0, #25
 8007686:	d5fb      	bpl.n	8007680 <_printf_i+0xe8>
 8007688:	881e      	ldrh	r6, [r3, #0]
 800768a:	4854      	ldr	r0, [pc, #336]	; (80077dc <_printf_i+0x244>)
 800768c:	2f6f      	cmp	r7, #111	; 0x6f
 800768e:	bf0c      	ite	eq
 8007690:	2308      	moveq	r3, #8
 8007692:	230a      	movne	r3, #10
 8007694:	2100      	movs	r1, #0
 8007696:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800769a:	6865      	ldr	r5, [r4, #4]
 800769c:	60a5      	str	r5, [r4, #8]
 800769e:	2d00      	cmp	r5, #0
 80076a0:	bfa2      	ittt	ge
 80076a2:	6821      	ldrge	r1, [r4, #0]
 80076a4:	f021 0104 	bicge.w	r1, r1, #4
 80076a8:	6021      	strge	r1, [r4, #0]
 80076aa:	b90e      	cbnz	r6, 80076b0 <_printf_i+0x118>
 80076ac:	2d00      	cmp	r5, #0
 80076ae:	d04d      	beq.n	800774c <_printf_i+0x1b4>
 80076b0:	4615      	mov	r5, r2
 80076b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80076b6:	fb03 6711 	mls	r7, r3, r1, r6
 80076ba:	5dc7      	ldrb	r7, [r0, r7]
 80076bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076c0:	4637      	mov	r7, r6
 80076c2:	42bb      	cmp	r3, r7
 80076c4:	460e      	mov	r6, r1
 80076c6:	d9f4      	bls.n	80076b2 <_printf_i+0x11a>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	d10b      	bne.n	80076e4 <_printf_i+0x14c>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	07de      	lsls	r6, r3, #31
 80076d0:	d508      	bpl.n	80076e4 <_printf_i+0x14c>
 80076d2:	6923      	ldr	r3, [r4, #16]
 80076d4:	6861      	ldr	r1, [r4, #4]
 80076d6:	4299      	cmp	r1, r3
 80076d8:	bfde      	ittt	le
 80076da:	2330      	movle	r3, #48	; 0x30
 80076dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80076e4:	1b52      	subs	r2, r2, r5
 80076e6:	6122      	str	r2, [r4, #16]
 80076e8:	f8cd a000 	str.w	sl, [sp]
 80076ec:	464b      	mov	r3, r9
 80076ee:	aa03      	add	r2, sp, #12
 80076f0:	4621      	mov	r1, r4
 80076f2:	4640      	mov	r0, r8
 80076f4:	f7ff fee2 	bl	80074bc <_printf_common>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d14c      	bne.n	8007796 <_printf_i+0x1fe>
 80076fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007700:	b004      	add	sp, #16
 8007702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007706:	4835      	ldr	r0, [pc, #212]	; (80077dc <_printf_i+0x244>)
 8007708:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800770c:	6829      	ldr	r1, [r5, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	f851 6b04 	ldr.w	r6, [r1], #4
 8007714:	6029      	str	r1, [r5, #0]
 8007716:	061d      	lsls	r5, r3, #24
 8007718:	d514      	bpl.n	8007744 <_printf_i+0x1ac>
 800771a:	07df      	lsls	r7, r3, #31
 800771c:	bf44      	itt	mi
 800771e:	f043 0320 	orrmi.w	r3, r3, #32
 8007722:	6023      	strmi	r3, [r4, #0]
 8007724:	b91e      	cbnz	r6, 800772e <_printf_i+0x196>
 8007726:	6823      	ldr	r3, [r4, #0]
 8007728:	f023 0320 	bic.w	r3, r3, #32
 800772c:	6023      	str	r3, [r4, #0]
 800772e:	2310      	movs	r3, #16
 8007730:	e7b0      	b.n	8007694 <_printf_i+0xfc>
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	f043 0320 	orr.w	r3, r3, #32
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	2378      	movs	r3, #120	; 0x78
 800773c:	4828      	ldr	r0, [pc, #160]	; (80077e0 <_printf_i+0x248>)
 800773e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007742:	e7e3      	b.n	800770c <_printf_i+0x174>
 8007744:	0659      	lsls	r1, r3, #25
 8007746:	bf48      	it	mi
 8007748:	b2b6      	uxthmi	r6, r6
 800774a:	e7e6      	b.n	800771a <_printf_i+0x182>
 800774c:	4615      	mov	r5, r2
 800774e:	e7bb      	b.n	80076c8 <_printf_i+0x130>
 8007750:	682b      	ldr	r3, [r5, #0]
 8007752:	6826      	ldr	r6, [r4, #0]
 8007754:	6961      	ldr	r1, [r4, #20]
 8007756:	1d18      	adds	r0, r3, #4
 8007758:	6028      	str	r0, [r5, #0]
 800775a:	0635      	lsls	r5, r6, #24
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	d501      	bpl.n	8007764 <_printf_i+0x1cc>
 8007760:	6019      	str	r1, [r3, #0]
 8007762:	e002      	b.n	800776a <_printf_i+0x1d2>
 8007764:	0670      	lsls	r0, r6, #25
 8007766:	d5fb      	bpl.n	8007760 <_printf_i+0x1c8>
 8007768:	8019      	strh	r1, [r3, #0]
 800776a:	2300      	movs	r3, #0
 800776c:	6123      	str	r3, [r4, #16]
 800776e:	4615      	mov	r5, r2
 8007770:	e7ba      	b.n	80076e8 <_printf_i+0x150>
 8007772:	682b      	ldr	r3, [r5, #0]
 8007774:	1d1a      	adds	r2, r3, #4
 8007776:	602a      	str	r2, [r5, #0]
 8007778:	681d      	ldr	r5, [r3, #0]
 800777a:	6862      	ldr	r2, [r4, #4]
 800777c:	2100      	movs	r1, #0
 800777e:	4628      	mov	r0, r5
 8007780:	f7f8 fd46 	bl	8000210 <memchr>
 8007784:	b108      	cbz	r0, 800778a <_printf_i+0x1f2>
 8007786:	1b40      	subs	r0, r0, r5
 8007788:	6060      	str	r0, [r4, #4]
 800778a:	6863      	ldr	r3, [r4, #4]
 800778c:	6123      	str	r3, [r4, #16]
 800778e:	2300      	movs	r3, #0
 8007790:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007794:	e7a8      	b.n	80076e8 <_printf_i+0x150>
 8007796:	6923      	ldr	r3, [r4, #16]
 8007798:	462a      	mov	r2, r5
 800779a:	4649      	mov	r1, r9
 800779c:	4640      	mov	r0, r8
 800779e:	47d0      	blx	sl
 80077a0:	3001      	adds	r0, #1
 80077a2:	d0ab      	beq.n	80076fc <_printf_i+0x164>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	079b      	lsls	r3, r3, #30
 80077a8:	d413      	bmi.n	80077d2 <_printf_i+0x23a>
 80077aa:	68e0      	ldr	r0, [r4, #12]
 80077ac:	9b03      	ldr	r3, [sp, #12]
 80077ae:	4298      	cmp	r0, r3
 80077b0:	bfb8      	it	lt
 80077b2:	4618      	movlt	r0, r3
 80077b4:	e7a4      	b.n	8007700 <_printf_i+0x168>
 80077b6:	2301      	movs	r3, #1
 80077b8:	4632      	mov	r2, r6
 80077ba:	4649      	mov	r1, r9
 80077bc:	4640      	mov	r0, r8
 80077be:	47d0      	blx	sl
 80077c0:	3001      	adds	r0, #1
 80077c2:	d09b      	beq.n	80076fc <_printf_i+0x164>
 80077c4:	3501      	adds	r5, #1
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	9903      	ldr	r1, [sp, #12]
 80077ca:	1a5b      	subs	r3, r3, r1
 80077cc:	42ab      	cmp	r3, r5
 80077ce:	dcf2      	bgt.n	80077b6 <_printf_i+0x21e>
 80077d0:	e7eb      	b.n	80077aa <_printf_i+0x212>
 80077d2:	2500      	movs	r5, #0
 80077d4:	f104 0619 	add.w	r6, r4, #25
 80077d8:	e7f5      	b.n	80077c6 <_printf_i+0x22e>
 80077da:	bf00      	nop
 80077dc:	0800853d 	.word	0x0800853d
 80077e0:	0800854e 	.word	0x0800854e

080077e4 <__swbuf_r>:
 80077e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077e6:	460e      	mov	r6, r1
 80077e8:	4614      	mov	r4, r2
 80077ea:	4605      	mov	r5, r0
 80077ec:	b118      	cbz	r0, 80077f6 <__swbuf_r+0x12>
 80077ee:	6983      	ldr	r3, [r0, #24]
 80077f0:	b90b      	cbnz	r3, 80077f6 <__swbuf_r+0x12>
 80077f2:	f000 f9d9 	bl	8007ba8 <__sinit>
 80077f6:	4b21      	ldr	r3, [pc, #132]	; (800787c <__swbuf_r+0x98>)
 80077f8:	429c      	cmp	r4, r3
 80077fa:	d12b      	bne.n	8007854 <__swbuf_r+0x70>
 80077fc:	686c      	ldr	r4, [r5, #4]
 80077fe:	69a3      	ldr	r3, [r4, #24]
 8007800:	60a3      	str	r3, [r4, #8]
 8007802:	89a3      	ldrh	r3, [r4, #12]
 8007804:	071a      	lsls	r2, r3, #28
 8007806:	d52f      	bpl.n	8007868 <__swbuf_r+0x84>
 8007808:	6923      	ldr	r3, [r4, #16]
 800780a:	b36b      	cbz	r3, 8007868 <__swbuf_r+0x84>
 800780c:	6923      	ldr	r3, [r4, #16]
 800780e:	6820      	ldr	r0, [r4, #0]
 8007810:	1ac0      	subs	r0, r0, r3
 8007812:	6963      	ldr	r3, [r4, #20]
 8007814:	b2f6      	uxtb	r6, r6
 8007816:	4283      	cmp	r3, r0
 8007818:	4637      	mov	r7, r6
 800781a:	dc04      	bgt.n	8007826 <__swbuf_r+0x42>
 800781c:	4621      	mov	r1, r4
 800781e:	4628      	mov	r0, r5
 8007820:	f000 f92e 	bl	8007a80 <_fflush_r>
 8007824:	bb30      	cbnz	r0, 8007874 <__swbuf_r+0x90>
 8007826:	68a3      	ldr	r3, [r4, #8]
 8007828:	3b01      	subs	r3, #1
 800782a:	60a3      	str	r3, [r4, #8]
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	1c5a      	adds	r2, r3, #1
 8007830:	6022      	str	r2, [r4, #0]
 8007832:	701e      	strb	r6, [r3, #0]
 8007834:	6963      	ldr	r3, [r4, #20]
 8007836:	3001      	adds	r0, #1
 8007838:	4283      	cmp	r3, r0
 800783a:	d004      	beq.n	8007846 <__swbuf_r+0x62>
 800783c:	89a3      	ldrh	r3, [r4, #12]
 800783e:	07db      	lsls	r3, r3, #31
 8007840:	d506      	bpl.n	8007850 <__swbuf_r+0x6c>
 8007842:	2e0a      	cmp	r6, #10
 8007844:	d104      	bne.n	8007850 <__swbuf_r+0x6c>
 8007846:	4621      	mov	r1, r4
 8007848:	4628      	mov	r0, r5
 800784a:	f000 f919 	bl	8007a80 <_fflush_r>
 800784e:	b988      	cbnz	r0, 8007874 <__swbuf_r+0x90>
 8007850:	4638      	mov	r0, r7
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007854:	4b0a      	ldr	r3, [pc, #40]	; (8007880 <__swbuf_r+0x9c>)
 8007856:	429c      	cmp	r4, r3
 8007858:	d101      	bne.n	800785e <__swbuf_r+0x7a>
 800785a:	68ac      	ldr	r4, [r5, #8]
 800785c:	e7cf      	b.n	80077fe <__swbuf_r+0x1a>
 800785e:	4b09      	ldr	r3, [pc, #36]	; (8007884 <__swbuf_r+0xa0>)
 8007860:	429c      	cmp	r4, r3
 8007862:	bf08      	it	eq
 8007864:	68ec      	ldreq	r4, [r5, #12]
 8007866:	e7ca      	b.n	80077fe <__swbuf_r+0x1a>
 8007868:	4621      	mov	r1, r4
 800786a:	4628      	mov	r0, r5
 800786c:	f000 f80c 	bl	8007888 <__swsetup_r>
 8007870:	2800      	cmp	r0, #0
 8007872:	d0cb      	beq.n	800780c <__swbuf_r+0x28>
 8007874:	f04f 37ff 	mov.w	r7, #4294967295
 8007878:	e7ea      	b.n	8007850 <__swbuf_r+0x6c>
 800787a:	bf00      	nop
 800787c:	08008580 	.word	0x08008580
 8007880:	080085a0 	.word	0x080085a0
 8007884:	08008560 	.word	0x08008560

08007888 <__swsetup_r>:
 8007888:	4b32      	ldr	r3, [pc, #200]	; (8007954 <__swsetup_r+0xcc>)
 800788a:	b570      	push	{r4, r5, r6, lr}
 800788c:	681d      	ldr	r5, [r3, #0]
 800788e:	4606      	mov	r6, r0
 8007890:	460c      	mov	r4, r1
 8007892:	b125      	cbz	r5, 800789e <__swsetup_r+0x16>
 8007894:	69ab      	ldr	r3, [r5, #24]
 8007896:	b913      	cbnz	r3, 800789e <__swsetup_r+0x16>
 8007898:	4628      	mov	r0, r5
 800789a:	f000 f985 	bl	8007ba8 <__sinit>
 800789e:	4b2e      	ldr	r3, [pc, #184]	; (8007958 <__swsetup_r+0xd0>)
 80078a0:	429c      	cmp	r4, r3
 80078a2:	d10f      	bne.n	80078c4 <__swsetup_r+0x3c>
 80078a4:	686c      	ldr	r4, [r5, #4]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80078ac:	0719      	lsls	r1, r3, #28
 80078ae:	d42c      	bmi.n	800790a <__swsetup_r+0x82>
 80078b0:	06dd      	lsls	r5, r3, #27
 80078b2:	d411      	bmi.n	80078d8 <__swsetup_r+0x50>
 80078b4:	2309      	movs	r3, #9
 80078b6:	6033      	str	r3, [r6, #0]
 80078b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80078bc:	81a3      	strh	r3, [r4, #12]
 80078be:	f04f 30ff 	mov.w	r0, #4294967295
 80078c2:	e03e      	b.n	8007942 <__swsetup_r+0xba>
 80078c4:	4b25      	ldr	r3, [pc, #148]	; (800795c <__swsetup_r+0xd4>)
 80078c6:	429c      	cmp	r4, r3
 80078c8:	d101      	bne.n	80078ce <__swsetup_r+0x46>
 80078ca:	68ac      	ldr	r4, [r5, #8]
 80078cc:	e7eb      	b.n	80078a6 <__swsetup_r+0x1e>
 80078ce:	4b24      	ldr	r3, [pc, #144]	; (8007960 <__swsetup_r+0xd8>)
 80078d0:	429c      	cmp	r4, r3
 80078d2:	bf08      	it	eq
 80078d4:	68ec      	ldreq	r4, [r5, #12]
 80078d6:	e7e6      	b.n	80078a6 <__swsetup_r+0x1e>
 80078d8:	0758      	lsls	r0, r3, #29
 80078da:	d512      	bpl.n	8007902 <__swsetup_r+0x7a>
 80078dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80078de:	b141      	cbz	r1, 80078f2 <__swsetup_r+0x6a>
 80078e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80078e4:	4299      	cmp	r1, r3
 80078e6:	d002      	beq.n	80078ee <__swsetup_r+0x66>
 80078e8:	4630      	mov	r0, r6
 80078ea:	f000 fa63 	bl	8007db4 <_free_r>
 80078ee:	2300      	movs	r3, #0
 80078f0:	6363      	str	r3, [r4, #52]	; 0x34
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80078f8:	81a3      	strh	r3, [r4, #12]
 80078fa:	2300      	movs	r3, #0
 80078fc:	6063      	str	r3, [r4, #4]
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f043 0308 	orr.w	r3, r3, #8
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	6923      	ldr	r3, [r4, #16]
 800790c:	b94b      	cbnz	r3, 8007922 <__swsetup_r+0x9a>
 800790e:	89a3      	ldrh	r3, [r4, #12]
 8007910:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007918:	d003      	beq.n	8007922 <__swsetup_r+0x9a>
 800791a:	4621      	mov	r1, r4
 800791c:	4630      	mov	r0, r6
 800791e:	f000 fa09 	bl	8007d34 <__smakebuf_r>
 8007922:	89a0      	ldrh	r0, [r4, #12]
 8007924:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007928:	f010 0301 	ands.w	r3, r0, #1
 800792c:	d00a      	beq.n	8007944 <__swsetup_r+0xbc>
 800792e:	2300      	movs	r3, #0
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	6963      	ldr	r3, [r4, #20]
 8007934:	425b      	negs	r3, r3
 8007936:	61a3      	str	r3, [r4, #24]
 8007938:	6923      	ldr	r3, [r4, #16]
 800793a:	b943      	cbnz	r3, 800794e <__swsetup_r+0xc6>
 800793c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007940:	d1ba      	bne.n	80078b8 <__swsetup_r+0x30>
 8007942:	bd70      	pop	{r4, r5, r6, pc}
 8007944:	0781      	lsls	r1, r0, #30
 8007946:	bf58      	it	pl
 8007948:	6963      	ldrpl	r3, [r4, #20]
 800794a:	60a3      	str	r3, [r4, #8]
 800794c:	e7f4      	b.n	8007938 <__swsetup_r+0xb0>
 800794e:	2000      	movs	r0, #0
 8007950:	e7f7      	b.n	8007942 <__swsetup_r+0xba>
 8007952:	bf00      	nop
 8007954:	20000094 	.word	0x20000094
 8007958:	08008580 	.word	0x08008580
 800795c:	080085a0 	.word	0x080085a0
 8007960:	08008560 	.word	0x08008560

08007964 <abort>:
 8007964:	b508      	push	{r3, lr}
 8007966:	2006      	movs	r0, #6
 8007968:	f000 fb3c 	bl	8007fe4 <raise>
 800796c:	2001      	movs	r0, #1
 800796e:	f7fa fabd 	bl	8001eec <_exit>
	...

08007974 <__sflush_r>:
 8007974:	898a      	ldrh	r2, [r1, #12]
 8007976:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800797a:	4605      	mov	r5, r0
 800797c:	0710      	lsls	r0, r2, #28
 800797e:	460c      	mov	r4, r1
 8007980:	d458      	bmi.n	8007a34 <__sflush_r+0xc0>
 8007982:	684b      	ldr	r3, [r1, #4]
 8007984:	2b00      	cmp	r3, #0
 8007986:	dc05      	bgt.n	8007994 <__sflush_r+0x20>
 8007988:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc02      	bgt.n	8007994 <__sflush_r+0x20>
 800798e:	2000      	movs	r0, #0
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007994:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007996:	2e00      	cmp	r6, #0
 8007998:	d0f9      	beq.n	800798e <__sflush_r+0x1a>
 800799a:	2300      	movs	r3, #0
 800799c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80079a0:	682f      	ldr	r7, [r5, #0]
 80079a2:	602b      	str	r3, [r5, #0]
 80079a4:	d032      	beq.n	8007a0c <__sflush_r+0x98>
 80079a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80079a8:	89a3      	ldrh	r3, [r4, #12]
 80079aa:	075a      	lsls	r2, r3, #29
 80079ac:	d505      	bpl.n	80079ba <__sflush_r+0x46>
 80079ae:	6863      	ldr	r3, [r4, #4]
 80079b0:	1ac0      	subs	r0, r0, r3
 80079b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80079b4:	b10b      	cbz	r3, 80079ba <__sflush_r+0x46>
 80079b6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80079b8:	1ac0      	subs	r0, r0, r3
 80079ba:	2300      	movs	r3, #0
 80079bc:	4602      	mov	r2, r0
 80079be:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80079c0:	6a21      	ldr	r1, [r4, #32]
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b0      	blx	r6
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	d106      	bne.n	80079da <__sflush_r+0x66>
 80079cc:	6829      	ldr	r1, [r5, #0]
 80079ce:	291d      	cmp	r1, #29
 80079d0:	d82c      	bhi.n	8007a2c <__sflush_r+0xb8>
 80079d2:	4a2a      	ldr	r2, [pc, #168]	; (8007a7c <__sflush_r+0x108>)
 80079d4:	40ca      	lsrs	r2, r1
 80079d6:	07d6      	lsls	r6, r2, #31
 80079d8:	d528      	bpl.n	8007a2c <__sflush_r+0xb8>
 80079da:	2200      	movs	r2, #0
 80079dc:	6062      	str	r2, [r4, #4]
 80079de:	04d9      	lsls	r1, r3, #19
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	6022      	str	r2, [r4, #0]
 80079e4:	d504      	bpl.n	80079f0 <__sflush_r+0x7c>
 80079e6:	1c42      	adds	r2, r0, #1
 80079e8:	d101      	bne.n	80079ee <__sflush_r+0x7a>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	b903      	cbnz	r3, 80079f0 <__sflush_r+0x7c>
 80079ee:	6560      	str	r0, [r4, #84]	; 0x54
 80079f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079f2:	602f      	str	r7, [r5, #0]
 80079f4:	2900      	cmp	r1, #0
 80079f6:	d0ca      	beq.n	800798e <__sflush_r+0x1a>
 80079f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80079fc:	4299      	cmp	r1, r3
 80079fe:	d002      	beq.n	8007a06 <__sflush_r+0x92>
 8007a00:	4628      	mov	r0, r5
 8007a02:	f000 f9d7 	bl	8007db4 <_free_r>
 8007a06:	2000      	movs	r0, #0
 8007a08:	6360      	str	r0, [r4, #52]	; 0x34
 8007a0a:	e7c1      	b.n	8007990 <__sflush_r+0x1c>
 8007a0c:	6a21      	ldr	r1, [r4, #32]
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4628      	mov	r0, r5
 8007a12:	47b0      	blx	r6
 8007a14:	1c41      	adds	r1, r0, #1
 8007a16:	d1c7      	bne.n	80079a8 <__sflush_r+0x34>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d0c4      	beq.n	80079a8 <__sflush_r+0x34>
 8007a1e:	2b1d      	cmp	r3, #29
 8007a20:	d001      	beq.n	8007a26 <__sflush_r+0xb2>
 8007a22:	2b16      	cmp	r3, #22
 8007a24:	d101      	bne.n	8007a2a <__sflush_r+0xb6>
 8007a26:	602f      	str	r7, [r5, #0]
 8007a28:	e7b1      	b.n	800798e <__sflush_r+0x1a>
 8007a2a:	89a3      	ldrh	r3, [r4, #12]
 8007a2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a30:	81a3      	strh	r3, [r4, #12]
 8007a32:	e7ad      	b.n	8007990 <__sflush_r+0x1c>
 8007a34:	690f      	ldr	r7, [r1, #16]
 8007a36:	2f00      	cmp	r7, #0
 8007a38:	d0a9      	beq.n	800798e <__sflush_r+0x1a>
 8007a3a:	0793      	lsls	r3, r2, #30
 8007a3c:	680e      	ldr	r6, [r1, #0]
 8007a3e:	bf08      	it	eq
 8007a40:	694b      	ldreq	r3, [r1, #20]
 8007a42:	600f      	str	r7, [r1, #0]
 8007a44:	bf18      	it	ne
 8007a46:	2300      	movne	r3, #0
 8007a48:	eba6 0807 	sub.w	r8, r6, r7
 8007a4c:	608b      	str	r3, [r1, #8]
 8007a4e:	f1b8 0f00 	cmp.w	r8, #0
 8007a52:	dd9c      	ble.n	800798e <__sflush_r+0x1a>
 8007a54:	6a21      	ldr	r1, [r4, #32]
 8007a56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007a58:	4643      	mov	r3, r8
 8007a5a:	463a      	mov	r2, r7
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	47b0      	blx	r6
 8007a60:	2800      	cmp	r0, #0
 8007a62:	dc06      	bgt.n	8007a72 <__sflush_r+0xfe>
 8007a64:	89a3      	ldrh	r3, [r4, #12]
 8007a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a6a:	81a3      	strh	r3, [r4, #12]
 8007a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a70:	e78e      	b.n	8007990 <__sflush_r+0x1c>
 8007a72:	4407      	add	r7, r0
 8007a74:	eba8 0800 	sub.w	r8, r8, r0
 8007a78:	e7e9      	b.n	8007a4e <__sflush_r+0xda>
 8007a7a:	bf00      	nop
 8007a7c:	20400001 	.word	0x20400001

08007a80 <_fflush_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	690b      	ldr	r3, [r1, #16]
 8007a84:	4605      	mov	r5, r0
 8007a86:	460c      	mov	r4, r1
 8007a88:	b913      	cbnz	r3, 8007a90 <_fflush_r+0x10>
 8007a8a:	2500      	movs	r5, #0
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	bd38      	pop	{r3, r4, r5, pc}
 8007a90:	b118      	cbz	r0, 8007a9a <_fflush_r+0x1a>
 8007a92:	6983      	ldr	r3, [r0, #24]
 8007a94:	b90b      	cbnz	r3, 8007a9a <_fflush_r+0x1a>
 8007a96:	f000 f887 	bl	8007ba8 <__sinit>
 8007a9a:	4b14      	ldr	r3, [pc, #80]	; (8007aec <_fflush_r+0x6c>)
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d11b      	bne.n	8007ad8 <_fflush_r+0x58>
 8007aa0:	686c      	ldr	r4, [r5, #4]
 8007aa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d0ef      	beq.n	8007a8a <_fflush_r+0xa>
 8007aaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007aac:	07d0      	lsls	r0, r2, #31
 8007aae:	d404      	bmi.n	8007aba <_fflush_r+0x3a>
 8007ab0:	0599      	lsls	r1, r3, #22
 8007ab2:	d402      	bmi.n	8007aba <_fflush_r+0x3a>
 8007ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ab6:	f000 f915 	bl	8007ce4 <__retarget_lock_acquire_recursive>
 8007aba:	4628      	mov	r0, r5
 8007abc:	4621      	mov	r1, r4
 8007abe:	f7ff ff59 	bl	8007974 <__sflush_r>
 8007ac2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ac4:	07da      	lsls	r2, r3, #31
 8007ac6:	4605      	mov	r5, r0
 8007ac8:	d4e0      	bmi.n	8007a8c <_fflush_r+0xc>
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	059b      	lsls	r3, r3, #22
 8007ace:	d4dd      	bmi.n	8007a8c <_fflush_r+0xc>
 8007ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ad2:	f000 f908 	bl	8007ce6 <__retarget_lock_release_recursive>
 8007ad6:	e7d9      	b.n	8007a8c <_fflush_r+0xc>
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <_fflush_r+0x70>)
 8007ada:	429c      	cmp	r4, r3
 8007adc:	d101      	bne.n	8007ae2 <_fflush_r+0x62>
 8007ade:	68ac      	ldr	r4, [r5, #8]
 8007ae0:	e7df      	b.n	8007aa2 <_fflush_r+0x22>
 8007ae2:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <_fflush_r+0x74>)
 8007ae4:	429c      	cmp	r4, r3
 8007ae6:	bf08      	it	eq
 8007ae8:	68ec      	ldreq	r4, [r5, #12]
 8007aea:	e7da      	b.n	8007aa2 <_fflush_r+0x22>
 8007aec:	08008580 	.word	0x08008580
 8007af0:	080085a0 	.word	0x080085a0
 8007af4:	08008560 	.word	0x08008560

08007af8 <std>:
 8007af8:	2300      	movs	r3, #0
 8007afa:	b510      	push	{r4, lr}
 8007afc:	4604      	mov	r4, r0
 8007afe:	e9c0 3300 	strd	r3, r3, [r0]
 8007b02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b06:	6083      	str	r3, [r0, #8]
 8007b08:	8181      	strh	r1, [r0, #12]
 8007b0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007b0c:	81c2      	strh	r2, [r0, #14]
 8007b0e:	6183      	str	r3, [r0, #24]
 8007b10:	4619      	mov	r1, r3
 8007b12:	2208      	movs	r2, #8
 8007b14:	305c      	adds	r0, #92	; 0x5c
 8007b16:	f7ff fb6f 	bl	80071f8 <memset>
 8007b1a:	4b05      	ldr	r3, [pc, #20]	; (8007b30 <std+0x38>)
 8007b1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007b1e:	4b05      	ldr	r3, [pc, #20]	; (8007b34 <std+0x3c>)
 8007b20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b22:	4b05      	ldr	r3, [pc, #20]	; (8007b38 <std+0x40>)
 8007b24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b26:	4b05      	ldr	r3, [pc, #20]	; (8007b3c <std+0x44>)
 8007b28:	6224      	str	r4, [r4, #32]
 8007b2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007b2c:	bd10      	pop	{r4, pc}
 8007b2e:	bf00      	nop
 8007b30:	0800801d 	.word	0x0800801d
 8007b34:	0800803f 	.word	0x0800803f
 8007b38:	08008077 	.word	0x08008077
 8007b3c:	0800809b 	.word	0x0800809b

08007b40 <_cleanup_r>:
 8007b40:	4901      	ldr	r1, [pc, #4]	; (8007b48 <_cleanup_r+0x8>)
 8007b42:	f000 b8af 	b.w	8007ca4 <_fwalk_reent>
 8007b46:	bf00      	nop
 8007b48:	08007a81 	.word	0x08007a81

08007b4c <__sfmoreglue>:
 8007b4c:	b570      	push	{r4, r5, r6, lr}
 8007b4e:	2268      	movs	r2, #104	; 0x68
 8007b50:	1e4d      	subs	r5, r1, #1
 8007b52:	4355      	muls	r5, r2
 8007b54:	460e      	mov	r6, r1
 8007b56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007b5a:	f000 f997 	bl	8007e8c <_malloc_r>
 8007b5e:	4604      	mov	r4, r0
 8007b60:	b140      	cbz	r0, 8007b74 <__sfmoreglue+0x28>
 8007b62:	2100      	movs	r1, #0
 8007b64:	e9c0 1600 	strd	r1, r6, [r0]
 8007b68:	300c      	adds	r0, #12
 8007b6a:	60a0      	str	r0, [r4, #8]
 8007b6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007b70:	f7ff fb42 	bl	80071f8 <memset>
 8007b74:	4620      	mov	r0, r4
 8007b76:	bd70      	pop	{r4, r5, r6, pc}

08007b78 <__sfp_lock_acquire>:
 8007b78:	4801      	ldr	r0, [pc, #4]	; (8007b80 <__sfp_lock_acquire+0x8>)
 8007b7a:	f000 b8b3 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007b7e:	bf00      	nop
 8007b80:	20000437 	.word	0x20000437

08007b84 <__sfp_lock_release>:
 8007b84:	4801      	ldr	r0, [pc, #4]	; (8007b8c <__sfp_lock_release+0x8>)
 8007b86:	f000 b8ae 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007b8a:	bf00      	nop
 8007b8c:	20000437 	.word	0x20000437

08007b90 <__sinit_lock_acquire>:
 8007b90:	4801      	ldr	r0, [pc, #4]	; (8007b98 <__sinit_lock_acquire+0x8>)
 8007b92:	f000 b8a7 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8007b96:	bf00      	nop
 8007b98:	20000438 	.word	0x20000438

08007b9c <__sinit_lock_release>:
 8007b9c:	4801      	ldr	r0, [pc, #4]	; (8007ba4 <__sinit_lock_release+0x8>)
 8007b9e:	f000 b8a2 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8007ba2:	bf00      	nop
 8007ba4:	20000438 	.word	0x20000438

08007ba8 <__sinit>:
 8007ba8:	b510      	push	{r4, lr}
 8007baa:	4604      	mov	r4, r0
 8007bac:	f7ff fff0 	bl	8007b90 <__sinit_lock_acquire>
 8007bb0:	69a3      	ldr	r3, [r4, #24]
 8007bb2:	b11b      	cbz	r3, 8007bbc <__sinit+0x14>
 8007bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bb8:	f7ff bff0 	b.w	8007b9c <__sinit_lock_release>
 8007bbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007bc0:	6523      	str	r3, [r4, #80]	; 0x50
 8007bc2:	4b13      	ldr	r3, [pc, #76]	; (8007c10 <__sinit+0x68>)
 8007bc4:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <__sinit+0x6c>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007bca:	42a3      	cmp	r3, r4
 8007bcc:	bf04      	itt	eq
 8007bce:	2301      	moveq	r3, #1
 8007bd0:	61a3      	streq	r3, [r4, #24]
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f820 	bl	8007c18 <__sfp>
 8007bd8:	6060      	str	r0, [r4, #4]
 8007bda:	4620      	mov	r0, r4
 8007bdc:	f000 f81c 	bl	8007c18 <__sfp>
 8007be0:	60a0      	str	r0, [r4, #8]
 8007be2:	4620      	mov	r0, r4
 8007be4:	f000 f818 	bl	8007c18 <__sfp>
 8007be8:	2200      	movs	r2, #0
 8007bea:	60e0      	str	r0, [r4, #12]
 8007bec:	2104      	movs	r1, #4
 8007bee:	6860      	ldr	r0, [r4, #4]
 8007bf0:	f7ff ff82 	bl	8007af8 <std>
 8007bf4:	68a0      	ldr	r0, [r4, #8]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	2109      	movs	r1, #9
 8007bfa:	f7ff ff7d 	bl	8007af8 <std>
 8007bfe:	68e0      	ldr	r0, [r4, #12]
 8007c00:	2202      	movs	r2, #2
 8007c02:	2112      	movs	r1, #18
 8007c04:	f7ff ff78 	bl	8007af8 <std>
 8007c08:	2301      	movs	r3, #1
 8007c0a:	61a3      	str	r3, [r4, #24]
 8007c0c:	e7d2      	b.n	8007bb4 <__sinit+0xc>
 8007c0e:	bf00      	nop
 8007c10:	08008528 	.word	0x08008528
 8007c14:	08007b41 	.word	0x08007b41

08007c18 <__sfp>:
 8007c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c1a:	4607      	mov	r7, r0
 8007c1c:	f7ff ffac 	bl	8007b78 <__sfp_lock_acquire>
 8007c20:	4b1e      	ldr	r3, [pc, #120]	; (8007c9c <__sfp+0x84>)
 8007c22:	681e      	ldr	r6, [r3, #0]
 8007c24:	69b3      	ldr	r3, [r6, #24]
 8007c26:	b913      	cbnz	r3, 8007c2e <__sfp+0x16>
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f7ff ffbd 	bl	8007ba8 <__sinit>
 8007c2e:	3648      	adds	r6, #72	; 0x48
 8007c30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007c34:	3b01      	subs	r3, #1
 8007c36:	d503      	bpl.n	8007c40 <__sfp+0x28>
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	b30b      	cbz	r3, 8007c80 <__sfp+0x68>
 8007c3c:	6836      	ldr	r6, [r6, #0]
 8007c3e:	e7f7      	b.n	8007c30 <__sfp+0x18>
 8007c40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007c44:	b9d5      	cbnz	r5, 8007c7c <__sfp+0x64>
 8007c46:	4b16      	ldr	r3, [pc, #88]	; (8007ca0 <__sfp+0x88>)
 8007c48:	60e3      	str	r3, [r4, #12]
 8007c4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c4e:	6665      	str	r5, [r4, #100]	; 0x64
 8007c50:	f000 f847 	bl	8007ce2 <__retarget_lock_init_recursive>
 8007c54:	f7ff ff96 	bl	8007b84 <__sfp_lock_release>
 8007c58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007c5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007c60:	6025      	str	r5, [r4, #0]
 8007c62:	61a5      	str	r5, [r4, #24]
 8007c64:	2208      	movs	r2, #8
 8007c66:	4629      	mov	r1, r5
 8007c68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007c6c:	f7ff fac4 	bl	80071f8 <memset>
 8007c70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007c74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007c78:	4620      	mov	r0, r4
 8007c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c7c:	3468      	adds	r4, #104	; 0x68
 8007c7e:	e7d9      	b.n	8007c34 <__sfp+0x1c>
 8007c80:	2104      	movs	r1, #4
 8007c82:	4638      	mov	r0, r7
 8007c84:	f7ff ff62 	bl	8007b4c <__sfmoreglue>
 8007c88:	4604      	mov	r4, r0
 8007c8a:	6030      	str	r0, [r6, #0]
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1d5      	bne.n	8007c3c <__sfp+0x24>
 8007c90:	f7ff ff78 	bl	8007b84 <__sfp_lock_release>
 8007c94:	230c      	movs	r3, #12
 8007c96:	603b      	str	r3, [r7, #0]
 8007c98:	e7ee      	b.n	8007c78 <__sfp+0x60>
 8007c9a:	bf00      	nop
 8007c9c:	08008528 	.word	0x08008528
 8007ca0:	ffff0001 	.word	0xffff0001

08007ca4 <_fwalk_reent>:
 8007ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ca8:	4606      	mov	r6, r0
 8007caa:	4688      	mov	r8, r1
 8007cac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007cb0:	2700      	movs	r7, #0
 8007cb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007cb6:	f1b9 0901 	subs.w	r9, r9, #1
 8007cba:	d505      	bpl.n	8007cc8 <_fwalk_reent+0x24>
 8007cbc:	6824      	ldr	r4, [r4, #0]
 8007cbe:	2c00      	cmp	r4, #0
 8007cc0:	d1f7      	bne.n	8007cb2 <_fwalk_reent+0xe>
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cc8:	89ab      	ldrh	r3, [r5, #12]
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d907      	bls.n	8007cde <_fwalk_reent+0x3a>
 8007cce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007cd2:	3301      	adds	r3, #1
 8007cd4:	d003      	beq.n	8007cde <_fwalk_reent+0x3a>
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	4630      	mov	r0, r6
 8007cda:	47c0      	blx	r8
 8007cdc:	4307      	orrs	r7, r0
 8007cde:	3568      	adds	r5, #104	; 0x68
 8007ce0:	e7e9      	b.n	8007cb6 <_fwalk_reent+0x12>

08007ce2 <__retarget_lock_init_recursive>:
 8007ce2:	4770      	bx	lr

08007ce4 <__retarget_lock_acquire_recursive>:
 8007ce4:	4770      	bx	lr

08007ce6 <__retarget_lock_release_recursive>:
 8007ce6:	4770      	bx	lr

08007ce8 <__swhatbuf_r>:
 8007ce8:	b570      	push	{r4, r5, r6, lr}
 8007cea:	460e      	mov	r6, r1
 8007cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cf0:	2900      	cmp	r1, #0
 8007cf2:	b096      	sub	sp, #88	; 0x58
 8007cf4:	4614      	mov	r4, r2
 8007cf6:	461d      	mov	r5, r3
 8007cf8:	da08      	bge.n	8007d0c <__swhatbuf_r+0x24>
 8007cfa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	602a      	str	r2, [r5, #0]
 8007d02:	061a      	lsls	r2, r3, #24
 8007d04:	d410      	bmi.n	8007d28 <__swhatbuf_r+0x40>
 8007d06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d0a:	e00e      	b.n	8007d2a <__swhatbuf_r+0x42>
 8007d0c:	466a      	mov	r2, sp
 8007d0e:	f000 f9eb 	bl	80080e8 <_fstat_r>
 8007d12:	2800      	cmp	r0, #0
 8007d14:	dbf1      	blt.n	8007cfa <__swhatbuf_r+0x12>
 8007d16:	9a01      	ldr	r2, [sp, #4]
 8007d18:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007d1c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007d20:	425a      	negs	r2, r3
 8007d22:	415a      	adcs	r2, r3
 8007d24:	602a      	str	r2, [r5, #0]
 8007d26:	e7ee      	b.n	8007d06 <__swhatbuf_r+0x1e>
 8007d28:	2340      	movs	r3, #64	; 0x40
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	6023      	str	r3, [r4, #0]
 8007d2e:	b016      	add	sp, #88	; 0x58
 8007d30:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d34 <__smakebuf_r>:
 8007d34:	898b      	ldrh	r3, [r1, #12]
 8007d36:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007d38:	079d      	lsls	r5, r3, #30
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	460c      	mov	r4, r1
 8007d3e:	d507      	bpl.n	8007d50 <__smakebuf_r+0x1c>
 8007d40:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	6123      	str	r3, [r4, #16]
 8007d48:	2301      	movs	r3, #1
 8007d4a:	6163      	str	r3, [r4, #20]
 8007d4c:	b002      	add	sp, #8
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	ab01      	add	r3, sp, #4
 8007d52:	466a      	mov	r2, sp
 8007d54:	f7ff ffc8 	bl	8007ce8 <__swhatbuf_r>
 8007d58:	9900      	ldr	r1, [sp, #0]
 8007d5a:	4605      	mov	r5, r0
 8007d5c:	4630      	mov	r0, r6
 8007d5e:	f000 f895 	bl	8007e8c <_malloc_r>
 8007d62:	b948      	cbnz	r0, 8007d78 <__smakebuf_r+0x44>
 8007d64:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d68:	059a      	lsls	r2, r3, #22
 8007d6a:	d4ef      	bmi.n	8007d4c <__smakebuf_r+0x18>
 8007d6c:	f023 0303 	bic.w	r3, r3, #3
 8007d70:	f043 0302 	orr.w	r3, r3, #2
 8007d74:	81a3      	strh	r3, [r4, #12]
 8007d76:	e7e3      	b.n	8007d40 <__smakebuf_r+0xc>
 8007d78:	4b0d      	ldr	r3, [pc, #52]	; (8007db0 <__smakebuf_r+0x7c>)
 8007d7a:	62b3      	str	r3, [r6, #40]	; 0x28
 8007d7c:	89a3      	ldrh	r3, [r4, #12]
 8007d7e:	6020      	str	r0, [r4, #0]
 8007d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d84:	81a3      	strh	r3, [r4, #12]
 8007d86:	9b00      	ldr	r3, [sp, #0]
 8007d88:	6163      	str	r3, [r4, #20]
 8007d8a:	9b01      	ldr	r3, [sp, #4]
 8007d8c:	6120      	str	r0, [r4, #16]
 8007d8e:	b15b      	cbz	r3, 8007da8 <__smakebuf_r+0x74>
 8007d90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d94:	4630      	mov	r0, r6
 8007d96:	f000 f9b9 	bl	800810c <_isatty_r>
 8007d9a:	b128      	cbz	r0, 8007da8 <__smakebuf_r+0x74>
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	81a3      	strh	r3, [r4, #12]
 8007da8:	89a0      	ldrh	r0, [r4, #12]
 8007daa:	4305      	orrs	r5, r0
 8007dac:	81a5      	strh	r5, [r4, #12]
 8007dae:	e7cd      	b.n	8007d4c <__smakebuf_r+0x18>
 8007db0:	08007b41 	.word	0x08007b41

08007db4 <_free_r>:
 8007db4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007db6:	2900      	cmp	r1, #0
 8007db8:	d044      	beq.n	8007e44 <_free_r+0x90>
 8007dba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dbe:	9001      	str	r0, [sp, #4]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	f1a1 0404 	sub.w	r4, r1, #4
 8007dc6:	bfb8      	it	lt
 8007dc8:	18e4      	addlt	r4, r4, r3
 8007dca:	f000 f9c1 	bl	8008150 <__malloc_lock>
 8007dce:	4a1e      	ldr	r2, [pc, #120]	; (8007e48 <_free_r+0x94>)
 8007dd0:	9801      	ldr	r0, [sp, #4]
 8007dd2:	6813      	ldr	r3, [r2, #0]
 8007dd4:	b933      	cbnz	r3, 8007de4 <_free_r+0x30>
 8007dd6:	6063      	str	r3, [r4, #4]
 8007dd8:	6014      	str	r4, [r2, #0]
 8007dda:	b003      	add	sp, #12
 8007ddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007de0:	f000 b9bc 	b.w	800815c <__malloc_unlock>
 8007de4:	42a3      	cmp	r3, r4
 8007de6:	d908      	bls.n	8007dfa <_free_r+0x46>
 8007de8:	6825      	ldr	r5, [r4, #0]
 8007dea:	1961      	adds	r1, r4, r5
 8007dec:	428b      	cmp	r3, r1
 8007dee:	bf01      	itttt	eq
 8007df0:	6819      	ldreq	r1, [r3, #0]
 8007df2:	685b      	ldreq	r3, [r3, #4]
 8007df4:	1949      	addeq	r1, r1, r5
 8007df6:	6021      	streq	r1, [r4, #0]
 8007df8:	e7ed      	b.n	8007dd6 <_free_r+0x22>
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	b10b      	cbz	r3, 8007e04 <_free_r+0x50>
 8007e00:	42a3      	cmp	r3, r4
 8007e02:	d9fa      	bls.n	8007dfa <_free_r+0x46>
 8007e04:	6811      	ldr	r1, [r2, #0]
 8007e06:	1855      	adds	r5, r2, r1
 8007e08:	42a5      	cmp	r5, r4
 8007e0a:	d10b      	bne.n	8007e24 <_free_r+0x70>
 8007e0c:	6824      	ldr	r4, [r4, #0]
 8007e0e:	4421      	add	r1, r4
 8007e10:	1854      	adds	r4, r2, r1
 8007e12:	42a3      	cmp	r3, r4
 8007e14:	6011      	str	r1, [r2, #0]
 8007e16:	d1e0      	bne.n	8007dda <_free_r+0x26>
 8007e18:	681c      	ldr	r4, [r3, #0]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	6053      	str	r3, [r2, #4]
 8007e1e:	4421      	add	r1, r4
 8007e20:	6011      	str	r1, [r2, #0]
 8007e22:	e7da      	b.n	8007dda <_free_r+0x26>
 8007e24:	d902      	bls.n	8007e2c <_free_r+0x78>
 8007e26:	230c      	movs	r3, #12
 8007e28:	6003      	str	r3, [r0, #0]
 8007e2a:	e7d6      	b.n	8007dda <_free_r+0x26>
 8007e2c:	6825      	ldr	r5, [r4, #0]
 8007e2e:	1961      	adds	r1, r4, r5
 8007e30:	428b      	cmp	r3, r1
 8007e32:	bf04      	itt	eq
 8007e34:	6819      	ldreq	r1, [r3, #0]
 8007e36:	685b      	ldreq	r3, [r3, #4]
 8007e38:	6063      	str	r3, [r4, #4]
 8007e3a:	bf04      	itt	eq
 8007e3c:	1949      	addeq	r1, r1, r5
 8007e3e:	6021      	streq	r1, [r4, #0]
 8007e40:	6054      	str	r4, [r2, #4]
 8007e42:	e7ca      	b.n	8007dda <_free_r+0x26>
 8007e44:	b003      	add	sp, #12
 8007e46:	bd30      	pop	{r4, r5, pc}
 8007e48:	2000043c 	.word	0x2000043c

08007e4c <sbrk_aligned>:
 8007e4c:	b570      	push	{r4, r5, r6, lr}
 8007e4e:	4e0e      	ldr	r6, [pc, #56]	; (8007e88 <sbrk_aligned+0x3c>)
 8007e50:	460c      	mov	r4, r1
 8007e52:	6831      	ldr	r1, [r6, #0]
 8007e54:	4605      	mov	r5, r0
 8007e56:	b911      	cbnz	r1, 8007e5e <sbrk_aligned+0x12>
 8007e58:	f000 f88c 	bl	8007f74 <_sbrk_r>
 8007e5c:	6030      	str	r0, [r6, #0]
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4628      	mov	r0, r5
 8007e62:	f000 f887 	bl	8007f74 <_sbrk_r>
 8007e66:	1c43      	adds	r3, r0, #1
 8007e68:	d00a      	beq.n	8007e80 <sbrk_aligned+0x34>
 8007e6a:	1cc4      	adds	r4, r0, #3
 8007e6c:	f024 0403 	bic.w	r4, r4, #3
 8007e70:	42a0      	cmp	r0, r4
 8007e72:	d007      	beq.n	8007e84 <sbrk_aligned+0x38>
 8007e74:	1a21      	subs	r1, r4, r0
 8007e76:	4628      	mov	r0, r5
 8007e78:	f000 f87c 	bl	8007f74 <_sbrk_r>
 8007e7c:	3001      	adds	r0, #1
 8007e7e:	d101      	bne.n	8007e84 <sbrk_aligned+0x38>
 8007e80:	f04f 34ff 	mov.w	r4, #4294967295
 8007e84:	4620      	mov	r0, r4
 8007e86:	bd70      	pop	{r4, r5, r6, pc}
 8007e88:	20000440 	.word	0x20000440

08007e8c <_malloc_r>:
 8007e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e90:	1ccd      	adds	r5, r1, #3
 8007e92:	f025 0503 	bic.w	r5, r5, #3
 8007e96:	3508      	adds	r5, #8
 8007e98:	2d0c      	cmp	r5, #12
 8007e9a:	bf38      	it	cc
 8007e9c:	250c      	movcc	r5, #12
 8007e9e:	2d00      	cmp	r5, #0
 8007ea0:	4607      	mov	r7, r0
 8007ea2:	db01      	blt.n	8007ea8 <_malloc_r+0x1c>
 8007ea4:	42a9      	cmp	r1, r5
 8007ea6:	d905      	bls.n	8007eb4 <_malloc_r+0x28>
 8007ea8:	230c      	movs	r3, #12
 8007eaa:	603b      	str	r3, [r7, #0]
 8007eac:	2600      	movs	r6, #0
 8007eae:	4630      	mov	r0, r6
 8007eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007eb4:	4e2e      	ldr	r6, [pc, #184]	; (8007f70 <_malloc_r+0xe4>)
 8007eb6:	f000 f94b 	bl	8008150 <__malloc_lock>
 8007eba:	6833      	ldr	r3, [r6, #0]
 8007ebc:	461c      	mov	r4, r3
 8007ebe:	bb34      	cbnz	r4, 8007f0e <_malloc_r+0x82>
 8007ec0:	4629      	mov	r1, r5
 8007ec2:	4638      	mov	r0, r7
 8007ec4:	f7ff ffc2 	bl	8007e4c <sbrk_aligned>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	4604      	mov	r4, r0
 8007ecc:	d14d      	bne.n	8007f6a <_malloc_r+0xde>
 8007ece:	6834      	ldr	r4, [r6, #0]
 8007ed0:	4626      	mov	r6, r4
 8007ed2:	2e00      	cmp	r6, #0
 8007ed4:	d140      	bne.n	8007f58 <_malloc_r+0xcc>
 8007ed6:	6823      	ldr	r3, [r4, #0]
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4638      	mov	r0, r7
 8007edc:	eb04 0803 	add.w	r8, r4, r3
 8007ee0:	f000 f848 	bl	8007f74 <_sbrk_r>
 8007ee4:	4580      	cmp	r8, r0
 8007ee6:	d13a      	bne.n	8007f5e <_malloc_r+0xd2>
 8007ee8:	6821      	ldr	r1, [r4, #0]
 8007eea:	3503      	adds	r5, #3
 8007eec:	1a6d      	subs	r5, r5, r1
 8007eee:	f025 0503 	bic.w	r5, r5, #3
 8007ef2:	3508      	adds	r5, #8
 8007ef4:	2d0c      	cmp	r5, #12
 8007ef6:	bf38      	it	cc
 8007ef8:	250c      	movcc	r5, #12
 8007efa:	4629      	mov	r1, r5
 8007efc:	4638      	mov	r0, r7
 8007efe:	f7ff ffa5 	bl	8007e4c <sbrk_aligned>
 8007f02:	3001      	adds	r0, #1
 8007f04:	d02b      	beq.n	8007f5e <_malloc_r+0xd2>
 8007f06:	6823      	ldr	r3, [r4, #0]
 8007f08:	442b      	add	r3, r5
 8007f0a:	6023      	str	r3, [r4, #0]
 8007f0c:	e00e      	b.n	8007f2c <_malloc_r+0xa0>
 8007f0e:	6822      	ldr	r2, [r4, #0]
 8007f10:	1b52      	subs	r2, r2, r5
 8007f12:	d41e      	bmi.n	8007f52 <_malloc_r+0xc6>
 8007f14:	2a0b      	cmp	r2, #11
 8007f16:	d916      	bls.n	8007f46 <_malloc_r+0xba>
 8007f18:	1961      	adds	r1, r4, r5
 8007f1a:	42a3      	cmp	r3, r4
 8007f1c:	6025      	str	r5, [r4, #0]
 8007f1e:	bf18      	it	ne
 8007f20:	6059      	strne	r1, [r3, #4]
 8007f22:	6863      	ldr	r3, [r4, #4]
 8007f24:	bf08      	it	eq
 8007f26:	6031      	streq	r1, [r6, #0]
 8007f28:	5162      	str	r2, [r4, r5]
 8007f2a:	604b      	str	r3, [r1, #4]
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f104 060b 	add.w	r6, r4, #11
 8007f32:	f000 f913 	bl	800815c <__malloc_unlock>
 8007f36:	f026 0607 	bic.w	r6, r6, #7
 8007f3a:	1d23      	adds	r3, r4, #4
 8007f3c:	1af2      	subs	r2, r6, r3
 8007f3e:	d0b6      	beq.n	8007eae <_malloc_r+0x22>
 8007f40:	1b9b      	subs	r3, r3, r6
 8007f42:	50a3      	str	r3, [r4, r2]
 8007f44:	e7b3      	b.n	8007eae <_malloc_r+0x22>
 8007f46:	6862      	ldr	r2, [r4, #4]
 8007f48:	42a3      	cmp	r3, r4
 8007f4a:	bf0c      	ite	eq
 8007f4c:	6032      	streq	r2, [r6, #0]
 8007f4e:	605a      	strne	r2, [r3, #4]
 8007f50:	e7ec      	b.n	8007f2c <_malloc_r+0xa0>
 8007f52:	4623      	mov	r3, r4
 8007f54:	6864      	ldr	r4, [r4, #4]
 8007f56:	e7b2      	b.n	8007ebe <_malloc_r+0x32>
 8007f58:	4634      	mov	r4, r6
 8007f5a:	6876      	ldr	r6, [r6, #4]
 8007f5c:	e7b9      	b.n	8007ed2 <_malloc_r+0x46>
 8007f5e:	230c      	movs	r3, #12
 8007f60:	603b      	str	r3, [r7, #0]
 8007f62:	4638      	mov	r0, r7
 8007f64:	f000 f8fa 	bl	800815c <__malloc_unlock>
 8007f68:	e7a1      	b.n	8007eae <_malloc_r+0x22>
 8007f6a:	6025      	str	r5, [r4, #0]
 8007f6c:	e7de      	b.n	8007f2c <_malloc_r+0xa0>
 8007f6e:	bf00      	nop
 8007f70:	2000043c 	.word	0x2000043c

08007f74 <_sbrk_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4d06      	ldr	r5, [pc, #24]	; (8007f90 <_sbrk_r+0x1c>)
 8007f78:	2300      	movs	r3, #0
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	4608      	mov	r0, r1
 8007f7e:	602b      	str	r3, [r5, #0]
 8007f80:	f7fa f82c 	bl	8001fdc <_sbrk>
 8007f84:	1c43      	adds	r3, r0, #1
 8007f86:	d102      	bne.n	8007f8e <_sbrk_r+0x1a>
 8007f88:	682b      	ldr	r3, [r5, #0]
 8007f8a:	b103      	cbz	r3, 8007f8e <_sbrk_r+0x1a>
 8007f8c:	6023      	str	r3, [r4, #0]
 8007f8e:	bd38      	pop	{r3, r4, r5, pc}
 8007f90:	20000444 	.word	0x20000444

08007f94 <_raise_r>:
 8007f94:	291f      	cmp	r1, #31
 8007f96:	b538      	push	{r3, r4, r5, lr}
 8007f98:	4604      	mov	r4, r0
 8007f9a:	460d      	mov	r5, r1
 8007f9c:	d904      	bls.n	8007fa8 <_raise_r+0x14>
 8007f9e:	2316      	movs	r3, #22
 8007fa0:	6003      	str	r3, [r0, #0]
 8007fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa6:	bd38      	pop	{r3, r4, r5, pc}
 8007fa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007faa:	b112      	cbz	r2, 8007fb2 <_raise_r+0x1e>
 8007fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007fb0:	b94b      	cbnz	r3, 8007fc6 <_raise_r+0x32>
 8007fb2:	4620      	mov	r0, r4
 8007fb4:	f000 f830 	bl	8008018 <_getpid_r>
 8007fb8:	462a      	mov	r2, r5
 8007fba:	4601      	mov	r1, r0
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fc2:	f000 b817 	b.w	8007ff4 <_kill_r>
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	d00a      	beq.n	8007fe0 <_raise_r+0x4c>
 8007fca:	1c59      	adds	r1, r3, #1
 8007fcc:	d103      	bne.n	8007fd6 <_raise_r+0x42>
 8007fce:	2316      	movs	r3, #22
 8007fd0:	6003      	str	r3, [r0, #0]
 8007fd2:	2001      	movs	r0, #1
 8007fd4:	e7e7      	b.n	8007fa6 <_raise_r+0x12>
 8007fd6:	2400      	movs	r4, #0
 8007fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007fdc:	4628      	mov	r0, r5
 8007fde:	4798      	blx	r3
 8007fe0:	2000      	movs	r0, #0
 8007fe2:	e7e0      	b.n	8007fa6 <_raise_r+0x12>

08007fe4 <raise>:
 8007fe4:	4b02      	ldr	r3, [pc, #8]	; (8007ff0 <raise+0xc>)
 8007fe6:	4601      	mov	r1, r0
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	f7ff bfd3 	b.w	8007f94 <_raise_r>
 8007fee:	bf00      	nop
 8007ff0:	20000094 	.word	0x20000094

08007ff4 <_kill_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	; (8008014 <_kill_r+0x20>)
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	4604      	mov	r4, r0
 8007ffc:	4608      	mov	r0, r1
 8007ffe:	4611      	mov	r1, r2
 8008000:	602b      	str	r3, [r5, #0]
 8008002:	f7f9 ff63 	bl	8001ecc <_kill>
 8008006:	1c43      	adds	r3, r0, #1
 8008008:	d102      	bne.n	8008010 <_kill_r+0x1c>
 800800a:	682b      	ldr	r3, [r5, #0]
 800800c:	b103      	cbz	r3, 8008010 <_kill_r+0x1c>
 800800e:	6023      	str	r3, [r4, #0]
 8008010:	bd38      	pop	{r3, r4, r5, pc}
 8008012:	bf00      	nop
 8008014:	20000444 	.word	0x20000444

08008018 <_getpid_r>:
 8008018:	f7f9 bf50 	b.w	8001ebc <_getpid>

0800801c <__sread>:
 800801c:	b510      	push	{r4, lr}
 800801e:	460c      	mov	r4, r1
 8008020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008024:	f000 f8a0 	bl	8008168 <_read_r>
 8008028:	2800      	cmp	r0, #0
 800802a:	bfab      	itete	ge
 800802c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802e:	89a3      	ldrhlt	r3, [r4, #12]
 8008030:	181b      	addge	r3, r3, r0
 8008032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008036:	bfac      	ite	ge
 8008038:	6563      	strge	r3, [r4, #84]	; 0x54
 800803a:	81a3      	strhlt	r3, [r4, #12]
 800803c:	bd10      	pop	{r4, pc}

0800803e <__swrite>:
 800803e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008042:	461f      	mov	r7, r3
 8008044:	898b      	ldrh	r3, [r1, #12]
 8008046:	05db      	lsls	r3, r3, #23
 8008048:	4605      	mov	r5, r0
 800804a:	460c      	mov	r4, r1
 800804c:	4616      	mov	r6, r2
 800804e:	d505      	bpl.n	800805c <__swrite+0x1e>
 8008050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008054:	2302      	movs	r3, #2
 8008056:	2200      	movs	r2, #0
 8008058:	f000 f868 	bl	800812c <_lseek_r>
 800805c:	89a3      	ldrh	r3, [r4, #12]
 800805e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008066:	81a3      	strh	r3, [r4, #12]
 8008068:	4632      	mov	r2, r6
 800806a:	463b      	mov	r3, r7
 800806c:	4628      	mov	r0, r5
 800806e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008072:	f000 b817 	b.w	80080a4 <_write_r>

08008076 <__sseek>:
 8008076:	b510      	push	{r4, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807e:	f000 f855 	bl	800812c <_lseek_r>
 8008082:	1c43      	adds	r3, r0, #1
 8008084:	89a3      	ldrh	r3, [r4, #12]
 8008086:	bf15      	itete	ne
 8008088:	6560      	strne	r0, [r4, #84]	; 0x54
 800808a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008092:	81a3      	strheq	r3, [r4, #12]
 8008094:	bf18      	it	ne
 8008096:	81a3      	strhne	r3, [r4, #12]
 8008098:	bd10      	pop	{r4, pc}

0800809a <__sclose>:
 800809a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809e:	f000 b813 	b.w	80080c8 <_close_r>
	...

080080a4 <_write_r>:
 80080a4:	b538      	push	{r3, r4, r5, lr}
 80080a6:	4d07      	ldr	r5, [pc, #28]	; (80080c4 <_write_r+0x20>)
 80080a8:	4604      	mov	r4, r0
 80080aa:	4608      	mov	r0, r1
 80080ac:	4611      	mov	r1, r2
 80080ae:	2200      	movs	r2, #0
 80080b0:	602a      	str	r2, [r5, #0]
 80080b2:	461a      	mov	r2, r3
 80080b4:	f7f9 ff41 	bl	8001f3a <_write>
 80080b8:	1c43      	adds	r3, r0, #1
 80080ba:	d102      	bne.n	80080c2 <_write_r+0x1e>
 80080bc:	682b      	ldr	r3, [r5, #0]
 80080be:	b103      	cbz	r3, 80080c2 <_write_r+0x1e>
 80080c0:	6023      	str	r3, [r4, #0]
 80080c2:	bd38      	pop	{r3, r4, r5, pc}
 80080c4:	20000444 	.word	0x20000444

080080c8 <_close_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d06      	ldr	r5, [pc, #24]	; (80080e4 <_close_r+0x1c>)
 80080cc:	2300      	movs	r3, #0
 80080ce:	4604      	mov	r4, r0
 80080d0:	4608      	mov	r0, r1
 80080d2:	602b      	str	r3, [r5, #0]
 80080d4:	f7f9 ff4d 	bl	8001f72 <_close>
 80080d8:	1c43      	adds	r3, r0, #1
 80080da:	d102      	bne.n	80080e2 <_close_r+0x1a>
 80080dc:	682b      	ldr	r3, [r5, #0]
 80080de:	b103      	cbz	r3, 80080e2 <_close_r+0x1a>
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	bd38      	pop	{r3, r4, r5, pc}
 80080e4:	20000444 	.word	0x20000444

080080e8 <_fstat_r>:
 80080e8:	b538      	push	{r3, r4, r5, lr}
 80080ea:	4d07      	ldr	r5, [pc, #28]	; (8008108 <_fstat_r+0x20>)
 80080ec:	2300      	movs	r3, #0
 80080ee:	4604      	mov	r4, r0
 80080f0:	4608      	mov	r0, r1
 80080f2:	4611      	mov	r1, r2
 80080f4:	602b      	str	r3, [r5, #0]
 80080f6:	f7f9 ff48 	bl	8001f8a <_fstat>
 80080fa:	1c43      	adds	r3, r0, #1
 80080fc:	d102      	bne.n	8008104 <_fstat_r+0x1c>
 80080fe:	682b      	ldr	r3, [r5, #0]
 8008100:	b103      	cbz	r3, 8008104 <_fstat_r+0x1c>
 8008102:	6023      	str	r3, [r4, #0]
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	bf00      	nop
 8008108:	20000444 	.word	0x20000444

0800810c <_isatty_r>:
 800810c:	b538      	push	{r3, r4, r5, lr}
 800810e:	4d06      	ldr	r5, [pc, #24]	; (8008128 <_isatty_r+0x1c>)
 8008110:	2300      	movs	r3, #0
 8008112:	4604      	mov	r4, r0
 8008114:	4608      	mov	r0, r1
 8008116:	602b      	str	r3, [r5, #0]
 8008118:	f7f9 ff47 	bl	8001faa <_isatty>
 800811c:	1c43      	adds	r3, r0, #1
 800811e:	d102      	bne.n	8008126 <_isatty_r+0x1a>
 8008120:	682b      	ldr	r3, [r5, #0]
 8008122:	b103      	cbz	r3, 8008126 <_isatty_r+0x1a>
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	bd38      	pop	{r3, r4, r5, pc}
 8008128:	20000444 	.word	0x20000444

0800812c <_lseek_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d07      	ldr	r5, [pc, #28]	; (800814c <_lseek_r+0x20>)
 8008130:	4604      	mov	r4, r0
 8008132:	4608      	mov	r0, r1
 8008134:	4611      	mov	r1, r2
 8008136:	2200      	movs	r2, #0
 8008138:	602a      	str	r2, [r5, #0]
 800813a:	461a      	mov	r2, r3
 800813c:	f7f9 ff40 	bl	8001fc0 <_lseek>
 8008140:	1c43      	adds	r3, r0, #1
 8008142:	d102      	bne.n	800814a <_lseek_r+0x1e>
 8008144:	682b      	ldr	r3, [r5, #0]
 8008146:	b103      	cbz	r3, 800814a <_lseek_r+0x1e>
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	bd38      	pop	{r3, r4, r5, pc}
 800814c:	20000444 	.word	0x20000444

08008150 <__malloc_lock>:
 8008150:	4801      	ldr	r0, [pc, #4]	; (8008158 <__malloc_lock+0x8>)
 8008152:	f7ff bdc7 	b.w	8007ce4 <__retarget_lock_acquire_recursive>
 8008156:	bf00      	nop
 8008158:	20000436 	.word	0x20000436

0800815c <__malloc_unlock>:
 800815c:	4801      	ldr	r0, [pc, #4]	; (8008164 <__malloc_unlock+0x8>)
 800815e:	f7ff bdc2 	b.w	8007ce6 <__retarget_lock_release_recursive>
 8008162:	bf00      	nop
 8008164:	20000436 	.word	0x20000436

08008168 <_read_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d07      	ldr	r5, [pc, #28]	; (8008188 <_read_r+0x20>)
 800816c:	4604      	mov	r4, r0
 800816e:	4608      	mov	r0, r1
 8008170:	4611      	mov	r1, r2
 8008172:	2200      	movs	r2, #0
 8008174:	602a      	str	r2, [r5, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	f7f9 fec2 	bl	8001f00 <_read>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_read_r+0x1e>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_read_r+0x1e>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	20000444 	.word	0x20000444

0800818c <_init>:
 800818c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800818e:	bf00      	nop
 8008190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008192:	bc08      	pop	{r3}
 8008194:	469e      	mov	lr, r3
 8008196:	4770      	bx	lr

08008198 <_fini>:
 8008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819a:	bf00      	nop
 800819c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800819e:	bc08      	pop	{r3}
 80081a0:	469e      	mov	lr, r3
 80081a2:	4770      	bx	lr
